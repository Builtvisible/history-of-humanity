(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports={"1750":[{"text":"Peak of the Little Ice Age","links": {"main": {"title":"Little Ice Age","link":"//en.wikipedia.org/wiki/Little_Ice_Age"}},"locations":[],"latlong":[],"tags":["ecology","science"]}],"1752":[{"text":"The Lightning rod invented by Benjamin Franklin","links": {"main": {"title":"Lightning rod","link":"//en.wikipedia.org/wiki/Lightning_rod"},"related":[{"title":"Benjamin Franklin","link":"//en.wikipedia.org/wiki/Benjamin_Franklin"}]},"locations":[],"latlong":[[39.950725, -75.156867]],"tags":["technology","science"]}],"1754":[{"text":"Treaty of Pondicherry ends Second Carnatic War and recognizes Muhammed Ali Khan Wallajah as Nawab of the Carnatic","links": {"main": {"title":"Treaty of Pondicherry","link":"//en.wikipedia.org/wiki/Treaty_of_Pondicherry"},"related":[{"title":"Carnatic Wars","link":"//en.wikipedia.org/wiki/Carnatic_Wars"},{"title":"Muhammed Ali Khan Wallajah","link":"//en.wikipedia.org/wiki/Muhammad_Ali_Khan_Wallajah"},{"title":"Nawab of the Carnatic","link":"//en.wikipedia.org/wiki/Nawab_of_the_Carnatic"}]},"locations":["Kingdom of France","Kingdom of Great Britain","Mughal Empire"],"latlong":[[20.593684, 78.96288]],"tags":["conflict","treaty"]},{"text":"King's College founded by a royal charter of George II of Great Britain","links": {"main": {"title":"King's College, now Columbia University","link":"//en.wikipedia.org/wiki/Columbia_University"},"related":[{"title":"George II of Great Britain","link":"//en.wikipedia.org/wiki/George_II_of_Great_Britain"}]},"locations":["New York"],"latlong":[[40.8075,-73.961944]],"tags":["education"]},{"text":"The French and Indian War, Fought in the U.S. and Canada mostly between the French and their allies and the English and their allies (the North American chapter of the Seven Years' War)","links": {"main": {"title":"French and Indian War","link":"//en.wikipedia.org/wiki/French_and_Indian_War"},"related":[{"title":"Seven Years' War","link":"//en.wikipedia.org/wiki/Seven_Years%27_War"}]},"locations":["North America"],"latlong":[[39.320980, -111.093731]],"tags":["conflict"]}],"1755":[{"text":"A Dictionary of the English Language by Samuel Johnson","links": {"main": {"title":"A Dictionary of the English Language","link":"//en.wikipedia.org/wiki/A_Dictionary_of_the_English_Language"},"related":[{"title":"Samuel Johnson","link":"//en.wikipedia.org/wiki/Samuel_Johnson"}]},"locations":["Great Britain"],"latlong":[[51.507351, -0.127758]],"tags":["person"]},{"text":"The Lisbon earthquake","links": {"main": {"title":"1755 Lisbon earthquake","link":"//en.wikipedia.org/wiki/1755_Lisbon_earthquake"}},"locations":["Lisbon"],"latlong":[[36, -11]],"tags":["natural disaster"]},{"text":"The tallest wooden Bodhisattva statue in the world is erected at Puning Temple, Chengde, China.","links": {"main": {"title":"Bodhisattva","link":"//en.wikipedia.org/wiki/Bodhisattva"},"related":[{"title":"Puning Temple","link":"//en.wikipedia.org/wiki/Puning_Temple"}]},"locations":["Chengde"],"latlong":[[40.966667, 117.933333]],"tags":["religion","art"]},{"text":"The Treaty of Giyanti is signed, effectively partitioning the Mataram Sultanate. The VOC recognizes Mangkubumi as Sultan Hamengkubuwana I, who rules half of Central Java. Hamengkubuwana I then established Yogyakarta Sultanate, moves to Yogya and renames the city Yogyakarta","links": {"main": {"title":"Treaty of Giyanti","link":"//en.wikipedia.org/wiki/Treaty_of_Giyanti"},"related":[{"title":"Mataram Sultanate","link":"//en.wikipedia.org/wiki/Mataram_Sultanate"},{"title":"Yogyakarta Sultanate","link":"//en.wikipedia.org/wiki/Yogyakarta_Sultanate"},{"title":"Yogyakarta","link":"//en.wikipedia.org/wiki/Yogyakarta"}]},"locations":["Java"],"latlong":[[-7.491667, 110.004444]],"tags":["treaty","government","conflict"]},{"text":"The Great Upheaval, forced population transfer of the French Acadian population from Nova Scotia and New Brunswick","links": {"main": {"title":"Expulsion of the Acadians","link":"//en.wikipedia.org/wiki/Expulsion_of_the_Acadians"},"related":[{"title":"French and Indian War","link":"//en.wikipedia.org/wiki/French_and_Indian_War"}]},"locations":["Nova Scotia"],"latlong":[[44.681987, -63.744311]],"tags":["conflict"]}],"1756":[{"text":"Seven Years' War fought among European powers in various theaters around the world","links": {"main": {"title":"Seven Years' War","link":"//en.wikipedia.org/wiki/Seven_Years%27_War"}},"locations":["North America"],"latlong":[[39.320980, -111.093731]],"tags":["conflict"]},{"text":"The Third Carnatic War fought between the British, the French, the Marathas, and Mysore in India","links": {"main": {"title":"Carnatic Wars","link":"//en.wikipedia.org/wiki/Carnatic_Wars"}},"locations":["Kingdom of France","Kingdom of Great Britain","Mughal Empire"],"latlong":[[20.593684, 78.96288]],"tags":["conflict","treaty"]}],"1757":[{"text":"Battle of Plassey signaled the beginning of formal British rule in India after years of commercial activity under the auspices of the East India Company","links": {"main": {"title":"Battle of Plassey","link":"//en.wikipedia.org/wiki/Battle_of_Plassey"},"related":[{"title":"East India Company","link":"//en.wikipedia.org/wiki/East_India_Company"}]},"locations":["Palashi"],"latlong":[[23.8, 88.25]],"tags":["conflict","government"]},{"text":"Salatiga treaty between Prince Sambernyawa with Pakubuwono III and Hamengkubuwono I further partitioning the remnant of Mataram Sultanate, the Mangkunegaran Grand Duchy wasestablished","links": {"main": {"title":"Mangkunegaran Palace","link":"//en.wikipedia.org/wiki/Mangkunegaran_Palace"},"related":[{"title":"Mangkunegara I","link":"//en.wikipedia.org/wiki/Mangkunegara_I"},{"title":"Hamengkubuwono I","link":"//en.wikipedia.org/wiki/Hamengkubuwono_I"},{"title":"Pakubuwono III","link":"//en.wikipedia.org/wiki/Pakubuwono_III"}]},"locations":["Surakarta"],"latlong":[[-7.558027, 110.819529]],"tags":["treaty"]}],"1758":[{"text":"British colonel James Wolfe issues the Wolfe's Manifesto","links": {"main": {"title":"Wolfe's Manifesto","link":"//en.wikipedia.org/wiki/Wolfe%27s_Manifesto"},"related":[{"title":"James Wolfe","link":"//en.wikipedia.org/wiki/James_Wolfe"},{"title":"Great Britain in the Seven Years' War","link":"//en.wikipedia.org/wiki/Great_Britain_in_the_Seven_Years%27_War"}]},"locations":["Quebec","New France"],"latlong":[46.816667, -71.216667],"tags":["conflict"]}],"1759":[{"text":"Candide by Voltaire","links": {"main": {"title":"Candide","link":"//en.wikipedia.org/wiki/Candide"},"related":[{"title":"Voltaire","link":"//en.wikipedia.org/wiki/Voltaire"}]},"locations":["France","Ferney"],"latlong":[[46.2558, 6.1081]],"tags":["art"]},{"text":"French commander Louis-Joseph de Montcalm and British commander James Wolfe die during the Battle of the Plains of Abraham","links": {"main": {"title":"Battle of the Plains of Abraham","link":"//en.wikipedia.org/wiki/Battle_of_the_Plains_of_Abraham"},"related":[{"title":"James Wolfe","link":"//en.wikipedia.org/wiki/James_Wolfe"},{"title":"Louis-Joseph de Montcalm","link":"//en.wikipedia.org/wiki/Louis-Joseph_de_Montcalm"}]},"locations":["Quebec City"],"latlong":[[46.816667, -71.216667]],"tags":["conflict"]},{"text":"First publication of Tristram Shandy by Laurence Sterne","links": {"main": {"title":"The Life and Opinions of Tristram Shandy, Gentleman","link":"//en.wikipedia.org/wiki/The_Life_and_Opinions_of_Tristram_Shandy,_Gentleman"},"related":[{"title":"Laurence Sterne","link":"//en.wikipedia.org/wiki/Laurence_Sterne"}]},"locations":["United Kingdom"],"latlong":[],"tags":["art"]}],"1760":[{"text":"George III became King of Britain","links": {"main": {"title":"George III of the United Kingdom","link":"//en.wikipedia.org/wiki/George_III_of_the_United_Kingdom"}},"locations":["United Kingdom","London"],"latlong":[[51.507351, -0.127758]],"tags":["government","person"]},{"text":"Zand dynasty founded in Iran","links": {"main": {"title":"Zand Dynasty","link":"//en.wikipedia.org/wiki/Zand_dynasty"}},"locations":["Iran"],"latlong":[[29.616667, 52.533333]],"tags":["government"]}],"1761":[{"text":"Maratha Empire defeated at Battle of Panipat","links": {"main": {"title":"Third Battle of Panipat","link":"//en.wikipedia.org/wiki/Third_Battle_of_Panipat"},"related":[{"title":"Durrani Empire","link":"//en.wikipedia.org/wiki/Durrani_Empire"},{"title":"Maratha Empire","link":"//en.wikipedia.org/wiki/Maratha_Empire"}]},"locations":["Panipat"],"latlong":[[29.39, 76.97]],"tags":["conflict"]},{"text":"The problem of Longitude was finally resolved by the fourth chronometer of John Harrison","links": {"main": {"title":"Marine chronometer","link":"//en.wikipedia.org/wiki/Marine_chronometer"},"related":[{"title":"John Harrison","link":"//en.wikipedia.org/wiki/John_Harrison"},{"title":"Longitude","link":"//en.wikipedia.org/wiki/Longitude"}]},"locations":["London"],"latlong":[[51.507351, -0.127758]],"tags":["science","technology","transport"]}],"1762":[{"text":"Orfeo ed Euridice, the first 'reform opera' by Gluck, performed in Vienna","links": {"main": {"title":"Orfeo ed Euridice","link":"//en.wikipedia.org/wiki/Orfeo_ed_Euridice"},"related":[{"title":"Christoph Willibald Gluck","link":"//en.wikipedia.org/wiki/Christoph_Willibald_Gluck"}]},"locations":["Vienna"],"latlong":[[48.2, 16.366667]],"tags":["art"]},{"text":"Reign of Catherine the Great of Russia begins","links": {"main": {"title":"Catherine the Great","link":"//en.wikipedia.org/wiki/Catherine_the_Great"}},"locations":["Russia"],"latlong":[[55.755826, 37.6173]],"tags":["government"]}],"1763":[{"text":"Hyder Ali leads the Kingdom of Mysore to conquer the Kingdom of Keladi","links": {"main": {"title":"Hyder Ali","link":"//en.wikipedia.org/wiki/Hyder_Ali"},"related":[{"title":"Kingdom of Mysore","link":"//en.wikipedia.org/wiki/Kingdom_of_Mysore"},{"title":"Nayakas of Keladi","link":"//en.wikipedia.org/wiki/Nayakas_of_Keladi"}]},"locations":["Keladi"],"latlong":[[14.135, 75.0226]],"tags":["conflict"]},{"text":"Thomas Bayes publishes first version of Bayes' Theorem, paving the way for Bayesian probability","links": {"main": {"title":"Bayes' theorem","link":"//en.wikipedia.org/wiki/Bayes%27_theorem"},"related":[{"title":"Thomas Bayes","link":"//en.wikipedia.org/wiki/Thomas_Bayes"},{"title":"Bayesian probability","link":"//en.wikipedia.org/wiki/Bayesian_probability"}]},"locations":["Tunbridge Wells"],"latlong":[[51.132377, 0.263695]],"tags":["science"]},{"text":"Treaty of Paris ends Seven Years' War and Third Carnatic War","links": {"main": {"title":"French and Indian War","link":"//en.wikipedia.org/wiki/French_and_Indian_War"},"related":[{"title":"Seven Years' War","link":"//en.wikipedia.org/wiki/Seven_Years%27_War"}]},"locations":["North America"],"latlong":[[39.320980, -111.093731]],"tags":["conflict","treaty"]}],"1764":[{"text":"The Spinning Jenny created by James Hargreaves brought on the Industrial Revolution","links": {"main": {"title":"Spinning jenny","link":"//en.wikipedia.org/wiki/Spinning_jenny"},"related":[{"title":"James Hargreaves","link":"//en.wikipedia.org/wiki/James_Hargreaves"},{"title":"Industrial Revolution","link":"//en.wikipedia.org/wiki/Industrial_Revolution"}]},"locations":["Stanhill","Lancashire","United Kingdom"],"latlong":[[51.413522, 0.167676]],"tags":["technology"]}],"1765":[{"text":"James Watt enhances Newcomen's steam engine, allowing new steel technologies","links": {"main": {"title":"Watt steam engine","link":"//en.wikipedia.org/wiki/Watt_steam_engine"},"related":[{"title":"James Watt","link":"//en.wikipedia.org/wiki/James_Watt"},{"title":"Newcomen atmospheric engine","link":"//en.wikipedia.org/wiki/Newcomen_atmospheric_engine"}]},"locations":["Glasgow"],"latlong":[[55.864237, -4.251806]],"tags":["technology"]},{"text":"Stamp Act introduced into the American colonies by the UK Parliament","links": {"main": {"title":"Stamp Act 1765","link":"//en.wikipedia.org/wiki/Stamp_Act_1765"},"related":[{"title":"Thirteen Colonies","link":"//en.wikipedia.org/wiki/Thirteen_Colonies"}]},"locations":["Colonies of British America"],"latlong":[[39.740986, -102.128906]],"tags":["treaty","economy","government"]}],"1766":[{"text":"Anglo-Mysore Wars between the Kingdom of Mysore and the British East India Company begin","links": {"main": {"title":"Anglo-Mysore Wars","link":"//en.wikipedia.org/wiki/Anglo-Mysore_Wars"}},"locations":["India"],"latlong":[[28.613333, 77.208333]],"tags":["conflict"]}],"1767":[{"text":"The Konbaung Dynasty of Burma (now Myanmar) conquers the Ayutthaya kingdom after seven years","links": {"main": {"title":"Konbaung Dynasty","link":"//en.wikipedia.org/wiki/Konbaung_Dynasty"},"related":[{"title":"Naungdawgyi","link":"//en.wikipedia.org/wiki/Naungdawgyi"},{"title":"Ayutthaya Kingdom","link":"//en.wikipedia.org/wiki/Ayutthaya_Kingdom"}]},"locations":["Lopburi"],"latlong":[[14.798056, 100.653611]],"tags":["conflict"]}],"1768":[{"text":"Gurkhas conquered Nepal","links": {"main": {"title":"Gurkha","link":"//en.wikipedia.org/wiki/Gurkha"},"related":[{"title":"Nepal","link":"//en.wikipedia.org/wiki/Nepal"}]},"locations":["Nepal"],"latlong":[[27.7, 85.316667]],"tags":["conflict"]},{"text":"War of the Bar Confederation begins, marking the first serious national military effort to restore Polish independence","links": {"main": {"title":"Bar Confederation","link":"//en.wikipedia.org/wiki/Bar_Confederation"}},"locations":["Russia","Poland"],"latlong":[[49.846389, 19.715]],"tags":["conflict","government"]},{"text":"Russo-Turkish War begins, which upon its resolution in 1774 will prompt the Eastern Question","links": {"main": {"title":"Russo-Turkish War","link":"//en.wikipedia.org/wiki/Russo-Turkish_War_(1768–74)"},"related":[{"title":"Eastern Question","link":"//en.wikipedia.org/wiki/Eastern_Question"}]},"locations":["Eastern Europe","Caucasus"],"latlong":[[43.585181, 45]],"tags":["conflict"]}],"1769":[{"text":"French expeditions capture clove plants in Ambon, ending the Dutch East India Company monopoly of the plant","links": {"main": {"title":"Ambon Island","link":"//en.wikipedia.org/wiki/Ambon_Island"},"related":[{"title":"Clove","link":"//en.wikipedia.org/wiki/Clove"},{"title":"Dutch East India Company","link":"//en.wikipedia.org/wiki/Dutch_East_India_Company"}]},"locations":["Ambon Island"],"latlong":[[-3.638056,128.117222]],"tags":["economy"]},{"text":"Spanish missionaries established the first of 21 missions in California","links": {"main": {"title":"Spanish missions in California","link":"//en.wikipedia.org/wiki/Spanish_missions_in_California"}},"locations":["California"],"latlong":[[36.6,-121.9]],"tags":["religion"]},{"text":"James Cook mapped the boundaries of the Pacific Ocean and discovered many Pacific Islands, as well as mapping New Zealand and Australia","links": {"main": {"title":"James Cook","link":"//en.wikipedia.org/wiki/James_Cook"}},"locations":["Pacific Ocean","New Zealand","Australia"],"latlong":[[-8.783195, -124.508523]],"tags":["exploration"]},{"text":"The British East India company creates the Bengal famine of 1770 killed one third of the Bengal population, by forcing widespread forced cultivation of opium over local food crops","links": {"main": {"title":"Bengal famine of 1770","link":"//en.wikipedia.org/wiki/Bengal_famine_of_1770"},"related":[{"title":"Opium","link":"//en.wikipedia.org/wiki/Opium"},{"title":"East India Company","link":"//en.wikipedia.org/wiki/East_India_Company"}]},"locations":["Bengal"],"latlong":[[24,88]],"tags":["disaster","natural disaster","ecology","economy"]}],"1770":[{"text":"James Cook claims the East Coast of Australia (New South Wales) for Great Britain","links": {"main": {"title":"New South Wales","link":"//en.wikipedia.org/wiki/New_South_Wales"},"related":[{"title":"James Cook","link":"//en.wikipedia.org/wiki/James_Cook"}]},"locations":["New South Wales"],"latlong":[[-32.161667,147.017778]],"tags":["exploration","government"]},{"text":"The Great Famine in Czech lands kills around 500,000, leading to peasant uprisings","links": {"main": {"title":"Famines in Czech lands","link":"//en.wikipedia.org/wiki/Famines_in_Czech_lands"}},"locations":["Czech lands"],"latlong":[[50.083333, 14.466667]],"tags":["natural disaster"]}],"1771":[{"text":"Richard Arkwright and his partners build the world's first water-powered mill at Cromford","links": {"main": {"title":"Cromford Mill","link":"//en.wikipedia.org/wiki/Cromford_Mill"},"related":[{"title":"Richard Arkwright","link":"//en.wikipedia.org/wiki/Richard_Arkwright"}]},"locations":["Cromford","England"],"latlong":[[53.109, -1.556]],"tags":["technology"]},{"text":"The enormous Putuo Zongcheng Temple complex of Chengde, China is completed","links": {"main": {"title":"Putuo Zongcheng Temple","link":"//en.wikipedia.org/wiki/Putuo_Zongcheng_Temple"},"related":[{"title":"Puning Temple","link":"//en.wikipedia.org/wiki/Puning_Temple"},{"title":"Buddhism","link":"//en.wikipedia.org/wiki/Buddhism"}]},"locations":["Chengde","Hebei","China"],"latlong":[[41.0125, 117.928]],"tags":["religion"]},{"text":"The Plague Riot in Moscow","links": {"main": {"title":"Moscow plague riot of 1771","link":"//en.wikipedia.org/wiki/Moscow_plague_riot_of_1771"},"related":[{"title":"Bubonic plague","link":"//en.wikipedia.org/wiki/Bubonic_plague"}]},"locations":["Moscow"],"latlong":[[55.75, 37.616667]],"tags":["natural disaster","internal conflict"]}],"1772":[{"text":"Gustav III of Sweden stages a coup d'état, becoming almost an absolute monarch","links": {"main": {"title":"Gustav III of Sweden","link":"//en.wikipedia.org/wiki/Gustav_III_of_Sweden"}},"locations":["Sweden"],"latlong":[[59.325833, 18.065278]],"tags":["government","internal conflict"]},{"text":"Partitions of Poland marks the end of the Polish–Lithuanian Commonwealth and erase Poland from the map for 123 years","links": {"main": {"title":"Partitions of Poland","link":"//en.wikipedia.org/wiki/Partitions_of_Poland"},"related":[{"title":"Polish–Lithuanian Commonwealth","link":"//en.wikipedia.org/wiki/Polish–Lithuanian_Commonwealth"}]},"locations":["Poland"],"latlong":[[52.216667, 21.033333]],"tags":["government"]},{"text":"Reformer Johann Friedrich Struensee executed in Denmark","links": {"main": {"title":"Johann Friedrich Struensee","link":"//en.wikipedia.org/wiki/Johann_Friedrich_Struensee"}},"locations":["Kastellet","Denmark"],"latlong":[[55.691111, 12.593889]],"tags":["government"]}],"1773":[{"text":"East India Company starts operations in Bengal to smuggle Opium into China","links": {"main": {"title":"First Opium War","link":"//en.wikipedia.org/wiki/First_Opium_War"},"related":[{"title":"East India Company","link":"//en.wikipedia.org/wiki/East_India_Company"}]},"locations":["Bengal"],"latlong":[[24, 88]],"tags":["economy"]},{"text":"Pugachev's Rebellion was the largest peasant revolt in Russia's history","links": {"main": {"title":"Pugachev's Rebellion","link":"//en.wikipedia.org/wiki/Pugachev%27s_Rebellion"},"related":[{"title":"Battle of Kazan (1774)","link":"//en.wikipedia.org/wiki/Battle_of_Kazan_(1774)"}]},"locations":["Russia"],"latlong":[[55.790278, 49.134722]],"tags":["internal conflict"]},{"text":"The Qing Dynasty completes the huge literary compilation Siku Quanshu, the largest collection of books in Chinese history","links": {"main": {"title":"Siku Quanshu","link":"//en.wikipedia.org/wiki/Siku_Quanshu"},"related":[{"title":"Qing dynasty","link":"//en.wikipedia.org/wiki/Qing_dynasty"}]},"locations":["China"],"latlong":[40.007222, 116.2925],"tags":["social"]}],"1774":[{"text":"Joseph Priestley discovers 'dephlogisticated air' Oxygen","links": {"main": {"title":"Oxygen","link":"//en.wikipedia.org/wiki/Oxygen"},"related":[{"title":"Joseph Priestley","link":"//en.wikipedia.org/wiki/Joseph_Priestley"},{"title":"Phlogiston theory","link":"//en.wikipedia.org/wiki/Phlogiston_theory"}]},"locations":["Calne","Wiltshire","England"],"latlong":[[51.4353,-2.00427]],"tags":["science"]}],"1775":[{"text":"Joseph Priestley first synthesis of 'phlogisticated nitrous air' Nitrous Oxide (laughing gas)","links": {"main": {"title":"Nitrous oxide","link":"//en.wikipedia.org/wiki/Nitrous_oxide"},"related":[{"title":"Joseph Priestley","link":"//en.wikipedia.org/wiki/Joseph_Priestley"}]},"locations":["Calne","Wiltshire","England"],"latlong":[[51.4353,-2.00427]],"tags":["science"]},{"text":"First Anglo-Maratha War","links": {"main": {"title":"First Anglo-Maratha War","link":"//en.wikipedia.org/wiki/First_Anglo-Maratha_War"},"related":[{"title":"Maratha Empire","link":"//en.wikipedia.org/wiki/Maratha_Empire"},{"title":"East India Company","link":"//en.wikipedia.org/wiki/East_India_Company"}]},"locations":["India"],"latlong":[[18.96, 72.82]],"tags":["conflict"]},{"text":"American Revolutionary War","links": {"main": {"title":"American Revolutionary War","link":"//en.wikipedia.org/wiki/American_Revolutionary_War"},"related":[{"title":"American Revolution","link":"//en.wikipedia.org/wiki/American_Revolution"}]},"locations":["Thirteen Colonies","Great Britain"],"latlong":[[39.740986, -102.128906]],"tags":["conflict"]}],"1776":[{"text":"Illuminati founded by Adam Weishaupt","links": {"main": {"title":"Illuminati","link":"//en.wikipedia.org/wiki/Illuminati"},"related":[{"title":"Adam Weishaupt","link":"//en.wikipedia.org/wiki/Adam_Weishaupt"}]},"locations":["Ingolstadt","Bavaria"],"latlong":[[48.766667, 11.433333]],"tags":["religion","government"]},{"text":"The Steamboat invented by Claude de Jouffroy","links": {"main": {"title":"Steamboat","link":"//en.wikipedia.org/wiki/Steamboat"},"related":[{"title":"Claude-François-Dorothée, marquis de Jouffroy d'Abbans","link":"//en.wikipedia.org/wiki/Claude-François-Dorothée,_marquis_de_Jouffroy_d%27Abbans"},{"title":"Palmipède","link":"//en.wikipedia.org/wiki/Palmipèdes"}]},"locations":["Doubs river","France"],"latlong":[[47.2431, 6.0219]],"tags":["technology","transport"]},{"text":"The Wealth of Nations, foundation of the modern theory of economy, was published by Adam Smith","links": {"main": {"title":"The Wealth of Nations","link":"//en.wikipedia.org/wiki/The_Wealth_of_Nations"},"related":[{"title":"Adam Smith","link":"//en.wikipedia.org/wiki/Adam_Smith"}]},"locations":["Scotland"],"latlong":[[56.490671, -4.202646]],"tags":["economy"]},{"text":"United States Declaration of Independence adopted by the Continental Congress in Philadelphia","links": {"main": {"title":"United States Declaration of Independence","link":"//en.wikipedia.org/wiki/United_States_Declaration_of_Independence"},"related":[{"title":"Continental Congress","link":"//en.wikipedia.org/wiki/Continental_Congress"}]},"locations":["Philadelphia"],"latlong":[[39.95,-75.166667]],"tags":["government"]},{"text":"The History of the Decline and Fall of the Roman Empire was published by Edward Gibbon, marking the beginnings of modern historiography","links": {"main": {"title":"The History of the Decline and Fall of the Roman Empire","link":"//en.wikipedia.org/wiki/The_History_of_the_Decline_and_Fall_of_the_Roman_Empire"},"related":[{"title":"Edward Gibbon","link":"//en.wikipedia.org/wiki/Edward_Gibbon"}]},"locations":["London","United Kingdom"],"latlong":[[51.517232, -0.150209]],"tags":["history","social"]}],"1778":[{"text":"James Cook becomes first European on the Hawaiian Islands","links": {"main": {"title":"Hawaiian Islands","link":"//en.wikipedia.org/wiki/Hawaiian_Islands"},"related":[{"title":"James Cook","link":"//en.wikipedia.org/wiki/James_Cook"}]},"locations":["Hawaiian Islands"],"latlong":[[21, -157]],"tags":["exploration"]},{"text":"Tây Sơn Dynasty established in Vietnam","links": {"main": {"title":"Tây Sơn dynasty","link":"//en.wikipedia.org/wiki/Tây_Sơn_dynasty"},"related":[{"title":"Vietnam","link":"//en.wikipedia.org/wiki/Vietnam"}]},"locations":["Vietnam"],"latlong":[[21.033333, 105.85]],"tags":["government"]},{"text":"Royal Batavian Society of Arts and Sciences was established by a group of Dutch intellectuals. This institution is the pioneer of scientific efforts in Indonesia and the founder of National Museum of Indonesia","links": {"main": {"title":"Royal Batavian Society of Arts and Sciences","link":"//en.wikipedia.org/wiki/Royal_Batavian_Society_of_Arts_and_Sciences"},"related":[{"title":"National Museum of Indonesia","link":"//en.wikipedia.org/wiki/National_Museum_of_Indonesia"},{"title":"Jacob Cornelis Matthieu Radermacher","link":"//en.wikipedia.org/wiki/Jacob_Cornelis_Matthieu_Radermacher"}]},"locations":["Batavia (now Jakarta)","Indonesia"],"latlong":[[-6.2, 106.816667]],"tags":["art","science"]}],"1779":[{"text":"Amazing Grace published by John Newton","links": {"main": {"title":"Amazing Grace","link":"//en.wikipedia.org/wiki/Amazing_Grace"},"related":[{"title":"John Newton","link":"//en.wikipedia.org/wiki/John_Newton"},{"title":"Olney Hymns","link":"//en.wikipedia.org/wiki/Olney_Hymns"}]},"locations":["Olney","Buckinghamshire","England"],"latlong":[[52.153, -0.7]],"tags":["religion","art"]},{"text":"Photosynthesis was first discovered by Jan Ingenhousz","links": {"main": {"title":"Photosynthesis","link":"//en.wikipedia.org/wiki/Photosynthesis"},"related":[{"title":"Jan Ingenhousz","link":"//en.wikipedia.org/wiki/Jan_Ingenhousz"}]},"locations":["Austria"],"latlong":[[48.2,16.35]],"tags":["science"]},{"text":"Xhosa Wars between British and Boer settlers and the Xhosas in South African Republic","links": {"main": {"title":"Xhosa Wars","link":"//en.wikipedia.org/wiki/Xhosa_Wars"},"related":[{"title":"Boer","link":"//en.wikipedia.org/wiki/Boer"},{"title":"Xhosa people","link":"//en.wikipedia.org/wiki/Xhosa_people"}]},"locations":["South African Republic"],"latlong":[[-25.716667, 28.233333]],"tags":["conflict"]}],"1780":[{"text":"Outbreak of the indigenous rebellion led by Túpac Amaru II in Peru","links": {"main": {"title":"Rebellion of Túpac Amaru II","link":"//en.wikipedia.org/wiki/Rebellion_of_Túpac_Amaru_II"},"related":[{"title":"Túpac Amaru II","link":"//en.wikipedia.org/wiki/Túpac_Amaru_II"}]},"locations":["Viceroyalty of Peru"],"latlong":[[-12.043333, -77.028333]],"tags":["internal conflict"]}],"1781":[{"text":"William Herschel announces discovery of Uranus","links": {"main": {"title":"Uranus","link":"//en.wikipedia.org/wiki/Uranus"},"related":[{"title":"William Herschel","link":"//en.wikipedia.org/wiki/William_Herschel"},{"title":"Johann Elert Bode","link":"//en.wikipedia.org/wiki/Johann_Elert_Bode"}]},"locations":["Bath","Somerset","England"],"latlong":[[51.382471, -2.36643]],"tags":["science","exploration"]},{"text":"Serfdom abolished by Joseph II in the Austrian monarchy (although this returned, it was eventually successfully re-implemented in 1848)","links": {"main": {"title":"Joseph II, Holy Roman Emperor","link":"//en.wikipedia.org/wiki/Joseph_II,_Holy_Roman_Emperor"},"related":[{"title":"Habsburg Monarchy","link":"//en.wikipedia.org/wiki/Habsburg_Monarchy"},{"title":"Serfdom","link":"//en.wikipedia.org/wiki/Serfdom"}]},"locations":["Austria"],"latlong":[[48.2, 16.35]],"tags":["government","equality"]}],"1783":[{"text":"Famine in Iceland caused by the eruption of the Laki volcano","links": {"main": {"title":"Laki","link":"//en.wikipedia.org/wiki/Laki"}},"locations":["LakagÃ­gar","Iceland"],"latlong":[[64.064722, -18.226111]],"tags":["natural disaster"]},{"text":"Russian Empire annexed the Crimean Khanate","links": {"main": {"title":"Crimean Khanate","link":"//en.wikipedia.org/wiki/Crimean_Khanate"},"related":[{"title":"Russian Empire","link":"//en.wikipedia.org/wiki/Russian_Empire"}]},"locations":["Crimea"],"latlong":[[45.029167, 35.088611]],"tags":["conflict"]},{"text":"The Treaty of Paris formally ends the American War of Independence","links": {"main": {"title":"Treaty of Paris","link":"//en.wikipedia.org/wiki/Treaty_of_Paris_(1783)"},"related":[{"title":"American Revolutionary War","link":"//en.wikipedia.org/wiki/American_Revolutionary_War"}]},"locations":["Paris"],"latlong":[[48.8567,2.3508]],"tags":["conflict","treaty","government"]}],"1784":[{"text":"The Argand lamp invented by Aimé Argand","links": {"main": {"title":"Argand lamp","link":"//en.wikipedia.org/wiki/Argand_lamp"},"related":[{"title":"Aimé Argand","link":"//en.wikipedia.org/wiki/Aimé_Argand"}]},"locations":["Paris","France"],"latlong":[[48.8567, 2.3508]],"tags":["technology"]},{"text":"The Bifocals invented by Benjamin Franklin","links": {"main": {"title":"Bifocals","link":"//en.wikipedia.org/wiki/Bifocals"},"related":[{"title":"Benjamin Franklin","link":"//en.wikipedia.org/wiki/Benjamin_Franklin"}]},"locations":["Passy","Paris","France"],"latlong":[[45.923392, 6.684919]],"tags":["technology"]}],"1785":[{"text":"The Automatic flour mill invented by Oliver Evans","links": {"main": {"title":"Oliver Evans","link":"//en.wikipedia.org/wiki/Oliver_Evans"}},"locations":["Newport","Delaware"],"latlong":[[39.713333,-75.608056]],"tags":["technology"]},{"text":"The Power loom invented by Edmund Cartwright","links": {"main": {"title":"Power loom","link":"//en.wikipedia.org/wiki/Power_loom"},"related":[{"title":"Edmund Cartwright","link":"//en.wikipedia.org/wiki/Edmund_Cartwright"}]},"locations":["Lincoln","England"],"latlong":[[53.2327,-0.5376]],"tags":["technology"]},{"text":"Imam Sheikh Mansur, a Chechen warrior and Muslim mystic, led a coalition of Muslim Caucasian tribes from throughout the Caucasus in a holy war against the Russian settlers and and military bases in the Caucasus, as well as against the local traditionalists, who followed the traditional customs and common law (Adat), rather than the theocratic Sharia","links": {"main": {"title":"Sheikh Mansur","link":"//en.wikipedia.org/wiki/Sheikh_Mansur"},"related":[{"title":"Chechens","link":"//en.wikipedia.org/wiki/Chechens"},{"title":"Peoples of the Caucasus","link":"//en.wikipedia.org/wiki/Peoples_of_the_Caucasus"}]},"locations":["Caucasus"],"latlong":[[42.261111, 44.121111]],"tags":["conflict"]},{"text":"Northwest Indian War between the United States and Native Americans","links": {"main": {"title":"Northwest Indian War","link":"//en.wikipedia.org/wiki/Northwest_Indian_War"},"related":[{"title":"Native Americans in the United States","link":"//en.wikipedia.org/wiki/Native_Americans_in_the_United_States"}]},"locations":["Northwest Territory"],"latlong":[[39.416667, -81.45]],"tags":["conflict"]}],"1786":[{"text":"Poems, Chiefly in the Scottish Dialect by Robert Burns published","links": {"main": {"title":"Kilmarnock volume","link":"//en.wikipedia.org/wiki/Kilmarnock_volume"},"related":[{"title":"Robert Burns","link":"//en.wikipedia.org/wiki/Robert_Burns"}]},"locations":["Kilmarnock","Scotland"],"latlong":[[55.61106,-4.49571]],"tags":["art"]},{"text":"The Marriage of Figaro, opera by Mozart","links": {"main": {"title":"The Marriage of Figaro","link":"//en.wikipedia.org/wiki/The_Marriage_of_Figaro"},"related":[{"title":"Wolfgang Amadeus Mozart","link":"//en.wikipedia.org/wiki/Wolfgang_Amadeus_Mozart"}]},"locations":["Vienna"],"latlong":[[48.2, 16.366667]],"tags":["art"]},{"text":"The Threshing machine invented by Andrew Meikle","links": {"main": {"title":"Threshingm achine","link":"//en.wikipedia.org/wiki/Threshing_machine"},"related":[{"title":"Andrew Meikle","link":"//en.wikipedia.org/wiki/Andrew_Meikle"}]},"locations":["Scotland"],"latlong":[[56.490671, -4.202646]],"tags":["technology"]}],"1787":[{"text":"Freed slaves from London founded Freetown in present-day Sierra Leone","links": {"main": {"title":"Freetown","link":"//en.wikipedia.org/wiki/Freetown"},"related":[{"title":"Sierra Leone","link":"//en.wikipedia.org/wiki/Sierra_Leone"}]},"locations":["Freetown"],"latlong":[[8.484444, -13.234444]],"tags":["government"]},{"text":"Jacques Charles' experiments with balloons will lead to the formation of Charles's Law, which is formalised and published in 1802 by Joseph Louis Gay-Lussac","links": {"main": {"title":"Charles's law","link":"//en.wikipedia.org/wiki/Charles%27s_law"},"related":[{"title":"Jacques Charles","link":"//en.wikipedia.org/wiki/Jacques_Charles"},{"title":"Joseph Louis Gay-Lussac","link":"//en.wikipedia.org/wiki/Joseph_Louis_Gay-Lussac"}]},"locations":["France"],"latlong":[[46.227638, 2.213749]],"tags":["science"]},{"text":"Kansei Reforms instituted in Japan by Matsudaira Sadanobu","links": {"main": {"title":"Kansei Reforms","link":"//en.wikipedia.org/wiki/Kansei_Reforms"},"related":[{"title":"Matsudaira Sadanobu","link":"//en.wikipedia.org/wiki/Matsudaira_Sadanobu"}]},"locations":["Tokugawa","Japan"],"latlong":[[35.689444, 139.691667]],"tags":["government"]},{"text":"United States Constitution was written in Philadelphia and submitted to the states for ratification","links": {"main": {"title":"United States Constitution","link":"//en.wikipedia.org/wiki/United_States_Constitution"}},"locations":["Philadelphia"],"latlong":[[39.95, -75.166667]],"tags":["government","treaty"]},{"text":"Russo-Turkish War begins","links": {"main": {"title":"Russo-Turkish War","link":"//en.wikipedia.org/wiki/Russo-Turkish_War_(1787–92)"}},"locations":["Eastern Europe"],"latlong":[[48.439223, 35.062866]],"tags":["conflict"]}],"1788":[{"text":"First European settlement established in Australia at Sydney","links": {"main": {"title":"Sydney","link":"//en.wikipedia.org/wiki/Sydney"}},"locations":["Sydney","Australia"],"latlong":[[-33.865, 151.209444]],"tags":["exploration"]},{"text":"First French Quaker community established in Congénies","links": {"main": {"title":"Quakers","link":"//en.wikipedia.org/wiki/Quakers"},"related":[{"title":"Congénies","link":"//en.wikipedia.org/wiki/Congénies"}]},"locations":["Congénies","France"],"latlong":[[43.7792, 4.1608]],"tags":["religion"]},{"text":"New Hampshire ratifies the United States Constitution as the 9th state, and by the terms of Article VII it is in effect","links": {"main": {"title":"United States Constitution","link":"//en.wikipedia.org/wiki/United_States_Constitution"},"related":[{"title":"New Hampshire","link":"//en.wikipedia.org/wiki/New_Hampshire"}]},"locations":["New Hampshire"],"latlong":[[44, -71.5]],"tags":["government","treaty"]},{"text":"InconfidÃªncia Mineira, conspiracy against the colonial authorities in Brazil","links": {"main": {"title":"InconfidÃªncia Mineira","link":"//en.wikipedia.org/wiki/InconfidÃªncia_Mineira"},"related":[{"title":"Colonial Brazil","link":"//en.wikipedia.org/wiki/Colonial_Brazil"}]},"locations":["Brazil"],"latlong":[[-15.783333, -47.866667]],"tags":["government","internal conflict"]},{"text":"Russo-Swedish War (1788–1790)","links": {"main": {"title":"Russo-Swedish War","link":"//en.wikipedia.org/wiki/Russo-Swedish_War_(1788–90)"}},"locations":["Eastern Finland"],"latlong":[[61.683333, 27.266667]],"tags":["conflict"]}],"1789":[{"text":"Antoine Lavoisier discovers the law of conservation of mass, the basis for chemistry, and begins modern chemistry","links": {"main": {"title":"Conservation of mass","link":"//en.wikipedia.org/wiki/Conservation_of_mass"},"related":[{"title":"Antoine Lavoisier","link":"//en.wikipedia.org/wiki/Antoine_Lavoisier"},{"title":"Traité Élémentaire de Chimie","link":"//en.wikipedia.org/wiki/Traité_Élémentaire_de_Chimie"}]},"locations":["France"],"latlong":[[46.227638, 2.213749]],"tags":["science","education"]},{"text":"George Washington elected President of the United States. Served until 1797","links": {"main": {"title":"George Washington","link":"//en.wikipedia.org/wiki/George_Washington"},"related":[{"title":"Presidency of George Washington","link":"//en.wikipedia.org/wiki/Presidency_of_George_Washington"}]},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["government","person"]},{"text":"Great Britain and Spain dispute the Nootka Sound during the Nootka Crisis","links": {"main": {"title":"Nootka Crisis","link":"//en.wikipedia.org/wiki/Nootka_Crisis"},"related":[{"title":"Nootka Sound","link":"//en.wikipedia.org/wiki/Nootka_Sound"},{"title":"Nootka Convention","link":"//en.wikipedia.org/wiki/Nootka_Convention"}]},"locations":["Nootka Sound","Vancouver Island","British Columbia","Canada"],"latlong":[[49.683333, -126.55]],"tags":["government","treaty"]},{"text":"The Brabant Revolution","links": {"main": {"title":"Brabant Revolution","link":"//en.wikipedia.org/wiki/Brabant_Revolution"}},"locations":["Austrian Netherlands (Belgium)"],"latlong":[[50.85, 4.35]],"tags":["internal conflict"]},{"text":"The Liège Revolution","links": {"main": {"title":"Liège Revolution","link":"//en.wikipedia.org/wiki/Liège_Revolution"}},"locations":["Liège","Austrian Netherlands (Belgium)"],"latlong":[[50.633333, 5.566667]],"tags":["internal conflict"]},{"text":"The French Revolution","links": {"main": {"title":"French Revolution","link":"//en.wikipedia.org/wiki/French_Revolution"}},"locations":["France"],"latlong":[[48.856667,2.350833]],"tags":["internal conflict"]}],"1790":[{"text":"Establishment of the Polish-Prussian Pact","links": {"main": {"title":"Polish–Prussian alliance","link":"//en.wikipedia.org/wiki/Polish–Prussian_alliance"},"related":[{"title":"History of the Polish–Lithuanian Commonwealth (1764–95)","link":"//en.wikipedia.org/wiki/History_of_the_Polish–Lithuanian_Commonwealth_(1764–95)"},{"title":"Treaty of Reichenbach (1790)","link":"//en.wikipedia.org/wiki/Treaty_of_Reichenbach_(1790)"}]},"locations":["Polish-Lithuanian Commonwealth","Kingdom of Prussia"],"latlong":[[52.233333,21.016667]],"tags":["treaty"]},{"text":"United States of Belgium proclaimed following the Brabant Revolution, which is almost immediately surpressed by the re-establishment of Austrian control","links": {"main": {"title":"Brabant Revolution","link":"//en.wikipedia.org/wiki/Brabant_Revolution"},"related":[{"title":"United States of Belgium","link":"//en.wikipedia.org/wiki/United_States_of_Belgium"},{"title":"Treaty of Union (United States of Belgium)","link":"//en.wikipedia.org/wiki/Treaty_of_Union_(United_States_of_Belgium)"}]},"locations":["United States of Belgium"],"latlong":[[50.85,4.35]],"tags":["internal conflict","treaty"]}],"1791":[{"text":"Suppression of the Liège Revolution by Austrian forces and the re-establishment of the Prince-Bishopric of Liège","links": {"main": {"title":"Liège Revolution","link":"//en.wikipedia.org/wiki/Liège_Revolution"},"related":[{"title":"Prince-Bishopric of Liège","link":"//en.wikipedia.org/wiki/Prince-Bishopric_of_Liège"}]},"locations":["Liège","Belgium"],"latlong":[[50.633333,5.566667]],"tags":["internal conflict"]},{"text":"The Constitutional Act creates the two provinces of Upper and Lower Canada in British North America","links": {"main": {"title":"Constitutional Act 1791","link":"//en.wikipedia.org/wiki/Constitutional_Act_1791"},"related":[{"title":"Province of Quebec (1763–91)","link":"//en.wikipedia.org/wiki/Province_of_Quebec_(1763–91)"}]},"locations":["Quebec"],"latlong":[[46.816667, -71.216667]],"tags":["treaty","government"]},{"text":"The Magic Flute, opera by Mozart","links": {"main": {"title":"The Magic Flute","link":"//en.wikipedia.org/wiki/The_Magic_Flute"},"related":[{"title":"Wolfgang Amadeus Mozart","link":"//en.wikipedia.org/wiki/Wolfgang_Amadeus_Mozart"},{"title":"Theater auf der Wieden","link":"//en.wikipedia.org/wiki/Theater_auf_der_Wieden"}]},"locations":["Wieden","Austria"],"latlong":[[48.189444,16.361667]],"tags":["art"]},{"text":"George Vancouver explores the world during the Vancouver Expedition","links": {"main": {"title":"Vancouver Expedition","link":"//en.wikipedia.org/wiki/Vancouver_Expedition"},"related":[{"title":"George Vancouver","link":"//en.wikipedia.org/wiki/George_Vancouver"}]},"locations":[],"latlong":[],"tags":["exploration","government"]},{"text":"The Haitian Revolution slave revolt in Saint-Domingue begins, which will result in the elimination of slavery there and the founding of the Republic of Haiti 13 years later","links": {"main": {"title":"Haitian Revolution","link":"//en.wikipedia.org/wiki/Haitian_Revolution"},"related":[{"title":"French colonial empire","link":"//en.wikipedia.org/wiki/French_colonial_empire"}]},"locations":["Saint-Domingue"],"latlong":[[19.76, -72.2]],"tags":["internal conflict","equality"]}],"1792":[{"text":"King Gustav III of Sweden was assassinated by a conspiracy of noblemen","links": {"main": {"title":"Gustav III of Sweden","link":"//en.wikipedia.org/wiki/Gustav_III_of_Sweden"},"related":[{"title":"Union and Security Act","link":"//en.wikipedia.org/wiki/Union_and_Security_Act"},{"title":"Jacob Johan AnckarstrÃ¶m","link":"//en.wikipedia.org/wiki/Jacob_Johan_AnckarstrÃ¶m"}]},"locations":["Stockholm","Sweden"],"latlong":[[59.329648, 18.070001]],"tags":["person","death","government"]},{"text":"New York Stock & Exchange Board founded","links": {"main": {"title":"New York Stock Exchange","link":"//en.wikipedia.org/wiki/New_York_Stock_Exchange"},"related":[{"title":"Buttonwood Agreement","link":"//en.wikipedia.org/wiki/Buttonwood_Agreement"}]},"locations":["New York"],"latlong":[[40.706833, -74.011028]],"tags":["economy"]},{"text":"Polish–Russian War of 1792","links": {"main": {"title":"Polish–Russian War of 1792","link":"//en.wikipedia.org/wiki/Polish–Russian_War_of_1792"},"related":[{"title":"Constitution of May 3, 1791","link":"//en.wikipedia.org/wiki/Constitution_of_May_3,_1791"}]},"locations":["Polish–Lithuanian_Commonwealth","Targowica_Confederation","Russian_Empire"],"latlong":[[49.9725, 27.631111], [53.453995, 26.469836]],"tags":["conflict"]},{"text":"Vindication of the Rights of Women by Mary Wollstonecraft","links": {"main": {"title":"A Vindication of the Rights of Woman","link":"//en.wikipedia.org/wiki/A_Vindication_of_the_Rights_of_Woman"},"related":[{"title":"Mary Wollstonecraft","link":"//en.wikipedia.org/wiki/Mary_Wollstonecraft"}]},"locations":["Great Britain"],"latlong":[[51.507222, -0.1275]],"tags":["equality"]},{"text":"The French Revolutionary Wars begin, which will lead into the Napoleonic Wars from 1803-1815","links": {"main": {"title":"French Revolutionary Wars","link":"//en.wikipedia.org/wiki/French_Revolutionary_Wars"},"related":[{"title":"Napoleonic Wars","link":"//en.wikipedia.org/wiki/Napoleonic_Wars"}]},"locations":["France"],"latlong":[[49.079444, 4.765556]],"tags":["internal conflict"]}],"1793":[{"text":"The largest yellow fever epidemic in American history killed as many as 5,000 people in Philadelphia","links": {"main": {"title":"Yellow fever epidemic of 1793","link":"//en.wikipedia.org/wiki/Yellow_fever_epidemic_of_1793"},"related":[{"title":"Yellow fever","link":"//en.wikipedia.org/wiki/Yellow_fever"}]},"locations":["Philadelphia","United States of America"],"latlong":[[39.95,-75.166667]],"tags":["natural disaster"]},{"text":"Upper Canada bans slavery","links": {"main": {"title":"Act Against Slavery","link":"//en.wikipedia.org/wiki/Act_Against_Slavery"},"related":[{"title":"John Graves Simcoe","link":"//en.wikipedia.org/wiki/John_Graves_Simcoe"}]},"locations":["Upper_Canada"],"latlong":[[43.255278, -79.071667]],"tags":["equality","government"]},{"text":"Revolt in the Vendée against the French Republic at the time of the Revolution","links": {"main": {"title":"War in the Vendée","link":"//en.wikipedia.org/wiki/War_in_the_Vendée"},"related":[{"title":"French Revolution","link":"//en.wikipedia.org/wiki/French_Revolution"}]},"locations":["Vendée","France"],"latlong":[[46.670556, -1.426667]],"tags":["internal conflict"]}],"1794":[{"text":"Jay's Treaty concluded between Great Britain and the United States, by which the Western outposts in the Great Lakes are returned to the U.S., and commerce between the two countries is","links": {"main": {"title":"Jay Treaty","link":"//en.wikipedia.org/wiki/Jay_Treaty"},"related":[{"title":"Treaty of Paris (1783)","link":"//en.wikipedia.org/wiki/Treaty_of_Paris_(1783)"},{"title":"American Revolutionary War","link":"//en.wikipedia.org/wiki/American_Revolutionary_War"},{"title":"Great Lakes","link":"//en.wikipedia.org/wiki/Great_Lakes"}]},"locations":["London","United Kingdom","United States of America"],"latlong":[[51.507222, -0.1275]],"tags":["government","treaty"]},{"text":"Kościuszko Uprising in the Commonwealth of Poland","links": {"main": {"title":"Kościuszko Uprising","link":"//en.wikipedia.org/wiki/Kościuszko_Uprising"},"related":[{"title":"Kościuszko's proclamation","link":"//en.wikipedia.org/wiki/Kościuszko%27s_proclamation"},{"title":"Second Partition of Poland","link":"//en.wikipedia.org/wiki/Second_Partition_of_Poland"}]},"locations":["Commonwealth of Poland"],"latlong":[[50.310556, 20.228889]],"tags":["internal conflict"]},{"text":"Qajar dynasty founded in Iran after replacing the Zand dynasty","links": {"main": {"title":"Qajar dynasty","link":"//en.wikipedia.org/wiki/Qajar_dynasty"},"related":[{"title":"Mohammad Khan Qajar","link":"//en.wikipedia.org/wiki/Mohammad_Khan_Qajar"},{"title":"Zand dynasty","link":"//en.wikipedia.org/wiki/Zand_dynasty"}]},"locations":["Iran"],"latlong":[[35.696111, 51.423056]],"tags":["government"]}],"1795":[{"text":"Establishment of the French-backed Batavian Republic in present-day Netherlands","links": {"main": {"title":"Batavian Republic","link":"//en.wikipedia.org/wiki/Batavian_Republic"},"related":[{"title":"Dutch Republic","link":"//en.wikipedia.org/wiki/Dutch_Republic"}]},"locations":["Batavian Republic"],"latlong":[[52.316667, 5.55]],"tags":["government"]},{"text":"Kamehameha I of the Island of Hawaii defeats the Oahuans at the Battle of Nu'uanu","links": {"main": {"title":"Battle of Nu'uanu","link":"//en.wikipedia.org/wiki/Battle_of_Nu'uanu"},"related":[{"title":"Kamehameha I","link":"//en.wikipedia.org/wiki/Kamehameha_I"},{"title":"Oahu","link":"//en.wikipedia.org/wiki/Oahu"}]},"locations":["O'ahu","Hawaii"],"latlong":[[21.233, -157.7877]],"tags":["conflict"]},{"text":"Mohammad Khan Qajar razes Tbilisi to the ground","links": {"main": {"title":"Battle of Krtsanisi","link":"//en.wikipedia.org/wiki/Battle_of_Krtsanisi"},"related":[{"title":"Mohammad Khan Qajar","link":"//en.wikipedia.org/wiki/Mohammad_Khan_Qajar"},{"title":"Tbilisi","link":"//en.wikipedia.org/wiki/Tbilisi"}]},"locations":["Tbilisi"],"latlong":[[41.716667, 44.783333]],"tags":["conflict"]},{"text":"Pinckney's Treaty between the United States and Spain granted the Mississippi Territory to the US","links": {"main": {"title":"Pinckney's Treaty","link":"//en.wikipedia.org/wiki/Pinckney%27s_Treaty"},"related":[{"title":"Mississippi Territory","link":"//en.wikipedia.org/wiki/Mississippi_Territory"},{"title":"History of Mississippi","link":"//en.wikipedia.org/wiki/History_of_Mississippi"}]},"locations":["Mississippi_Territory"],"latlong":[[40.593611, -4.142778], [33,-90]],"tags":["government","treaty"]},{"text":"The Marseillaise officially adopted as the French national anthem","links": {"main": {"title":"La Marseillaise","link":"//en.wikipedia.org/wiki/La_Marseillaise"},"related":[{"title":"France","link":"//en.wikipedia.org/wiki/France"}]},"locations":["France"],"latlong":[[47, 2]],"tags":["government"]}],"1796":[{"text":"Battle of Montenotte. Engagement in the War of the First Coalition. Napoleon Bonaparte's first victory as an army commander","links": {"main": {"title":"Battle of Montenotte","link":"//en.wikipedia.org/wiki/Battle_of_Montenotte"},"related":[{"title":"War of the First Coalition","link":"//en.wikipedia.org/wiki/War_of_the_First_Coalition"},{"title":"Napoleon","link":"//en.wikipedia.org/wiki/Napoleon"}]},"locations":["Cairo_Montenotte","Kingdom of Sardinia"],"latlong":[[44.4, 8.2667]],"tags":["conflict"]},{"text":"British forces eject Dutch from Ceylon","links": {"main": {"title":"History of British Ceylon","link":"//en.wikipedia.org/wiki/History_of_British_Ceylon"},"related":[{"title":"Dutch Ceylon","link":"//en.wikipedia.org/wiki/Dutch_Ceylon"},{"title":"Sri Lanka","link":"//en.wikipedia.org/wiki/Sri_Lanka"}]},"locations":["Ceylon (now Sri Lanka)"],"latlong":[[7, 81]],"tags":["conflict"]},{"text":"Edward Jenner administers the first smallpox vaccination. Smallpox killed an estimated 400,000 Europeans each year during the 18th century (including five reigning monarchs).","links": {"main": {"title":"Smallpox vaccine","link":"//en.wikipedia.org/wiki/Smallpox_vaccine"},"related":[{"title":"Edward Jenner","link":"//en.wikipedia.org/wiki/Edward_Jenner"},{"title":"James Phipps","link":"//en.wikipedia.org/wiki/James_Phipps"},{"title":"Smallpox","link":"//en.wikipedia.org/wiki/Smallpox"}]},"locations":["Berkeley","Gloucestershire","England"],"latlong":[[51.691, -2.459]],"tags":["science"]},{"text":"Mungo Park, backed by the African Association, is the first European to set eyes on the Niger River in Africa","links": {"main": {"title":"Mungo Park (explorer)","link":"//en.wikipedia.org/wiki/Mungo_Park_(explorer)"},"related":[{"title":"African Association","link":"//en.wikipedia.org/wiki/African_Association"},{"title":"Niger River","link":"//en.wikipedia.org/wiki/Niger_River"}]},"locations":["Niger_River","Ségou","Mali"],"latlong":[[13.45, -6.266667]],"tags":["exploration"]},{"text":"The White Lotus Rebellion against the Manchu Dynasty in China","links": {"main": {"title":"White Lotus Rebellion","link":"//en.wikipedia.org/wiki/White_Lotus_Rebellion"},"related":[{"title":"Qing dynasty","link":"//en.wikipedia.org/wiki/Qing_dynasty"}]},"locations":["Sichuan province","Hubei province","Shaanxi province"],"latlong":[[30.133333,102.933333]],"tags":["internal conflict"]}],"1797":[{"text":"Napoleon's invasion and partition of the Republic of Venice ended over 1,000 years of independence for the Serene Republic","links": {"main": {"title":"Republic of Venice","link":"//en.wikipedia.org/wiki/Republic_of_Venice"},"related":[{"title":"Napoleon","link":"//en.wikipedia.org/wiki/Napoleon"}]},"locations":["Republic_of_Venice"],"latlong":[[45.583333, 12.683333]],"tags":["conflict","government"]}],"1798":[{"text":"Edward Jenner publishes a treatise about smallpox vaccination","links": {"main": {"title":"Edward Jenner","link":"//en.wikipedia.org/wiki/Edward_Jenner"}},"locations":["Berkeley","Gloucestershire","England"],"latlong":[[51.691, -2.459]],"tags":["science"]},{"text":"The Irish Rebellion failed to overthrow British rule in Ireland","links": {"main": {"title":"Irish Rebellion of 1798","link":"//en.wikipedia.org/wiki/Irish_Rebellion_of_1798"},"related":[{"title":"Society of United Irishmen","link":"//en.wikipedia.org/wiki/Society_of_United_Irishmen"},{"title":"Ireland","link":"//en.wikipedia.org/wiki/Ireland"}]},"locations":["Ireland"],"latlong":[[54.4, -7]],"tags":["internal conflict"]},{"text":"The Lithographic printing process invented by Alois Senefelder","links": {"main": {"title":"Lithography","link":"//en.wikipedia.org/wiki/Lithography"},"related":[{"title":"Alois Senefelder","link":"//en.wikipedia.org/wiki/Alois_Senefelder"}]},"locations":["Munich","Germany"],"latlong":[[48.133333, 11.566667]],"tags":["technology"]},{"text":"Quasi-War between the United States and France","links": {"main": {"title":"Quasi-War","link":"//en.wikipedia.org/wiki/Quasi-War"},"related":[{"title":"Convention of 1800","link":"//en.wikipedia.org/wiki/Convention_of_1800"}]},"locations":["Atlantic Ocean","Caribbean","Indian Ocean","Mediterranean"],"latlong":[],"tags":["conflict"]}],"1799":[{"text":"Dutch East India Company is dissolved","links": {"main": {"title":"Dutch East India Company","link":"//en.wikipedia.org/wiki/Dutch_East_India_Company"}},"locations":["Oost-Indisch Huis","Amsterdam","Netherlands"],"latlong":[[52.370833, 4.898056]],"tags":["economy"]},{"text":"Napoleon staged a coup d'état and became First Consul of France","links": {"main": {"title":"Napoleon","link":"//en.wikipedia.org/wiki/Napoleon"},"related":[{"title":"French Consulate","link":"//en.wikipedia.org/wiki/French_Consulate"},{"title":"Constitution of the Year VIII","link":"//en.wikipedia.org/wiki/Constitution_of_the_Year_VIII"}]},"locations":["France"],"latlong":[[48.8567, 2.3508]],"tags":["government","internal conflict"]},{"text":"Rosetta stone discovered by Napoleon's troops","links": {"main": {"title":"Rosetta Stone","link":"//en.wikipedia.org/wiki/Rosetta_Stone"},"related":[{"title":"Ptolemy V Epiphanes","link":"//en.wikipedia.org/wiki/Ptolemy_V_Epiphanes"}]},"locations":["Fort Julien","Rosetta","Egypt"],"latlong":[[31.458051, 30.376188]],"tags":["history"]},{"text":"The assassination of the 14th Tu'i Kanokupolu, Tuku'aho, plunges Tonga into half a century of civil war","links": {"main": {"title":"Tuku'aho","link":"//en.wikipedia.org/wiki/Tuku%27aho"},"related":[{"title":"Tu'i Kanokupolu","link":"//en.wikipedia.org/wiki/Tu%27i_Kanokupolu"},{"title":"Tonga","link":"//en.wikipedia.org/wiki/Tonga"}]},"locations":["Tonga"],"latlong":[[-21.133333, -175.2]],"tags":["conflict"]},{"text":"Tipu Sultan was killed in a battle with the British forces","links": {"main": {"title":"Tipu Sultan","link":"//en.wikipedia.org/wiki/Tipu_Sultan"},"related":[{"title":"Fourth Anglo-Mysore War","link":"//en.wikipedia.org/wiki/Fourth_Anglo-Mysore_War"}]},"locations":["Srirangapatna","Karnataka","India"],"latlong":[[12.414, 76.704]],"tags":["conflict"]}],"1800":[{"text":"The nationalised Dutch East Indies is established, in the wake of the bankruptcy of the Dutch East India Company (VOC)","links": {"main": {"title":"Dutch East Indies","link":"//en.wikipedia.org/wiki/Dutch_East_Indies"},"related":[{"title":"Dutch East India Company","link":"//en.wikipedia.org/wiki/Dutch_East_India_Company"}]},"locations":["Batavia (now Jakarta)","Dutch East Indies (now Indonesia)"],"latlong":[[-6.2, 106.816667]],"tags":["government"]}],"1801":[{"text":"Giuseppe Piazzi discovers the dwarf planet Ceres","links": {"main": {"title":"Ceres (dwarf planet)","link":"//en.wikipedia.org/wiki/Ceres_(dwarf_planet)"},"related":[{"title":"Dwarf planet","link":"//en.wikipedia.org/wiki/Dwarf_planet"},{"title":"Giuseppe Piazzi","link":"//en.wikipedia.org/wiki/Giuseppe_Piazzi"}]},"locations":["Italy"],"latlong":[[41.9, 12.483333]],"tags":["space","exploration"]},{"text":"Thomas Jefferson elected President of the United States by the House of Representatives, following a tie in the Electoral College","links": {"main": {"title":"Thomas Jefferson","link":"//en.wikipedia.org/wiki/Thomas_Jefferson"},"related":[{"title":"Presidency of Thomas Jefferson","link":"//en.wikipedia.org/wiki/Presidency_of_Thomas_Jefferson"},{"title":"President of the United States","link":"//en.wikipedia.org/wiki/President_of_the_United_States"},{"title":"United States House of Representatives","link":"//en.wikipedia.org/wiki/United_States_House_of_Representatives"},{"title":"Electoral College (United States)","link":"//en.wikipedia.org/wiki/Electoral_College_(United_States)"}]},"locations":["United States of America"],"latlong":[[38.889803, -77.009114]],"tags":["person","government"]},{"text":"The Kingdom of Great Britain and the Kingdom of Ireland merge to form the United Kingdom","links": {"main": {"title":"United Kingdom of Great Britain and Ireland","link":"//en.wikipedia.org/wiki/United_Kingdom_of_Great_Britain_and_Ireland"},"related":[{"title":"Kingdom of Ireland","link":"//en.wikipedia.org/wiki/Kingdom_of_Ireland"},{"title":"Kingdom of Great Britain","link":"//en.wikipedia.org/wiki/Kingdom_of_Great_Britain"}]},"locations":["United Kingdom"],"latlong":[[51.5, -0.116667]],"tags":["government"]},{"text":"Ranjit Singh crowned as King of Punjab","links": {"main": {"title":"Maharaja Ranjit Singh (Punjab)","link":"//en.wikipedia.org/wiki/Maharaja_Ranjit_Singh_(Punjab)"},"related":[{"title":"Sikh Empire","link":"//en.wikipedia.org/wiki/Sikh_Empire"}]},"locations":["Sikh Empire"],"latlong":[[31.549722, 74.343611]],"tags":["government","person"]},{"text":"Napoleon signs the Concordat of 1801 with the Pope","links": {"main": {"title":"Concordat of 1801","link":"//en.wikipedia.org/wiki/Concordat_of_1801"},"related":[{"title":"Napoleon","link":"//en.wikipedia.org/wiki/Napoleon"},{"title":"Pope_Pius_VII","link":"//en.wikipedia.org/wiki/Pope_Pius_VII"}]},"locations":["France"],"latlong":[[48.856667, 2.350833]],"tags":["government","treaty"]},{"text":"Cairo falls to the British","links": {"main": {"title":"Cairo","link":"//en.wikipedia.org/wiki/Cairo"},"related":[]},"locations":["Cairo","Egypt"],"latlong":[[30.05, 31.233333]],"tags":["conflict"]},{"text":"Assassination of Tsar Paul I of Russia","links": {"main": {"title":"Tsar Paul I of Russia","link":"//en.wikipedia.org/wiki/Tsar_Paul_I_of_Russia"},"related":[]},"locations":["Saint Michael's Castle","Saint Petersberg","Russia"],"latlong":[[59.9404, 30.3377]],"tags":["person","death"]},{"text":"British defeat French at the Second Battle of Abukir","links": {"main": {"title":"Battle of Abukir (1801)","link":"//en.wikipedia.org/wiki/Battle_of_Abukir_(1801)"},"related":[]},"locations":["Abu Qir","Egypt"],"latlong":[[31.316667, 30.066667]],"tags":["conflict"]},{"text":"The First Barbary War and the Second Barbary War between the United States and the Barbary States of North Africa","links": {"main": {"title":"First Barbary War","link":"//en.wikipedia.org/wiki/First_Barbary_War"},"related":[{"title":"Second Barbary War","link":"//en.wikipedia.org/wiki/Second_Barbary_War"},{"title":"United States","link":"//en.wikipedia.org/wiki/United_States"},{"title":"Barbary States","link":"//en.wikipedia.org/wiki/Barbary_States"},{"title":"North Africa","link":"//en.wikipedia.org/wiki/North_Africa"}]},"locations":["Mediterranean Sea"],"latlong":[[35, 18]],"tags":["conflict"]}],"1802":[{"text":"Treaty of Amiens between France and the United Kingdom ends the War of the Second Coalition","links": {"main": {"title":"Treaty of Amiens","link":"//en.wikipedia.org/wiki/Treaty_of_Amiens"},"related":[{"title":"War of the Second Coalition","link":"//en.wikipedia.org/wiki/War_of_the_Second_Coalition"}]},"locations":[],"latlong":[[]],"tags":["conflict","treaty"]},{"text":"Ludwig van Beethoven performs his Moonlight Sonata for the first time","links": {"main": {"title":"Piano Sonata No. 14","link":"//en.wikipedia.org/wiki/Piano_Sonata_No._14_(Beethoven)"},"related":[{"title":"Ludwig van Beethoven","link":"//en.wikipedia.org/wiki/Ludwig_van_Beethoven"}]},"locations":["Vienna","Austria"],"latlong":[[48.2, 16.366667]],"tags":["person","art"]}],"1803":[{"text":"William Symington demonstrates his Charlotte Dundas, the 'first practical steamboat'","links": {"main": {"title":"Charlotte Dundas","link":"//en.wikipedia.org/wiki/Charlotte_Dundas"},"related":[{"title":"William Symington","link":"//en.wikipedia.org/wiki/William_Symington"}]},"locations":["Glasgow","Scotland","United Kingdom"],"latlong":[[55.858, -4.259]],"tags":["technology","transport"]},{"text":"The United States more than doubles in size when it buys out France's territorial claims in North America via the Louisiana Purchase. This begins the U.S.'s westward expansion to the Pacific referred to as its Manifest Destiny which involves annexing and conquering land from Mexico, Britain, and Native Americans","links": {"main": {"title":"Louisiana Purchase","link":"//en.wikipedia.org/wiki/Louisiana_Purchase"},"related":[{"title":"Manifest Destiny","link":"//en.wikipedia.org/wiki/Manifest_Destiny"},{"title":"United States territorial acquisitions","link":"//en.wikipedia.org/wiki/United_States_territorial_acquisitions"}]},"locations":["United States of America","France"],"latlong":[[29.95, -90.066667]],"tags":["treaty"]},{"text":"The Wahhabis of the First Saudi State capture Mecca and Medina","links": {"main": {"title":"Wahhabi","link":"//en.wikipedia.org/wiki/Wahhabi"},"related":[{"title":"First Saudi State","link":"//en.wikipedia.org/wiki/First_Saudi_State"},{"title":"Mecca","link":"//en.wikipedia.org/wiki/Mecca"},{"title":"Medina","link":"//en.wikipedia.org/wiki/Medina"}]},"locations":["Mecca","Medina"],"latlong":[[21.416667, 39.816667], [24.466667, 39.6]],"tags":["conflict"]},{"text":"War breaks out between Britain and France; this is considered by some to be the beginning of the Napoleonic Wars","links": {"main": {"title":"Napoleonic Wars","link":"//en.wikipedia.org/wiki/Napoleonic_Wars"},"related":[]},"locations":["First French Empire","United Kingdom"],"latlong":[[48.816667, 2.483333]],"tags":["conflict"]},{"text":"First phase of Padri War","links": {"main": {"title":"Padri War","link":"//en.wikipedia.org/wiki/Padri_War"},"related":[]},"locations":["West Sumatra"],"latlong":[[-1, 100.5]],"tags":["conflict"]}],"1804":[{"text":"Haiti gains independence from France and becomes the first black republic","links": {"main": {"title":"Haitian Revolution","link":"//en.wikipedia.org/wiki/Haitian_Revolution"},"related":[{"title":"Jean-Jacques Dessalines","link":"//en.wikipedia.org/wiki/Jean-Jacques_Dessalines"}]},"locations":["Haiti"],"latlong":[[18.533333, -72.333333]],"tags":["internal conflict","government","equality"]},{"text":"Russo-Persian War","links": {"main": {"title":"Russo-Persian War (1804–1813)","link":"//en.wikipedia.org/wiki/Russo-Persian_War_(1804–1813)"},"related":[]},"locations":["Caucasus"],"latlong":[[42.261111, 44.121111]],"tags":["conflict"]},{"text":"Austrian Empire founded by Francis I","links": {"main": {"title":"Austrian Empire","link":"//en.wikipedia.org/wiki/Austrian_Empire"},"related":[{"title":"Francis II, Holy Roman Emperor","link":"//en.wikipedia.org/wiki/Francis_II,_Holy_Roman_Emperor"}]},"locations":["Austrian Empire"],"latlong":[[48.2, 16.366667]],"tags":["government"]},{"text":"Napoleon crowns himself Emperor of the French","links": {"main": {"title":"Napoleon","link":"//en.wikipedia.org/wiki/Napoleon"},"related":[]},"locations":["France"],"latlong":[[48.8567, 2.3508]],"tags":["government"]},{"text":"World population reaches 1 billion","links": {"main": {"title":"World population","link":"//en.wikipedia.org/wiki/World_population"},"related":[]},"locations":[],"latlong":[[]],"tags":["world population"]},{"text":"First steam locomotive begins operation","links": {"main": {"title":"Steam locomotive","link":"//en.wikipedia.org/wiki/Steam_locomotive"},"related":[{"title":"Richard Trevithick","link":"//en.wikipedia.org/wiki/Richard_Trevithick"}]},"locations":["Penydarren","Abercynon","Wales","United Kingdom"],"latlong":[[51.7581,-3.3705]],"tags":["technology","transport"]},{"text":"Morphine first isolated","links": {"main": {"title":"Morphine","link":"//en.wikipedia.org/wiki/Morphine"},"related":[{"title":"Friedrich SertÃ¼rner","link":"//en.wikipedia.org/wiki/Friedrich_SertÃ¼rner"}]},"locations":["Paderborn","Germany"],"latlong":[[51.716667, 8.766667]],"tags":["science"]},{"text":"Fulani War in Nigeria","links": {"main": {"title":"Fulani War","link":"//en.wikipedia.org/wiki/Fulani_War"},"related":[{"title":"Usman dan Fodio","link":"//en.wikipedia.org/wiki/Usman_dan_Fodio"},{"title":"Nigeria","link":"//en.wikipedia.org/wiki/Nigeria"}]},"locations":["Nigeria","Cameroon"],"latlong":[[9.066667, 7.483333]],"tags":["conflict"]},{"text":"Serbian revolution erupts against the Ottoman rule. Suzerainty of Serbia recognized in 1817","links": {"main": {"title":"Serbian revolution","link":"//en.wikipedia.org/wiki/Serbian_revolution"},"related":[{"title":"Ottoman Empire","link":"//en.wikipedia.org/wiki/Ottoman_Empire"},{"title":"Suzerainty","link":"//en.wikipedia.org/wiki/Suzerainty"}]},"locations":["Balkans"],"latlong":[[44.820556,20.462222]],"tags":["internal conflict"]}],"1805":[{"text":"The Battle of Trafalgar eliminates the French and Spanish naval fleets and allows for British dominance of the seas, a major factor for the success of the British Empire later in the century","links": {"main": {"title":"Battle of Trafalgar","link":"//en.wikipedia.org/wiki/Battle_of_Trafalgar"},"related":[{"title":"War of the Third Coalition","link":"//en.wikipedia.org/wiki/War_of_the_Third_Coalition"}]},"locations":["Cape Trafalgar","Spain"],"latlong":[[36.29299, -6.25534]],"tags":["conflict"]},{"text":"Napoleon decisively defeats an Austrian-Russian army at the Battle of Austerlitz","links": {"main": {"title":"Battle of Austerlitz","link":"//en.wikipedia.org/wiki/Battle_of_Austerlitz"},"related":[{"title":"Napoleon","link":"//en.wikipedia.org/wiki/Napoleon"}]},"locations":["Austerlitz","Moravia","Austrian Empire"],"latlong":[[49.133333, 16.766667]],"tags":["conflict"]},{"text":"Muhammad Ali modernizes Egypt","links": {"main": {"title":"Muhammad Ali of Egypt","link":"//en.wikipedia.org/wiki/Muhammad_Ali_of_Egypt"},"related":[{"title":"Egypt","link":"//en.wikipedia.org/wiki/Egypt"}]},"locations":["Egypt"],"latlong":[[26, 30]],"tags":["government"]}],"1806":[{"text":"Holy Roman Empire dissolved as a consequence of the Treaty of Pressburg","links": {"main": {"title":"Holy Roman Empire","link":"//en.wikipedia.org/wiki/Holy_Roman_Empire"},"related":[{  "title":"Peace of Pressburg (1805)","link":"//en.wikipedia.org/wiki/Peace_of_Pressburg_((1805)"}]},"locations":["Bavaria","Austria","Italy","Germany"],"latlong":[[50.116667, 8.683333]],"tags":["treaty","government"]},{"text":"Cape Colony becomes part of the British Empire","links": {"main": {"title":"Cape Colony","link":"//en.wikipedia.org/wiki/Cape_Colony"},"related":[{"title":"British Empire","link":"//en.wikipedia.org/wiki/British_Empire"}]},"locations":["Cape Colony"],"latlong":[[-33.925278, 18.423889]],"tags":["government"]},{"text":"Russo-Turkish War ends with the Treaty of Bucharest","links": {"main": {"title":"Russo-Turkish War (1806–1812)","link":"//en.wikipedia.org/wiki/Russo-Turkish_War_(1806–1812)"},"related":[{"title":"Treaty of Bucharest (1812)","link":"//en.wikipedia.org/wiki/Treaty_of_Bucharest_(1812)"}]},"locations":["Ottoman Empire","Russian Empire"],"latlong":[[44.4325, 26.103889]],"tags":["conflict","treaty"]}],"1807":[{"text":"Britain declares the Slave Trade illegal","links": {"main": {"title":"Slave Trade Act 1807","link":"//en.wikipedia.org/wiki/Slave_Trade_Act_1807"},"related":[]},"locations":["United Kingdom"],"latlong":[[51.507222, -0.1275]],"tags":["equality"]},{"text":"Potassium and Sodium are individually isolated by Sir Humphry Davy","links": {"main": {"title":"Sir Humphry Davy","link":"//en.wikipedia.org/wiki/Sir_Humphry_Davy"},"related":[{"title":"Potassium","link":"//en.wikipedia.org/wiki/Potassium"},{"title":"Sodium","link":"//en.wikipedia.org/wiki/Sodium"}]},"locations":["London","United Kingdom"],"latlong":[[51.507222, -0.1275]],"tags":["science"]}],"1808":[{"text":"Beethoven performs his Fifth Symphony","links": {"main": {"title":"Beethoven","link":"//en.wikipedia.org/wiki/Beethoven"},"related":[{"title":"Symphony No. 5 (Beethoven)","link":"//en.wikipedia.org/wiki/Symphony_No._5_(Beethoven)"}]},"locations":["Theater an der Wien","Vienna","Austria"],"latlong":[[48.199167,16.363611]],"tags":["person","art"]},{"text":"Russia conquers Finland from Sweden in the Finnish War","links": {"main": {"title":"Finnish War","link":"//en.wikipedia.org/wiki/Finnish_War"},"related":[]},"locations":["Finland"],"latlong":[[60.166667, 24.933333]],"tags":["conflict"]},{"text":"Spanish guerrillas fight in the Peninsular War","links": {"main": {"title":"Peninsular War","link":"//en.wikipedia.org/wiki/Peninsular_War"},"related":[]},"locations":["Iberian Peninsula"],"latlong":[[40, -4]],"tags":["conflict"]},{"text":"Herman Willem Daendels the Governor-general of the Dutch East Indies (1808–1811) begin the construction of Java Great Post Road","links": {"main": {"title":"Great Post Road","link":"//en.wikipedia.org/wiki/Great_Post_Road"},"related":[{"title":"Herman Willem Daendels","link":"//en.wikipedia.org/wiki/Herman_Willem_Daendels"}]},"locations":["Anyer","Panarukan"],"latlong":[[-7.491667, 110.004444]],"tags":["transport"]}],"1809":[{"text":"Napoleon strips the Teutonic Knights of their last holdings in Bad Mergentheim","links": {"main": {"title":"Teutonic Knights","link":"//en.wikipedia.org/wiki/Teutonic_Knights"},"related":[{"title":"Bad Mergentheim","link":"//en.wikipedia.org/wiki/Bad_Mergentheim"},{"title":"Napoleon","link":"//en.wikipedia.org/wiki/Napoleon"}]},"locations":["Bad Mergentheim","Germany"],"latlong":[[49.5, 9.766667]],"tags":["religion"]}],"1810":[{"text":"The University of Berlin was founded. Among its students and faculty are Hegel, Marx, and Bismarck. The German university reform proves to be so successful that its model is copied around the world (see History of European research universities)","links": {"main": {"title":"Humboldt University of Berlin","link":"//en.wikipedia.org/wiki/Humboldt_University_of_Berlin"},"related":[{"title":"Georg Wilhelm Friedrich Hegel","link":"//en.wikipedia.org/wiki/Georg_Wilhelm_Friedrich_Hegel"},{"title":"Karl Marx","link":"//en.wikipedia.org/wiki/Karl_Marx"},{"title":"Otto von Bismarck","link":"//en.wikipedia.org/wiki/Otto_von_Bismarck"},{"title":"Humboldtian model of higher education","link":"//en.wikipedia.org/wiki/Humboldtian_model_of_higher_education"}]},"locations":["Berlin","Germany"],"latlong":[[52.518056, 13.393333]],"tags":[]},{"text":"The Grito de Dolores begins the Mexican War of Independence","links": {"main": {"title":"Mexican War of Independence","link":"//en.wikipedia.org/wiki/Mexican_War_of_Independence"},"related":[{"title":"Grito de Dolores","link":"//en.wikipedia.org/wiki/Grito_de_Dolores"}]},"locations":["Dolores Hidalgo","Guanajuato","Mexico"],"latlong":[[21.17, -100.93]],"tags":["conflict"]},{"text":"Most of the Latin American colonies free themselves from the Spanish and Portuguese Empires after the Latin American wars of independence","links": {"main": {"title":"Latin American wars of independence","link":"//en.wikipedia.org/wiki/Latin_American_wars_of_independence"},"related":[{"title":"Portuguese Empire","link":"//en.wikipedia.org/wiki/Portuguese_Empire"},{"title":"Spanish Empire","link":"//en.wikipedia.org/wiki/Spanish_Empire"}]},"locations":["Latin America"],"latlong":[[-8.783195, -55.491477]],"tags":["conflict"]}],"1812":[{"text":"The French invasion of Russia is a turning point in the Napoleonic Wars","links": {"main": {"title":"French invasion of Russia","link":"//en.wikipedia.org/wiki/French_invasion_of_Russia"},"related":[{"title":"Napoleonic Wars","link":"//en.wikipedia.org/wiki/Napoleonic_Wars"}]},"locations":["Russian Empire"],"latlong":[[59.95, 30.3]],"tags":["conflict"]},{"text":"British Prime Minister Spencer Perceval is assassinated","links": {"main": {"title":"Spencer Perceval","link":"//en.wikipedia.org/wiki/Spencer_Perceval"},"related":[{"title":"John Bellingham","link":"//en.wikipedia.org/wiki/John_Bellingham"}]},"locations":["House of Commons","London","United Kingdom"],"latlong":[[51.499889, -0.124667]],"tags":["person","death"]},{"text":"War of 1812 between the United States and Britain; hence in a draw, except that native Americans lose power","links": {"main": {"title":"War of 1812","link":"//en.wikipedia.org/wiki/War_of_1812"},"related":[]},"locations":["United States of America","United Kingdom"],"latlong":[[]],"tags":["conflict"]}],"1813":[{"text":"Jane Austen publishes Pride and Prejudice","links": {"main": {"title":"Pride and Prejudice","link":"//en.wikipedia.org/wiki/Pride_and_Prejudice"},"related":[{"title":"Jane Austen","link":"//en.wikipedia.org/wiki/Jane_Austen"}]},"locations":["Chawton","Hampshire","England","United Kingdom"],"latlong":[[51.13271, -0.98873]],"tags":["art","person"]}],"1814":[{"text":"Napoleon abdicates and is exiled to Elba","links": {"main": {"title":"Napoleon","link":"//en.wikipedia.org/wiki/Napoleon"},"related":[{"title":"Treaty of Fontainebleau (1814)","link":"//en.wikipedia.org/wiki/Treaty_of_Fontainebleau_(1814)"},{"title":"Elba","link":"//en.wikipedia.org/wiki/Elba"}]},"locations":["Elba","Italy"],"latlong":[[42.761833, 10.240833]],"tags":[]},{"text":"Elisha Collier invents the Flintlock Revolver","links": {"main": {"title":"Elisha Collier","link":"//en.wikipedia.org/wiki/Elisha_Collier"},"related":[{"title":"Flintlock","link":"//en.wikipedia.org/wiki/Flintlock"},{"title":"Revolver","link":"//en.wikipedia.org/wiki/Revolver"}]},"locations":["Boston","Massachusetts","United States of America"],"latlong":[[42.358056, -71.063611]],"tags":["technology"]},{"text":"The contest between the British Empire and Imperial Russia for control of Central Asia is referred to as the Great Game","links": {"main": {"title":"The Great Game","link":"//en.wikipedia.org/wiki/The Great Game"},"related":[{"title":"Imperial Russia","link":"//en.wikipedia.org/wiki/Imperial_Russia"},{"title":"British Empire","link":"//en.wikipedia.org/wiki/British_Empire"}]},"locations":["Central Asia"],"latlong":[[48, 68]],"tags":["conflict"]},{"text":"Anglo-Nepalese War between Nepal (Gurkha Empire) and British Empire","links": {"main": {"title":"Anglo-Nepalese War","link":"//en.wikipedia.org/wiki/Anglo-Nepalese_War"},"related":[{"title":"Nepal","link":"//en.wikipedia.org/wiki/Nepal"},{"title":"British Empire","link":"//en.wikipedia.org/wiki/British_Empire"}]},"locations":["Kingdom of Nepal"],"latlong":[[27.7, 85.333333]],"tags":["conflict"]}],"1815":[{"text":"The Congress of Vienna redraws the European map. Reaction And conservatism dominate all of Europe. The Concert of Europe attempts to preserve this settlement, but the forces of liberalism and nationalism make for dramatic changes. It marks the beginning of a Pax Britannica which lasts until 1914","links": {"main": {"title":"Congress of Vienna","link":"//en.wikipedia.org/wiki/Congress_of_Vienna"},"related":[{"title":"Concert of Europe","link":"//en.wikipedia.org/wiki/Concert_of_Europe"},{"title":"Pax Britannica","link":"//en.wikipedia.org/wiki/Pax_Britannica"}]},"locations":["Vienna","Austria"],"latlong":[[48.208333, 16.373056]],"tags":["government"]},{"text":"Napoleon escapes exile and begins the Hundred Days before finally being defeated at the Battle of Waterloo and exiled to St Helena. His defeat brings a conclusion to the Napoleonic Wars","links": {"main": {"title":"Hundred Days","link":"//en.wikipedia.org/wiki/Hundred_Days"},"related":[{"title":"Battle of Waterloo","link":"//en.wikipedia.org/wiki/Battle_of_Waterloo"},{"title":"St Helena","link":"//en.wikipedia.org/wiki/St_Helena"},{"title":"Napoleonic Wars","link":"//en.wikipedia.org/wiki/Napoleonic_Wars"}]},"locations":["Waterloo","United Kingdom of the Netherlands"],"latlong":[[50.68016, 4.41169]],"tags":["conflict"]},{"text":"Mount Tambora in Sumbawa island erupts, becoming the largest volcanic eruption in recorded history, destroying Tambora culture, and killing at least 71,000 people, including its aftermath. The eruption created global climate anomalies known as 'volcanic winter'","links": {"main": {"title":"Mount Tambora","link":"//en.wikipedia.org/wiki/Mount_Tambora"},"related":[{"title":"Sumbawa","link":"//en.wikipedia.org/wiki/Sumbawa"},{"title":"Tambora culture","link":"//en.wikipedia.org/wiki/Tambora_culture"},{"title":"Volcanic winter","link":"//en.wikipedia.org/wiki/Volcanic_winter"}]},"locations":["Sumbawa","Lesser Sunda Islands","Indonesia"],"latlong":[[-8.246667, 117.958333]],"tags":["natural disaster"]},{"text":"Jane Austen publishes Emma in December","links": {"main": {"title":"Emma (novel)","link":"//en.wikipedia.org/wiki/Emma_(novel)"},"related":[{"title":"Jane Austen","link":"//en.wikipedia.org/wiki/Jane_Austen"}]},"locations":["Chawton","Hampshire","England","United Kingdom"],"latlong":[[51.13271, -0.98873]],"tags":["art","person"]}],"1816":[{"text":"Year Without a Summer. Unusually cold conditions wreak havoc throughout the Northern Hemisphere, likely influenced by the 1815 explosion of Mount Tambora","links": {"main": {"title":"Year Without a Summer","link":"//en.wikipedia.org/wiki/Year_Without_a_Summer"},"related":[{"title":"Mount Tambora","link":"//en.wikipedia.org/wiki/Mount_Tambora"}]},"locations":["Sumbawa","Lesser Sunda Islands","Indonesia"],"latlong":[[-8.246667, 117.958333]],"tags":["natural disaster"]},{"text":"Independence of Argentina","links": {"main": {"title":"Argentina","link":"//en.wikipedia.org/wiki/Argentina"},"related":[]},"locations":["Argentina"],"latlong":[[-34.6,-58.383333]],"tags":["government"]},{"text":"Shaka's Zulu Kingdom becomes the largest in Southern Africa","links": {"main": {"title":"Shaka","link":"//en.wikipedia.org/wiki/Shaka"},"related":[{"title":"Zulu Kingdom","link":"//en.wikipedia.org/wiki/Zulu_Kingdom"},{"title":"Southern Africa","link":"//en.wikipedia.org/wiki/Southern_Africa"}]},"locations":["Zulu Kingdom"],"latlong":[[-28.2975, 31.421667]],"tags":["government"]}],"1817":[{"text":"Principality of Serbia becomes suzerain from the Ottoman Empire. Officially independent in 1867","links": {"main": {"title":"Principality of Serbia","link":"//en.wikipedia.org/wiki/Principality_of_Serbia"},"related":[{"title":"Suzerain","link":"//en.wikipedia.org/wiki/Suzerain"},{"title":"Ottoman Empire","link":"//en.wikipedia.org/wiki/Ottoman_Empire"}]},"locations":["Principality of Serbia"],"latlong":[[44.011111, 20.911111]],"tags":["government"]},{"text":"First Seminole War begins in Florida","links": {"main": {"title":"Seminole War","link":"//en.wikipedia.org/wiki/Seminole_War"},"related":[]},"locations":["Pensacola","Spanish Florida"],"latlong":[[27.32542, -80.8374]],"tags":["conflict"]},{"text":"Russia commences its conquest of the Caucasus","links": {"main": {"title":"Caucasian War","link":"//en.wikipedia.org/wiki/Caucasian_War"},"related":[]},"locations":["Caucasus"],"latlong":[[42.261111, 44.121111]],"tags":["conflict"]},{"text":"Princess Charlotte of Wales dies following childbirth","links": {"main": {"title":"Princess Charlotte of Wales","link":"//en.wikipedia.org/wiki/Princess_Charlotte_of_Wales"},"related":[]},"locations":["Claremont House","Surrey","England","United Kingdom"],"latlong":[[51.359444, -0.368333]],"tags":["person","death"]}],"1818":[{"text":"Mary Shelley publishes Frankenstein","links": {"main": {"title":"Frankenstein","link":"//en.wikipedia.org/wiki/Frankenstein"},"related":[{"title":"Mary Shelley","link":"//en.wikipedia.org/wiki/Mary_Shelley"}]},"locations":["Villa Diodati","Lake Geneva","Switzerland"],"latlong":[[46.220278, 6.183333]],"tags":["art"]},{"text":"Independence of Chile","links": {"main": {"title":"Chilean War of Independence","link":"//en.wikipedia.org/wiki/Chilean_War_of_Independence"},"related":[{"title":"Chilean Declaration of Independence","link":"//en.wikipedia.org/wiki/Chilean_Declaration_of_Independence"}]},"locations":["Chile"],"latlong":[[-33.433333, -70.666667]],"tags":["conflict","government"]}],"1819":[{"text":"John Keats writes his odes of 1819","links": {"main": {"title":"John Keats's 1819 odes","link":"//en.wikipedia.org/wiki/John_Keats%27s_1819_odes"},"related":[{"title":"John Keats","link":"//en.wikipedia.org/wiki/John_Keats"}]},"locations":["London","United Kingdom"],"latlong":[[51.507222, -0.1275]],"tags":["art"]},{"text":"Peterloo massacre in England","links": {"main": {"title":"Peterloo","link":"//en.wikipedia.org/wiki/Peterloo"},"related":[]},"locations":["St Peter's Field","Manchester","England","United Kingdom"],"latlong":[[53.478, -2.247]],"tags":["internal conflict"]},{"text":"The modern city of Singapore is established by the British East India Company","links": {"main": {"title":"Singapore","link":"//en.wikipedia.org/wiki/Singapore"},"related":[{"title":"British East India Company","link":"//en.wikipedia.org/wiki/British_East_India_Company"}]},"locations":["Singapore"],"latlong":[[1.3, 103.8]],"tags":["government"]},{"text":"Théodore Géricault paints his masterpiece The Raft of the Medusa, and exhibits it in the French Salon of 1819 at the Louvre","links": {"main": {"title":"The Raft of the Medusa","link":"//en.wikipedia.org/wiki/Th%C3%The_Raft_of_the_Medusa"},"related":[{"title":"Théodore Géricault","link":"//en.wikipedia.org/wiki/Th%C3%A9odore_G%C3%A9ricault"},{"title":"The Louvre","link":"//en.wikipedia.org/wiki/The_Louvre"}]},"locations":["Faubourg du Roule","Paris","France"],"latlong":[[48.874722, 2.302222]],"tags":["art"]}],"1820":[{"text":"Missouri Compromise regulates slavery in the country's western territories by prohibiting the practice in the former Louisiana Territory north of the parallel 36Â°30â€² north","links": {"main": {"title":"Missouri Compromise","link":"//en.wikipedia.org/wiki/Missouri_Compromise"},"related":[{"title":"Slavery in the United_States","link":"//en.wikipedia.org/wiki/Slavery_in_the_United_States"}]},"locations":["United States of America"],"latlong":[[37.090240, -95.712891]],"tags":["equality","government"]},{"text":"Regency period ends in the United Kingdom","links": {"main": {"title":"Regency period","link":"//en.wikipedia.org/wiki/Regency_period"},"related":[]},"locations":["United Kingdom"],"latlong":[[51.5, -0.116667]],"tags":["government"]},{"text":"Discovery of Antarctica","links": {"main": {"title":"Antarctica","link":"//en.wikipedia.org/wiki/Antarctica"},"related":[]},"locations":["Antarctica"],"latlong":[[-90, 0]],"tags":["exploration"]},{"text":"Liberia founded by the American Colonization Society for freed American slaves","links": {"main": {"title":"History of Liberia","link":"//en.wikipedia.org/wiki/History_of_Liberia"},"related":[{"title":"American Colonization Society","link":"//en.wikipedia.org/wiki/American_Colonization_Society"}]},"locations":["Liberia"],"latlong":[[6.316667, -10.8]],"tags":["government","equality"]},{"text":"Dissolution of the Maratha Empire","links": {"main": {"title":"Maratha Empire","link":"//en.wikipedia.org/wiki/Maratha_Empire"},"related":[]},"locations":["Maratha Empire","India"],"latlong":[[18.96, 72.82]],"tags":["government"]}],"1821":[{"text":"Napoleon Bonaparte dies in exile on the island of Saint Helena","links": {"main": {"title":"Napoleon Bonaparte","link":"//en.wikipedia.org/wiki/Napoleon_Bonaparte"},"related":[{"title":"Saint Helena","link":"//en.wikipedia.org/wiki/Saint_Helena"}]},"locations":["Saint Helena"],"latlong":[[-15.95, -5.716667]],"tags":["person","death"]},{"text":"Mexico gains independence from Spain with the Treaty of CÃ³rdoba","links": {"main": {"title":"Mexico","link":"//en.wikipedia.org/wiki/Mexico"},"related":[{"title":"Treaty of CÃ³rdoba","link":"//en.wikipedia.org/wiki/Treaty_of_C%C3%B3rdoba"}]},"locations":["Mexico"],"latlong":[[19.433333, -99.133333]],"tags":["treaty"]},{"text":"Peru declares its independence from Spain","links": {"main": {"title":"Peru","link":"//en.wikipedia.org/wiki/Peru"},"related":[{"title":"Peruvian War of Independence","link":"//en.wikipedia.org/wiki/Peruvian_War_of_Independence"}]},"locations":["Peru"],"latlong":[[-12.043333, -77.028333]],"tags":["conflict","government"]},{"text":"Navarino Massacre following the outbreak of the Greek War of Independence","links": {"main": {"title":"Navarino Massacre","link":"//en.wikipedia.org/wiki/Navarino_Massacre"},"related":[]},"locations":["Navarino (now Pylos)","Greece"],"latlong":[[36.916667, 21.7]],"tags":["conflict"]},{"text":"Greece becomes the first country to break away from the Ottoman Empire after the Greek War of Independence","links": {"main": {"title":"Greece","link":"//en.wikipedia.org/wiki/Greece"},"related":[{"title":"Ottoman Empire","link":"//en.wikipedia.org/wiki/Ottoman_Empire"},{"title":"Greek War of Independence","link":"//en.wikipedia.org/wiki/Greek_War_of_Independence"}]},"locations":["Greece"],"latlong":[[37.966667, 23.716667]],"tags":["conflict"]}],"1822":[{"text":"First Mexican Empire, as Mexico's first post-independent government, ruled by Emperor AgustÃ­n I of Mexico","links": {"main": {"title":"First Mexican Empire","link":"//en.wikipedia.org/wiki/First_Mexican_Empire"},"related":[{"title":"AgustÃ­n de Iturbide","link":"//en.wikipedia.org/wiki/Agust%C3%ADn_de_Iturbide"}]},"locations":["Mexico"],"latlong":[[19.433333, -99.133333]],"tags":["government","person"]},{"text":"Prince Pedro of Brazil proclaimed the Brazilian independence on 7 September. On 1 December, he was crowned as Emperor Dom Pedro I of Brazil","links": {"main": {"title":"Pedro I of Brazil","link":"//en.wikipedia.org/wiki/Pedro_I_of_Brazil"},"related":[{"title":"Brazil","link":"//en.wikipedia.org/wiki/Brazil"},{"title":"Brazilian independence","link":"//en.wikipedia.org/wiki/Brazilian_independence"},{"title":"Dom (title)","link":"//en.wikipedia.org/wiki/Dom_(title)"},{"title":"Pedro I of Brazil","link":"//en.wikipedia.org/wiki/Pedro_I_of_Brazil"}]},"locations":["Brazil"],"latlong":[[-15.783333, -47.866667]],"tags":["conflict","government"]}],"1823":[{"text":"The British Empire annexed Burma (now also called Myanmar) after three Anglo-Burmese Wars","links": {"main": {"title":"Myanmar","link":"//en.wikipedia.org/wiki/Myanmar"},"related":[{"title":"Anglo-Burmese Wars","link":"//en.wikipedia.org/wiki/Anglo-Burmese_Wars"}]},"locations":["Burma (now Myanmar)"],"latlong":[[22, 96]],"tags":["conflict"]},{"text":"Monroe Doctrine declared by US President James Monroe","links": {"main": {"title":"Monroe Doctrine","link":"//en.wikipedia.org/wiki/Monroe_Doctrine"},"related":[{"title":"James Monroe","link":"//en.wikipedia.org/wiki/James_Monroe"}]},"locations":["Latin America"],"latlong":[[-8.783195, -55.491477]],"tags":["government"]}],"1824":[{"text":"Premiere of Beethoven's Ninth Symphony","links": {"main": {"title":"Symphony No. 9 (Beethoven)","link":"//en.wikipedia.org/wiki/Symphony_No._9_(Beethoven)"},"related":[{"title":"Ludwig van Beethoven","link":"//en.wikipedia.org/wiki/Ludwig_van_Beethoven"}]},"locations":["Theater am KÃ¤rntnertor","Vienna","Austria"],"latlong":[[48.203333, 16.370833]],"tags":["person"]},{"text":"Cadbury is established in Birmingham","links": {"main": {"title":"Cadbury","link":"//en.wikipedia.org/wiki/Cadbury"},"related":[]},"locations":["Birmingham","England","United Kingdom"],"latlong":[[52.483056, -1.893611]],"tags":["social"]}],"1825":[{"text":"Erie Canal opened connecting the Great Lakes to the Atlantic Ocean","links": {"main": {"title":"Erie Canal","link":"//en.wikipedia.org/wiki/Erie_Canal"},"related":[{"title":"Great Lakes","link":"//en.wikipedia.org/wiki/Great_Lakes"},{"title":"Atlantic Ocean","link":"//en.wikipedia.org/wiki/Atlantic_Ocean"}]},"locations":["New York","United States of America"],"latlong":[[42.943403, -74.291469]],"tags":["technology","transport"]},{"text":"First isolation of aluminum","links": {"main": {"title":"Aluminum","link":"//en.wikipedia.org/wiki/Aluminum"},"related":[{"title":"Hans Christian Ã˜rsted","link":"//en.wikipedia.org/wiki/Hans_Christian_Ã˜rsted"}]},"locations":["Copenhagen","Denmark"],"latlong":[[55.676111, 12.568333]],"tags":["science"]},{"text":"Independence of Bolivia","links": {"main": {"title":"Bolivian War of Independence","link":"//en.wikipedia.org/wiki/Bolivian_War_of_Independence"},"related":[{"title":"Bolivia","link":"//en.wikipedia.org/wiki/Bolivia"}]},"locations":["Bolivia"],"latlong":[[-17.8, -63.166667]],"tags":["government"]},{"text":"The Stockton and Darlington Railway, the first public railway in the world, is opened","links": {"main": {"title":"Stockton and Darlington Railway","link":"//en.wikipedia.org/wiki/Stockton_and_Darlington_Railway"},"related":[]},"locations":["Stockton-on-Tees","Darlington","England","United Kingdom"],"latlong":[[54.57, -1.32]],"tags":["technology","transport"]},{"text":"The Decembrist revolt","links": {"main": {"title":"Decembrist revolt","link":"//en.wikipedia.org/wiki/Decembrist_revolt"},"related":[]},"locations":["Saint Petersburg","Russian Empire"],"latlong":[[59.95, 30.3]],"tags":["internal conflict"]},{"text":"The Cisplatine War results in the independence of Uruguay","links": {"main": {"title":"Cisplatine War","link":"//en.wikipedia.org/wiki/Cisplatine_War"},"related":[{"title":"Uruguay","link":"//en.wikipedia.org/wiki/Uruguay"}]},"locations":["Uruguay"],"latlong":[[-34.883333, -56.166667]],"tags":["conflict"]},{"text":"Java War. (to 1830)","links": {"main": {"title":"Java War","link":"//en.wikipedia.org/wiki/Java_War"},"related":[]},"locations":["Java"],"latlong":[[-7.491667, 110.004444]],"tags":["conflict"]}],"1826":[{"text":"Samuel Morey patents the internal combustion engine","links": {"main": {"title":"Samuel Morey","link":"//en.wikipedia.org/wiki/Samuel_Morey"},"related":[{"title":"Internal combustion engine","link":"//en.wikipedia.org/wiki/Internal_combustion_engine"}]},"locations":["United States of America"],"latlong":[[37.090240, -95.712891]],"tags":["technology"]},{"text":"After the final Russo-Persian War, the Persian Empire took back territory lost to Russia from the previous war","links": {"main": {"title":"Russo-Persian War (1826–1828)","link":"//en.wikipedia.org/wiki/Russo-Persian_War_(1826–1828)"},"related":[{"title":"Qajar dynasty","link":"//en.wikipedia.org/wiki/Qajar_dynasty"}]},"locations":["Caucasus"],"latlong":[[42.261111, 44.121111]],"tags":["conflict"]}],"1827":[{"text":"Death of William Blake","links": {"main": {"title":"William Blake","link":"//en.wikipedia.org/wiki/William_Blake"},"related":[]},"locations":["Strand","London","United Kingdom"],"latlong":[[51.5114, -0.119]],"tags":["person","death"]},{"text":"Death of Ludwig van Beethoven","links": {"main": {"title":"Ludwig van Beethoven","link":"//en.wikipedia.org/wiki/Ludwig_van_Beethoven"},"related":[]},"locations":["Vienna","Austria"],"latlong":[[48.2, 16.366667]],"tags":["person","death"]}],"1828":[{"text":"Black War in Tasmania leads to the near extinction of the Tasmanian aborigines","links": {"main": {"title":"Black War","link":"//en.wikipedia.org/wiki/Black_War"},"related":[{"title":"Tasmania","link":"//en.wikipedia.org/wiki/Tasmania"},{"title":"Tasmanian aborigines","link":"//en.wikipedia.org/wiki/Tasmanian_aborigines"}]},"locations":["Tasmania"],"latlong":[[-42, 147]],"tags":["conflict"]}],"1829":[{"text":"Johann Wolfgang von Goethe's Faust premieres","links": {"main": {"title":"Johann Wolfgang von Goethe","link":"//en.wikipedia.org/wiki/Johann_Wolfgang_von_Goethe"},"related":[{"title":"Faust","link":"//en.wikipedia.org/wiki/Faust"}]},"locations":["Braunschweig","Germany"],"latlong":[[52.266667, 10.516667]],"tags":["art"]},{"text":"First electric motor built by Ãnyos Jedlik","links": {"main": {"title":"Electric motor","link":"//en.wikipedia.org/wiki/Electric_motor"},"related":[{"title":"Ãnyos Jedlik","link":"//en.wikipedia.org/wiki/Ãnyos_Jedlik"}]},"locations":["Kingdom of Hungary"],"latlong":[[47.466667, 19.05]],"tags":["technology"]},{"text":"Sir Robert Peel founds the Metropolitan Police Service, the first modern police force","links": {"main": {"title":"Sir Robert Peel","link":"//en.wikipedia.org/wiki/Sir_Robert_Peel"},"related":[{"title":"Metropolitan Police Service","link":"//en.wikipedia.org/wiki/Metropolitan_Police_Service"}]},"locations":["Greater London","United Kingdom"],"latlong":[[51.5, -0.083333]],"tags":["crime","social"]}],"1830":[{"text":"The Church of Jesus Christ of Latter Day Saints is established on 6 April 1830","links": {"main": {"title":"Church of Christ (Latter Day Saints)","link":"//en.wikipedia.org/wiki/Church_of_Christ_(Latter_Day_Saints)"},"related":[]},"locations":["New York","United States of America"],"latlong":[[43, -75]],"tags":["religion"]},{"text":"July Revolution in France","links": {"main": {"title":"July Revolution","link":"//en.wikipedia.org/wiki/July_Revolution"},"related":[{"title":"France","link":"//en.wikipedia.org/wiki/France"}]},"locations":["France"],"latlong":[[48.856667, 2.350833]],"tags":["internal conflict"]},{"text":"The Belgian Revolution in the United Kingdom of the Netherlands led to the creation of Belgium","links": {"main": {"title":"Belgian Revolution","link":"//en.wikipedia.org/wiki/Belgian_Revolution"},"related":[{"title":"United Kingdom of the Netherlands","link":"//en.wikipedia.org/wiki/United_Kingdom_of_the_Netherlands"}]},"locations":["Belgium"],"latlong":[[50.85, 4.35]],"tags":["internal conflict"]},{"text":"Greater Colombia dissolved and the nations of Colombia (including modern-day Panama), Ecuador, and Venezuela took its place","links": {"main": {"title":"Gran Colombia","link":"//en.wikipedia.org/wiki/Gran_Colombia"},"related":[{"title":"Colombia","link":"//en.wikipedia.org/wiki/Colombia"},{"title":"Ecuador","link":"//en.wikipedia.org/wiki/Ecuador"},{"title":"Venezuela","link":"//en.wikipedia.org/wiki/Venezuela"}]},"locations":["Colombia","Ecuador","Venezuela"],"latlong":[[4.583333,-74.066667], [-0.15,-78.35], [10.5,-66.966667]],"tags":["government"]},{"text":"November Uprising in Poland against Russia","links": {"main": {"title":"November Uprising","link":"//en.wikipedia.org/wiki/November_Uprising"},"related":[{"title":"Poland","link":"//en.wikipedia.org/wiki/Poland"},{"title":"Russia","link":"//en.wikipedia.org/wiki/Russia"}]},"locations":["Poland"],"latlong":[[52.216667, 21.033333]],"tags":["internal conflict"]},{"text":"End of the Java war. The whole area of Yogyakarta and Surakarta Manca nagara Dutch seized. 27 September, Klaten Agreement determines a fixed boundary between Surakarta and Yogyakarta and permanently divide the kingdom of Mataram was signed by Sasradiningrat, Pepatih Dalem Surakarta, and Danurejo, Pepatih Dalem Yogyakarta. Mataram is a de facto and de yure controlled by the Dutch East Indies","links": {"main": {"title":"Java war","link":"//en.wikipedia.org/wiki/Java_war"},"related":[]},"locations":["Java"],"latlong":[[-7.491667, 110.004444]],"tags":["conflict"]}],"1831":[{"text":"France invades and occupies Algeria","links": {"main": {"title":"French Algeria","link":"//en.wikipedia.org/wiki/French_Algeria"},"related":[]},"locations":["Algeria"],"latlong":[[28, 2]],"tags":["conflict"]},{"text":"The Belgian constitution is ratified and Leopold I is crowned as first 'King of the Belgians'","links": {"main": {"title":"Constitution of Belgium","link":"//en.wikipedia.org/wiki/Constitution_of_Belgium"},"related":[{"title":"Leopold I of Belgium","link":"//en.wikipedia.org/wiki/Leopold_I_of_Belgium"}]},"locations":["Belgium"],"latlong":[[50.85, 4.35]],"tags":["government"]},{"text":"Great Bosnian uprising against Ottoman rule occurs","links": {"main": {"title":"Great Bosnian uprising","link":"//en.wikipedia.org/wiki/Great_Bosnian_uprising"},"related":[]},"locations":["Bosnia Eyalet"],"latlong":[[44.233333, 17.666667]],"tags":["internal conflict"]},{"text":"Charles Darwin's journey on the HMS Beagle","links": {"main": {"title":"Second voyage of HMS Beagle","link":"//en.wikipedia.org/wiki/Second_voyage_of_HMS_Beagle"},"related":[{"title":"Charles Darwin","link":"//en.wikipedia.org/wiki/Charles_Darwin"},{"title":"HMS Beagle","link":"//en.wikipedia.org/wiki/HMS_Beagle"}]},"locations":[],"latlong":[[]],"tags":["exploration","science"]},{"text":"November Uprising ends with crushing defeat for Poland in the Battle of Warsaw","links": {"main": {"title":"Battle of Warsaw (1831)","link":"//en.wikipedia.org/wiki/Battle_of_Warsaw_(1831)"},"related":[]},"locations":["Poland"],"latlong":[[52.216667, 21.033333]],"tags":["internal conflict"]},{"text":"Egyptian–Ottoman War","links": {"main": {"title":"Egyptian–Ottoman War (1831–1833)","link":"//en.wikipedia.org/wiki/Egyptian–Ottoman_War_(1831–1833)"},"related":[]},"locations":["Syria","Adana"],"latlong":[[33.5, 36.3]],"tags":["conflict"]},{"text":"Second phase of Padri War. (to 1838)","links": {"main": {"title":"Padri War","link":"//en.wikipedia.org/wiki/Padri_War"},"related":[]},"locations":["West Sumatra"],"latlong":[[-1, 100.5]],"tags":["conflict"]}],"1832":[{"text":"The British Parliament passes the Great Reform Act","links": {"main": {"title":"Great Reform Act","link":"//en.wikipedia.org/wiki/Great_Reform_Act"},"related":[]},"locations":["United Kingdom"],"latlong":[["51.499889, -0.124667"]],"tags":["equality","government"]}],"1833":[{"text":"Slavery Abolition Act bans slavery throughout the British Empire","links": {"main": {"title":"Slavery Abolition Act","link":"//en.wikipedia.org/wiki/Slavery_Abolition_Act"},"related":[{"title":"British Empire","link":"//en.wikipedia.org/wiki/British_Empire"}]},"locations":["United Kingdom"],"latlong":[["51.499889, -0.124667"]],"tags":["equality","government"]},{"text":"Carlist Wars in Spain","links": {"main": {"title":"Carlist Wars","link":"//en.wikipedia.org/wiki/Carlist_Wars"},"related":[{"title":"Spain","link":"//en.wikipedia.org/wiki/Spain"}]},"locations":["Spain"],"latlong":[[42.8445, -2.760333]],"tags":["conflict"]}],"1834":[{"text":"The German Customs Union, or Zollverein is formed","links": {"main": {"title":"Zollverein","link":"//en.wikipedia.org/wiki/Zollverein"},"related":[]},"locations":["Zollverein"],"latlong":[[49.016667, 8.4]],"tags":["government","economy"]},{"text":"Spanish Inquisition officially ends","links": {"main": {"title":"Spanish Inquisition","link":"//en.wikipedia.org/wiki/Spanish_Inquisition"},"related":[]},"locations":["Spain"],"latlong":[[40.463667, -3.74922]],"tags":["religion","internal conflict"]},{"text":"Britain amends the Poor Law demanding that any paupers requesting assistance must go to a workhouse","links": {"main": {"title":"Poor relief","link":"//en.wikipedia.org/wiki/Poor_relief"},"related":[{"title":"Poor Law Amendment Act 1834","link":"//en.wikipedia.org/wiki/Poor_Law_Amendment_Act_1834"}]},"locations":["United Kingdom"],"latlong":[["51.499889, -0.124667"]],"tags":["equality","government"]},{"text":"Imam Shamil's rebellion in Russian-occupied Caucasus","links": {"main": {"title":"Imam Shamil","link":"//en.wikipedia.org/wiki/Imam_Shamil"},"related":[{"title":"Caucasus","link":"//en.wikipedia.org/wiki/Caucasus"}]},"locations":["Caucasus"],"latlong":[[42.261111, 44.121111]],"tags":["internal conflict"]}],"1835":[{"text":"The Texas Revolution in Mexico resulted in the short-lived Republic of Texas","links": {"main": {"title":"Texas Revolution","link":"//en.wikipedia.org/wiki/Texas_Revolution"},"related":[{"title":"Republic of Texas","link":"//en.wikipedia.org/wiki/Republic_of_Texas"}]},"locations":["Mexican Texas","United States of America"],"latlong":[[30.323986, -96.153542]],"tags":["internal conflict"]}],"1836":[{"text":"Battle of the Alamo ends with defeat for Texan separatists","links": {"main": {"title":"Battle of the Alamo","link":"//en.wikipedia.org/wiki/Battle_of_the_Alamo"},"related":[]},"locations":["San Antonio","Mexican Texas","United States of America"],"latlong":[[29.416667, -98.5]],"tags":["internal conflict"]},{"text":"Battle of San Jacinto leads to the capture of General Santa Anna","links": {"main": {"title":"Battle of San Jacinto","link":"//en.wikipedia.org/wiki/Battle_of_San_Jacinto"},"related":[{"title":"General Santa Anna","link":"//en.wikipedia.org/wiki/General_Santa_Anna"}]},"locations":["Deer Park","Texas","United States of America"],"latlong":[[29.691944,-95.118056]],"tags":["conflict"]},{"text":"Samuel Colt popularizes the revolver and sets up a firearms company to manufacture his invention of the Colt Paterson revolver a six bullets firearm shot one by one without reloading manually","links": {"main": {"title":"Samuel Colt","link":"//en.wikipedia.org/wiki/Samuel_Colt"},"related":[{"title":"Revolver","link":"//en.wikipedia.org/wiki/Revolver"},{"title":"Colt Paterson","link":"//en.wikipedia.org/wiki/Colt_Paterson"}]},"locations":["New Jersey","United States of America"],"latlong":[[40, -74.5]],"tags":["technology"]}],"1837":[{"text":"Telegraphy patented","links": {"main": {"title":"Telegraphy","link":"//en.wikipedia.org/wiki/Telegraphy"},"related":[]},"locations":["United Kingdom"],"latlong":[["51.499889, -0.124667"]],"tags":["technology"]},{"text":"Charles Dickens publishes Oliver Twist","links": {"main": {"title":"Charles Dickens","link":"//en.wikipedia.org/wiki/Charles_Dickens"},"related":[]},"locations":["United Kingdom"],"latlong":[["51.499889, -0.124667"]],"tags":["art"]},{"text":"Death of Alexander Pushkin","links": {"main": {"title":"Alexander Pushkin","link":"//en.wikipedia.org/wiki/Alexander_Pushkin"},"related":[]},"locations":["St Petersburg","Russian Empire"],"latlong":[[59.95, 30.3]],"tags":["person","death"]},{"text":"Rebellions of 1837 in Canada","links": {"main": {"title":"Rebellions of 1837","link":"//en.wikipedia.org/wiki/Rebellions_of_1837"},"related":[{"title":"Canada","link":"//en.wikipedia.org/wiki/Canada"}]},"locations":["Province of Canada"],"latlong":[[44.233333, -76.5]],"tags":["government","internal conflict"]},{"text":"Queen Victoria's reign is considered the apex of the British Empire and is referred to as the Victorian era","links": {"main": {"title":"Queen Victoria","link":"//en.wikipedia.org/wiki/Queen_Victoria"},"related":[{"title":"British Empire","link":"//en.wikipedia.org/wiki/British_Empire"},{"title":"Victorian era","link":"//en.wikipedia.org/wiki/Victorian_era"}]},"locations":["United Kingdom"],"latlong":[["51.499889, -0.124667"]],"tags":["government"]}],"1838":[{"text":"By this time, 46,000 Native Americans have been forcibly relocated in the Trail of Tears","links": {"main": {"title":"Trail of Tears","link":"//en.wikipedia.org/wiki/Trail_of_Tears"},"related":[]},"locations":["Indian Territory","United States of America"],"latlong":[[35.482222, -97.535]],"tags":["government"]},{"text":"Civil war in the Federal Republic of Central America led to the foundings of Guatemala, El Salvador, Honduras, Nicaragua, and Costa Rica","links": {"main": {"title":"Federal Republic of Central America","link":"//en.wikipedia.org/wiki/Federal_Republic_of_Central_America"},"related":[{"title":"Guatemala","link":"//en.wikipedia.org/wiki/Guatemala"},{"title":"El Salvador","link":"//en.wikipedia.org/wiki/El_Salvador"},{"title":"Honduras","link":"//en.wikipedia.org/wiki/Honduras"},{"title":"Nicaragua","link":"//en.wikipedia.org/wiki/Nicaragua"},{"title":"Costa Rica","link":"//en.wikipedia.org/wiki/Costa_Rica"}]},"locations":["Guatemala","El Salvador","Honduras","Nicaragua","Costa Rica"],"latlong":[[14.633333, -90.5], [13.666667, -89.166667], [14.1, -87.216667], [12.15, -86.266667], [9.933333, -84.083333]],"tags":["internal conflict"]}],"1839":[{"text":"Kingdom of Belgium declared","links": {"main": {"title":"Kingdom of Belgium","link":"//en.wikipedia.org/wiki/Kingdom_of_Belgium"},"related":[]},"locations":["Belgium"],"latlong":[[50.85, 4.35]],"tags":["government"]},{"text":"Uruguayan Civil War","links": {"main": {"title":"Uruguayan Civil War","link":"//en.wikipedia.org/wiki/Uruguayan_Civil_War"},"related":[]},"locations":["Uruguay"],"latlong":[[-34.883333, -56.166667]],"tags":["internal conflict"]},{"text":"The First Opium War, which will lead to a second and the eventual decline of the Qing dynasty","links": {"main": {"title":"First Opium War","link":"//en.wikipedia.org/wiki/First_Opium_War"},"related":[{"title":"Second Opium War","link":"//en.wikipedia.org/wiki/Second_Opium_War"},{"title":"Treaty ports","link":"//en.wikipedia.org/wiki/Treaty_ports"},{"title":"Qing dynasty","link":"//en.wikipedia.org/wiki/Qing_dynasty"}]},"locations":["China"],"latlong":[[23.133333, 113.266667]],"tags":["conflict"]},{"text":"First Anglo-Afghan War, which will lead to stalemate and the establishment of the Durand line","links": {"main": {"title":"First Anglo-Afghan War","link":"//en.wikipedia.org/wiki/First_Anglo-Afghan_War"},"related":[{"title":"Durand line","link":"//en.wikipedia.org/wiki/Durand_line"}]},"locations":["Afghanistan","Pakistan"],"latlong":[[31.704803, 68.181152]],"tags":["conflict"]}],"1840":[{"text":"New Zealand is founded, as the Treaty of Waitangi is signed by the MÄori and British","links": {"main": {"title":"New Zealand","link":"//en.wikipedia.org/wiki/New_Zealand"},"related":[{"title":"Treaty of Waitangi","link":"//en.wikipedia.org/wiki/Treaty_of_Waitangi"},{"title":"MÄori people","link":"//en.wikipedia.org/wiki/M%C4%81ori_people"}]},"locations":["New Zealand"],"latlong":[[-41.283333, 174.45]],"tags":["treaty"]},{"text":"Upper and Lower Canada are merged into the Province of Canada","links": {"main": {"title":"Upper Canada","link":"//en.wikipedia.org/wiki/Upper_Canada"},"related":[{"title":"Lower Canada","link":"//en.wikipedia.org/wiki/Lower_Canada"}]},"locations":["Province of Canada"],"latlong":[[44.233333, -76.5]],"tags":["government"]}],"1841":[{"text":"The word 'dinosaur' is coined by Richard Owen","links": {"main": {"title":"Dinosaur","link":"//en.wikipedia.org/wiki/Dinosaur"},"related":[{"title":"Richard Owen","link":"//en.wikipedia.org/wiki/Richard_Owen"}]},"locations":["England","United Kingdom"],"latlong":[["51.499889, -0.124667"]],"tags":["science"]}],"1842":[{"text":"Treaty of Nanking cedes Hong Kong to the British","links": {"main": {"title":"Treaty of Nanking","link":"//en.wikipedia.org/wiki/Treaty_of_Nanking"},"related":[{"title":"Hong Kong","link":"//en.wikipedia.org/wiki/Hong_Kong"}]},"locations":["Hong Kong"],"latlong":[[22.3, 114.2]],"tags":["treaty"]},{"text":"Anaesthesia used for the first time","links": {"main": {"title":"Anaesthesia","link":"//en.wikipedia.org/wiki/Anaesthesia"},"related":[]},"locations":["The University of Vermont College of Medicine","Burlington","Vermont","United States of America"],"latlong":[[44.47807,-73.19519]],"tags":["science","technology"]}],"1843":[{"text":"The first wagon train sets out from Missouri","links": {"main": {"title":"Wagon train","link":"//en.wikipedia.org/wiki/Wagon_train"},"related":[]},"locations":["Independence","Missouri","United States of America"],"latlong":[[39.079722, -94.406667]],"tags":["transport"]},{"text":"A Christmas Carol published","links": {"main": {"title":"A Christmas Carol","link":"//en.wikipedia.org/wiki/A_Christmas_Carol"},"related":[{"title":"Charles Dickens","link":"//en.wikipedia.org/wiki/Charles_Dickens"}]},"locations":["United Kingdom"],"latlong":[["51.499889, -0.124667"]],"tags":["art"]},{"text":"The Tell-Tale Heart published","links": {"main": {"title":"The Tell-Tale Heart","link":"//en.wikipedia.org/wiki/The_Tell-Tale_Heart"},"related":[{"title":"Edgar Allan Poe","link":"//en.wikipedia.org/wiki/Edgar_Allan_Poe"}]},"locations":["New York","United States of America"],"latlong":[[43, -75]],"tags":["art"]}],"1844":[{"text":"Persian Prophet the Báb announces his revelation on 23 May, founding Bábísm. He announced to the world of the coming of 'He whom God shall make manifest'. He is considered the forerunner of Bahá'u'lláh, the founder of the Bahá'í Faith","links": {"main": {"title":"Báb","link":"//en.wikipedia.org/wiki/B%C3%A1b"},"related":[{"title":"Bábís","link":"//en.wikipedia.org/wiki/B%C3%A1b%C3%ADs"},{"title":"He whom God shall make manifest","link":"//en.wikipedia.org/wiki/He_whom_God_shall_make_manifest"},{"title":"Bahá'u'lláh","link":"//en.wikipedia.org/wiki/Bah%C3%A1%27u%27ll%C3%A1h"},{"title":"Bahá'í Faith","link":"//en.wikipedia.org/wiki/Bah%C3%A1%27%C3%AD_Faith"}]},"locations":["Baghdad"],"latlong":[[33.333333, 44.433333]],"tags":["religion"]},{"text":"First publicly funded telegraph line in the world, between Baltimore and Washington, sends a demonstration message on 24 May, ushering in the age of the telegraph. This message read 'What hath God wrought?' (Bible, Numbers 23:23)","links": {"main": {"title":"Telegraph","link":"//en.wikipedia.org/wiki/Telegraph"},"related":[{"title":"Baltimore-Washington telegraph line","link":"//en.wikipedia.org/wiki/Baltimore-Washington_telegraph_line"}]},"locations":["Baltimore","Washington","United States of America"],"latlong":[[38.904722, -77.016389], [39.283333, -76.616667]],"tags":[]},{"text":"Millerite movement awaits the Second Advent of Jesus Christ on 22 October. Christ's non-appearance becomes known as the Great Disappointment","links": {"main": {"title":"Millerites","link":"//en.wikipedia.org/wiki/Millerites"},"related":[{"title":"Second Advent","link":"//en.wikipedia.org/wiki/Second_Advent"},{"title":"Jesus Christ","link":"//en.wikipedia.org/wiki/Jesus_Christ"},{"title":"Great Disappointment","link":"//en.wikipedia.org/wiki/Great_Disappointment"}]},"locations":["New York","United States of America"],"latlong":[[43, -75]],"tags":["religion"]},{"text":"The great auk is rendered extinct","links": {"main": {"title":"Great auk","link":"//en.wikipedia.org/wiki/Great_auk"},"related":[]},"locations":["Atlantic Ocean"],"latlong":[[0, -30]],"tags":["ecology"]},{"text":"Dominican War of Independence from Haiti","links": {"main": {"title":"Dominican War of Independence","link":"//en.wikipedia.org/wiki/Dominican_War_of_Independence"},"related":[{"title":"Haiti","link":"//en.wikipedia.org/wiki/Haiti"}]},"locations":["Dominican Republic"],"latlong":[[19, -70.666667]],"tags":["conflict"]},{"text":"Heinrich Heine coins the term 'Lisztomania' in regards to the public's frenzied reaction to the pianist Franz Liszt","links": {"main": {"title":"Heinrich Heine","link":"//en.wikipedia.org/wiki/Heinrich_Heine"},"related":[{"title":"Lisztomania (phenomenon)","link":"//en.wikipedia.org/wiki/Lisztomania_(phenomenon)"},{"title":"Franz Liszt","link":"//en.wikipedia.org/wiki/Franz_Liszt"}]},"locations":["Berlin","Germany"],"latlong":[[52.520007, 13.404954]],"tags":["art"]}],"1845":[{"text":"Unification of the Kingdom of Tonga under TÄufa'Ähau (King George Tupou I)","links": {"main": {"title":"Tonga","link":"//en.wikipedia.org/wiki/Tonga"},"related":[{"title":"George Tupou I of Tonga","link":"//en.wikipedia.org/wiki/George_Tupou_I_of_Tonga"}]},"locations":["Tonga"],"latlong":[[-21.133333, -175.2]],"tags":["government"]},{"text":"Lunacy Act 1845 passes through Parliament","links": {"main": {"title":"Lunacy Act 1845","link":"//en.wikipedia.org/wiki/Lunacy_Act_1845"},"related":[]},"locations":["United Kingdom"],"latlong":[["51.499889, -0.124667"]],"tags":["government","equality"]},{"text":"First Anglo-Sikh War","links": {"main": {"title":"First Anglo-Sikh War","link":"//en.wikipedia.org/wiki/First_Anglo-Sikh_War"},"related":[]},"locations":["Punjab","Pakistan"],"latlong":[[31,74]],"tags":["conflict"]},{"text":"The New Zealand Land Wars","links": {"main": {"title":"New Zealand Land Wars","link":"//en.wikipedia.org/wiki/New_Zealand_Land_Wars"},"related":[]},"locations":["New Zealand"],"latlong":[[-41.283333, 174.45]],"tags":["conflict"]},{"text":"The Irish Potato Famine leads to the Irish diaspora","links": {"main": {"title":"Irish Potato Famine (1845–1849)","link":"//en.wikipedia.org/wiki/Irish_Potato_Famine_(1845–1849)"},"related":[{"title":"Irish diaspora","link":"//en.wikipedia.org/wiki/Irish_diaspora"}]},"locations":["Ireland"],"latlong":[[53.412910, -8.24389]],"tags":["natural disaster"]}],"1846":[{"text":"The Mexican-American War leads to Mexico's cession of much of the modern-day Southwestern United States","links": {"main": {"title":"Mexican-American War","link":"//en.wikipedia.org/wiki/Mexican-American_War"},"related":[{"title":"Southwestern United States","link":"//en.wikipedia.org/wiki/Southwestern_United_States"}]},"locations":["Southwestern United States","United States of America"],"latlong":[[37, -111.2]],"tags":["conflict"]},{"text":"Mormon migration to Utah","links": {"main": {"title":"History of the Latter Day Saint movement","link":"//en.wikipedia.org/wiki/History_of_the_Latter_Day_Saint_movement"},"related":[{"title":"Utah","link":"//en.wikipedia.org/wiki/Utah"}]},"locations":["Utah"],"latlong":[[39, -111]],"tags":["religion"]}],"1847":[{"text":"The Brontë sisters publish Jane Eyre, Wuthering Heights and Agnes Grey","links": {"main": {"title":"Brontë sisters","link":"//en.wikipedia.org/wiki/Bront%C3%AB_sisters"},"related":[]},"locations":["Haworth","Yorkshire","United Kingdom"],"latlong":[[53.83, -1.96]],"tags":["art"]},{"text":"The Caste War of Yucatán","links": {"main": {"title":"Caste War of Yucatán","link":"//en.wikipedia.org/wiki/Caste_War_of_Yucat%C3%A1n"},"related":[]},"locations":["Yucatán Peninsula","Mexico"],"latlong":[[18.845, -89.125556]],"tags":["conflict"]}],"1848":[{"text":"Second Anglo-Sikh War","links": {"main": {"title":"Second Anglo-Sikh War","link":"//en.wikipedia.org/wiki/Second_Anglo-Sikh_War"},"related":[]},"locations":["Punjab","Pakistan"],"latlong":[[31, 74]],"tags":["conflict"]},{"text":"The Communist Manifesto published","links": {"main": {"title":"The Communist Manifesto","link":"//en.wikipedia.org/wiki/The_Communist_Manifesto"},"related":[]},"locations":["London","United Kingdom"],"latlong":[[51.507351, -0.127758]],"tags":["government","social"]},{"text":"Revolutions of 1848 in Europe","links": {"main": {"title":"Revolutions of 1848","link":"//en.wikipedia.org/wiki/Revolutions_of_1848"},"related":[]},"locations":["Europe"],"latlong":[],"tags":["internal conflict"]},{"text":"Seneca Falls Convention is the first women's rights convention in the United States and leads to the battle for women's suffrage","links": {"main": {"title":"Seneca Falls Convention","link":"//en.wikipedia.org/wiki/Seneca_Falls_Convention"},"related":[{"title":"Women's rights","link":"//en.wikipedia.org/wiki/Women%27s_rights"},{"title":"History of Women's Suffrage in the United States","link":"//en.wikipedia.org/wiki/History_of_Women%27s_Suffrage_in_the_United_States"}]},"locations":["Seneca Falls","New York","United States of America"],"latlong":[[42.908611, -76.798056]],"tags":["equality"]},{"text":"California Gold Rush","links": {"main": {"title":"California Gold Rush","link":"//en.wikipedia.org/wiki/California_Gold_Rush"},"related":[]},"locations":["California","United States of America"],"latlong":[[38.8025,-120.894722]],"tags":["economy","social"]},{"text":"William Holman Hunt, John Everett Millais and Dante Gabriel Rossetti found the Pre-Raphaelite Brotherhood","links": {"main": {"title":"William Holman Hunt","link":"//en.wikipedia.org/wiki/William_Holman_Hunt"},"related":[{"title":"John Everett Millais","link":"//en.wikipedia.org/wiki/John_Everett_Millais"},{"title":"Dante Gabriel Rossetti","link":"//en.wikipedia.org/wiki/Dante_Gabriel_Rossetti"},{"title":"Pre-Raphaelite Brotherhood","link":"//en.wikipedia.org/wiki/Pre-Raphaelite_Brotherhood"}]},"locations":["London","United Kingdom"],"latlong":[[51.5224, -0.1326]],"tags":["art"]}],"1849":[{"text":"Roman Republic's constitutional law becomes the first to abolish capital punishment","links": {"main": {"title":"Roman Republic (19th century)","link":"//en.wikipedia.org/wiki/Roman_Republic_(19th_century)"},"related":[{"title":"Constitutional law","link":"//en.wikipedia.org/wiki/Constitutional_law"},{"title":"Capital punishment","link":"//en.wikipedia.org/wiki/Capital_punishment"}]},"locations":["Roman Republic"],"latlong":[[41.9, 12.5]],"tags":["government","crime"]},{"text":"The safety pin is invented","links": {"main": {"title":"Safety pin","link":"//en.wikipedia.org/wiki/Safety_pin"},"related":[{"title":"Walter Hunt (inventor)","link":"//en.wikipedia.org/wiki/Walter_Hunt_(inventor)"}]},"locations":["Martinsburg","New York","United States of America"],"latlong":[[43.7375,-75.469722]],"tags":["technology"]},{"text":"The gas mask is invented","links": {"main": {"title":"Gas mask","link":"//en.wikipedia.org/wiki/Gas_mask"},"related":[]},"locations":["Louisville","Kentucky","United States of America"],"latlong":[[38.25, -85.766667]],"tags":["technology"]},{"text":"Earliest recorded air raid, as Austria employs 200 balloons to deliver ordnance against Venice","links": {"main": {"title":"Airstrike","link":"//en.wikipedia.org/wiki/Airstrike"},"related":[{"title":"The Austrian balloons","link":"//en.wikipedia.org/wiki/The_Austrian_balloons"},{"title":"Venice","link":"//en.wikipedia.org/wiki/Venice"}]},"locations":["Venice","Italy"],"latlong":[[45.4375,12.335833]],"tags":["conflict","technology"]}],"1850":[{"text":"The Little Ice Age ends around this time","links": {"main": {"title":"Little Ice Age","link":"//en.wikipedia.org/wiki/Little_Ice_Age"},"related":[]},"locations":[],"latlong":[],"tags":[]},{"text":"Alfred Tennyson is appointed Poet Laureate after the death of William Wordsworth","links": {"main": {"title":"Alfred Tennyson","link":"//en.wikipedia.org/wiki/Alfred_Tennyson"},"related":[{"title":"Poet Laureate","link":"//en.wikipedia.org/wiki/Poet_Laureate"},{"title":"William Wordsworth","link":"//en.wikipedia.org/wiki/William_Wordsworth"}]},"locations":["United Kingdom"],"latlong":[[51.5224, -0.1326]],"tags":["art"]},{"text":"Taiping Rebellion is the bloodiest conflict of the century, leading to the deaths of 20 million people","links": {"main": {"title":"Taiping Rebellion","link":"//en.wikipedia.org/wiki/Taiping_Rebellion"},"related":[]},"locations":["South China"],"latlong":[[23.6, 108.3]],"tags":["internal conflict"]}],"1851":[{"text":"The Great Exhibition in London was the world's first international Expo or World Fair","links": {"main": {"title":"Great Exhibition","link":"//en.wikipedia.org/wiki/Great_Exhibition"},"related":[{"title":"Expo (exhibition)","link":"//en.wikipedia.org/wiki/Expo_(exhibition)"}]},"locations":["London","United Kingdom"],"latlong":[[51.5224, -0.1326]],"tags":["technology","art"]},{"text":"Louis Napoleon assumes power in France in a coup","links": {"main": {"title":"Louis Napoleon","link":"//en.wikipedia.org/wiki/Louis_Napoleon"},"related":[]},"locations":["Paris","France"],"latlong":[[48.8567, 2.3508]],"tags":["internal conflict"]},{"text":"The Platine War ends and the Empire of Brazil has the hegemony over South America","links": {"main": {"title":"Platine War","link":"//en.wikipedia.org/wiki/Platine_War"},"related":[{"title":"Empire of Brazil","link":"//en.wikipedia.org/wiki/Empire_of_Brazil"}]},"locations":["Uruguay"],"latlong":[[-32.522779, -55.765835]],"tags":["conflict"]},{"text":"Victorian gold rush in Australia","links": {"main": {"title":"Victorian gold rush","link":"//en.wikipedia.org/wiki/Victorian_gold_rush"},"related":[]},"locations":["Victoria","Australia"],"latlong":[[-37, 144]],"tags":["economy"]},{"text":"Herman Melville publishes Moby-Dick","links": {"main": {"title":"Herman Melville","link":"//en.wikipedia.org/wiki/Herman_Melville"},"related":[{"title":"Moby-Dick","link":"//en.wikipedia.org/wiki/Moby-Dick"}]},"locations":["Pittsfield","Massachusetts","United States of America"],"latlong":[[42.45, -73.25]],"tags":["art"]}],"1852":[{"text":"Frederick Douglass delivers his speech 'The Meaning of July Fourth for the Negro' in Rochester, New York","links": {"main": {"title":"Frederick Douglass","link":"//en.wikipedia.org/wiki/Frederick_Douglass"},"related":[{"title":"Rochester, New York","link":"//en.wikipedia.org/wiki/Rochester,_New_York"}]},"locations":["Rochester","New York","United States of America"],"latlong":[[43.165556, -77.611389]],"tags":["equality"]}],"1853":[{"text":"United States Commodore Matthew C. Perry threatens the Japanese capital Edo with gunships, demanding that they agree to open trade","links": {"main": {"title":"United States","link":"//en.wikipedia.org/wiki/United_States"},"related":[{"title":"Commodore (United States)","link":"//en.wikipedia.org/wiki/Commodore_(United_States)"},{"title":"Matthew C. Perry","link":"//en.wikipedia.org/wiki/Matthew_C._Perry"},{"title":"Edo","link":"//en.wikipedia.org/wiki/Edo"}]},"locations":["Edo","Japan"],"latlong":[[35.689444, 139.691667]],"tags":["conflict"]},{"text":"Crimean War between France, the United Kingdom, the Ottoman Empire and Russia","links": {"main": {"title":"Crimean War","link":"//en.wikipedia.org/wiki/Crimean_War"},"related":[{"title":"Ottoman Empire","link":"//en.wikipedia.org/wiki/Ottoman_Empire"}]},"locations":["Crimea"],"latlong":[[45.3, 34.4]],"tags":["conflict"]}],"1854":[{"text":"Battle of Balaclava and the Charge of the Light Brigade","links": {"main": {"title":"Battle of Balaclava","link":"//en.wikipedia.org/wiki/Battle_of_Balaclava"},"related":[{"title":"Charge of the Light Brigade","link":"//en.wikipedia.org/wiki/Charge_of_the_Light_Brigade"}]},"locations":["Balaclava","Crimea"],"latlong":[[44.5, 33.6]],"tags":["conflict"]},{"text":"The Convention of Kanagawa formally ends Japan's policy of isolation","links": {"main": {"title":"Convention of Kanagawa","link":"//en.wikipedia.org/wiki/Convention_of_Kanagawa"},"related":[{"title":"Sakoku","link":"//en.wikipedia.org/wiki/Sakoku"}]},"locations":["Yokohama","Japan"],"latlong":[[35.444167, 139.638056]],"tags":["economy","conflict","treaty"]},{"text":"The steamship SS Arctic collides with the SS Vesta and sinks off the coast of Newfoundland","links": {"main": {"title":"SS Arctic disaster","link":"//en.wikipedia.org/wiki/SS_Arctic_disaster"},"related":[{"title":"SS Arctic","link":"//en.wikipedia.org/wiki/SS_Arctic"},{"title":"SS Vesta","link":"//en.wikipedia.org/wiki/SS_Vesta"}]},"locations":["Newfoundland","Canada"],"latlong":[[46.75, -52.1]],"tags":[]},{"text":"Siege of Sevastapol; city falls to French and British forces","links": {"main": {"title":"Siege of Sevastopol (1854–1855)","link":"//en.wikipedia.org/wiki/Siege_of_Sevastopol_(1854–1855)"},"related":[]},"locations":["Sevastopol","Russian Empire"],"latlong":[[44.6, 33.5333]],"tags":["conflict"]}],"1855":[{"text":"Bessemer process enables steel to be mass-produced","links": {"main": {"title":"Bessemer process","link":"//en.wikipedia.org/wiki/Bessemer_process"},"related":[{"title":"Steel","link":"//en.wikipedia.org/wiki/Steel"}]},"locations":["Sheffield","England","United Kingdom"],"latlong":[[53.383611, -1.466944]],"tags":["technology"]},{"text":"Walt Whitman publishes the first edition of Leaves of Grass","links": {"main": {"title":"Walt Whitman","link":"//en.wikipedia.org/wiki/Walt_Whitman"},"related":[]},"locations":["New York","United States of America"],"latlong":[[40.712784, -74.005941]],"tags":["art"]},{"text":"Cocaine is isolated by Friedrich Gaedcke","links": {"main": {"title":"Cocaine","link":"//en.wikipedia.org/wiki/Cocaine"},"related":[{"title":"Friedrich Gaedcke","link":"//en.wikipedia.org/wiki/Friedrich_Gaedcke"}]},"locations":["Rostock","Germany"],"latlong":[[54.083333, 12.133333]],"tags":["science"]}],"1856":[{"text":"Rana dynasty of Nepal established by Jung Bahadur Rana","links": {"main": {"title":"Rana dynasty","link":"//en.wikipedia.org/wiki/Rana_dynasty"},"related":[{"title":"Nepal","link":"//en.wikipedia.org/wiki/Nepal"},{"title":"Jung Bahadur Rana","link":"//en.wikipedia.org/wiki/Jung_Bahadur_Rana"}]},"locations":["Nepal"],"latlong":[[26.533333,86.733333]],"tags":["government"]},{"text":"World's first oil refinery in Romania","links": {"main": {"title":"Oil refinery","link":"//en.wikipedia.org/wiki/Oil_refinery"},"related":[{"title":"Romania","link":"//en.wikipedia.org/wiki/Romania"}]},"locations":["PloieÈ™ti","Romania"],"latlong":[[44.933333,26.033333]],"tags":["technology"]},{"text":"Neanderthal man first identified. Age still unknown","links": {"main": {"title":"Neanderthal man","link":"//en.wikipedia.org/wiki/Neanderthal_man"},"related":[]},"locations":["Neander Valley","DÃ¼sseldorf","Germany"],"latlong":[[51.225124, 6.948801]],"tags":["science","history"]}],"1857":[{"text":"Sir Joseph Whitworth designs the first long-range sniper rifle","links": {"main": {"title":"Joseph Whitworth","link":"//en.wikipedia.org/wiki/Joseph_Whitworth"},"related":[{"title":"Whitworth rifle","link":"//en.wikipedia.org/wiki/Whitworth_rifle"},{"title":"Sniper rifle","link":"//en.wikipedia.org/wiki/Sniper_rifle"}]},"locations":["Fallowfield","Manchester","England","United Kingdom"],"latlong":[[53.443611, -2.213333]],"tags":["technology"]},{"text":"Indian Rebellion of 1857. The British Empire assumes control of India from the East India Company","links": {"main": {"title":"Indian Rebellion of 1857","link":"//en.wikipedia.org/wiki/Indian_Rebellion_of_1857"},"related":[{"title":"East India Company","link":"//en.wikipedia.org/wiki/East_India_Company"}]},"locations":["India"],"latlong":[[28.61, 77.23]],"tags":["conflict"]}],"1858":[{"text":"Invention of the phonautograph, the first true device for recording sound","links": {"main": {"title":"Phonautograph","link":"//en.wikipedia.org/wiki/Phonautograph"},"related":[{"title":"Recorded sound","link":"//en.wikipedia.org/wiki/Recorded_sound"}]},"locations":["Paris","France"],"latlong":[[48.856614, 2.352222]],"tags":["technology"]},{"text":"Construction of Big Ben is completed","links": {"main": {"title":"Big Ben","link":"//en.wikipedia.org/wiki/Big_Ben"},"related":[]},"locations":["Palace of Westminster","London","United Kingdom"],"latlong":[[51.500756, -0.124661]],"tags":["technology"]}],"1859":[{"text":"Charles Darwin publishes On the Origin of Species","links": {"main": {"title":"Charles Darwin","link":"//en.wikipedia.org/wiki/Charles_Darwin"},"related":[]},"locations":["London","United Kingdom"],"latlong":[[51.507351, -0.127758]],"tags":["ecology","science"]},{"text":"Suez Canal is constructed","links": {"main": {"title":"Suez Canal","link":"//en.wikipedia.org/wiki/Suez_Canal"},"related":[]},"locations":["Egypt"],"latlong":[[30.705, 32.344167]],"tags":["technology","transport"]}],"1860":[{"text":"Giuseppe Garibaldi launches the Expedition of the Thousand","links": {"main": {"title":"Giuseppe Garibaldi","link":"//en.wikipedia.org/wiki/Giuseppe_Garibaldi"},"related":[{"title":"Expedition of the Thousand","link":"//en.wikipedia.org/wiki/Expedition_of_the_Thousand"}]},"locations":["Sicily","Southern Italy"],"latlong":[[37.5, 14]],"tags":["conflict"]},{"text":"The Pony Express started","links": {"main": {"title":"The Pony Express","link":"//en.wikipedia.org/wiki/The_Pony_Express"},"related":[]},"locations":["St. Joseph","Missouri","Sacramento","California","United States of America"],"latlong":[[39.758056,-94.836667], [38.555556,-121.468889]],"tags":["transport"]}],"1861":[{"text":"American Civil War between the Union and seceding Confederacy","links": {"main": {"title":"American Civil War","link":"//en.wikipedia.org/wiki/American_Civil_War"},"related":[{"title":"Union (American Civil War)","link":"//en.wikipedia.org/wiki/Union_(American_Civil_War)"},{"title":"Confederate States of America","link":"//en.wikipedia.org/wiki/Confederate_States_of_America"}]},"locations":["United States of America"],"latlong":[[39.81124,-77.22487]],"tags":["conflict"]},{"text":"Russia abolishes serfdom","links": {"main": {"title":"Emancipation reform of 1861","link":"//en.wikipedia.org/wiki/Emancipation_reform_of_1861"},"related":[]},"locations":["St. Petersburg","Russia"],"latlong":[[27.773056, -82.64]],"tags":["equality"]},{"text":"French intervention in Mexico and the creation of the Second Mexican Empire, ruled by Maximilian I of Mexico and his consort Carlota of Mexico","links": {"main": {"title":"French intervention in Mexico","link":"//en.wikipedia.org/wiki/French_intervention_in_Mexico"},"related":[{"title":"Second Mexican Empire","link":"//en.wikipedia.org/wiki/Second_Mexican_Empire"},{"title":"Maximilian I of Mexico","link":"//en.wikipedia.org/wiki/Maximilian_I_of_Mexico"},{"title":"Carlota of Mexico","link":"//en.wikipedia.org/wiki/Carlota_of_Mexico"}]},"locations":["Mexico"],"latlong":[[19.433333,-99.133333]],"tags":["conflict"]},{"text":"Death of Prince Albert","links": {"main": {"title":"Prince Albert","link":"//en.wikipedia.org/wiki/Prince_Albert"},"related":[]},"locations":["London","United Kingdom"],"latlong":[[51.507351, -0.127758]],"tags":["person","death"]},{"text":"James Clerk Maxwell publishes On Physical Lines of Force, formulating the four Maxwell's Equations","links": {"main": {"title":"James Clerk Maxwell","link":"//en.wikipedia.org/wiki/James_Clerk_Maxwell"},"related":[{"title":"Maxwell's Equations","link":"//en.wikipedia.org/wiki/Maxwell%27s_Equations"}]},"locations":["King's College","London","United Kingdom"],"latlong":[[51.511944, -0.116111]],"tags":["science"]}],"1862":[{"text":"The Pony Express ended","links": {"main": {"title":"The Pony Express","link":"//en.wikipedia.org/wiki/The_Pony_Express"},"related":[]},"locations":["St. Joseph","Missouri","Sacramento","California","United States of America"],"latlong":[[39.758056,-94.836667], [38.555556,-121.468889]],"tags":["transport"]},{"text":"Victor Hugo publishes Les Misérables","links": {"main": {"title":"Victor Hugo","link":"//en.wikipedia.org/wiki/Victor_Hugo"},"related":[]},"locations":["Guernsey"],"latlong":[[49.45, -2.55]],"tags":[]},{"text":"French gain first foothold in Southeast Asia","links": {"main": {"title":"French Indochina","link":"//en.wikipedia.org/wiki/French_Indochina"},"related":[]},"locations":["French Indochina"],"latlong":[[10.776889, 106.700806]],"tags":["conflict"]},{"text":"Muslim Rebellion in north-west China","links": {"main": {"title":"Dungan revolt (1862–1877)","link":"//en.wikipedia.org/wiki/Dungan_revolt_(1862–1877)"},"related":[]},"locations":["Shaanxi","Gansu","Ningxia"],"latlong":[[35.6, 108.4], [38, 102], [38.466667, 106.266667]],"tags":["internal conflict"]}],"1863":[{"text":"Bahá'u'lláh declares his station as 'He whom God shall make manifest'. This date is celebrated in the Bahá'í Faith as The Festival of Ridván","links": {"main": {"title":"Bahá'u'lláh","link":"//en.wikipedia.org/wiki/Bah%C3%A1%27u%27ll%C3%A1h"},"related":[{"title":"He whom God shall make manifest","link":"//en.wikipedia.org/wiki/He_whom_God_shall_make_manifest"},{"title":"Bahá'í Faith","link":"//en.wikipedia.org/wiki/Bah%C3%A1%27%C3%AD_Faith"},{"title":"Ridván","link":"//en.wikipedia.org/wiki/Ridv%C3%A1n"}]},"locations":["Garden of Ridván","Baghdad"],"latlong":[[33.34506, 44.37814]],"tags":["religion"]},{"text":"Formation of the International Red Cross is followed by the adoption of the First Geneva Convention in 1864","links": {"main": {"title":"International Red Cross and Red Crescent Movement","link":"//en.wikipedia.org/wiki/International_Red_Cross_and_Red_Crescent_Movement"},"related":[{"title":"First Geneva Convention","link":"//en.wikipedia.org/wiki/First_Geneva_Convention"}]},"locations":["Geneva","Switzerland"],"latlong":[[46.227778, 6.137222]],"tags":["social","government","treaty"]},{"text":"First section of the London Underground opens","links": {"main": {"title":"London Underground","link":"//en.wikipedia.org/wiki/London_Underground"},"related":[]},"locations":["London","United Kingdom"],"latlong":[[51.507351, -0.127758]],"tags":["technology","transport"]},{"text":"France annexes Cambodia","links": {"main": {"title":"France","link":"//en.wikipedia.org/wiki/France"},"related":[{"title":"Cambodia","link":"//en.wikipedia.org/wiki/Cambodia"}]},"locations":["Cambodia"],"latlong":[[11.55, 104.916667]],"tags":["conflict"]},{"text":"Édouard Manet exhibits his painting The Luncheon on the Grass, sparking public outrage","links": {"main": {"title":"Édouard Manet","link":"//en.wikipedia.org/wiki/Édouard_Manet"},"related":[{"title":"Le Déjeuner sur lâ€™herbe","link":"//en.wikipedia.org/wiki/Le_Déjeuner_sur_lâ€™herbe"}]},"locations":["Paris","France"],"latlong":[[48.856614, 2.352222]],"tags":["art"]},{"text":"Polish uprising against the Russian Empire","links": {"main": {"title":"January Uprising","link":"//en.wikipedia.org/wiki/January_Uprising"},"related":[{"title":"Russian Empire","link":"//en.wikipedia.org/wiki/Russian_Empire"}]},"locations":["Poland"],"latlong":[[52.216667, 21.033333]],"tags":["internal conflict"]}],"1864":[{"text":"Circassian Genocide","links": {"main": {"title":"Ethnic cleansing of Circassians","link":"//en.wikipedia.org/wiki/Ethnic_cleansing_of_Circassians"},"related":[]},"locations":["Circassia"],"latlong":[[43.585278, 39.720278]],"tags":["conflict"]},{"text":"The Chincha Islands War was an attempt by Spain to regain its South American colonies","links": {"main": {"title":"Chincha Islands War","link":"//en.wikipedia.org/wiki/Chincha_Islands_War"},"related":[]},"locations":["Chincha Islands"],"latlong":[[-13.64, -76.4]],"tags":["conflict"]},{"text":"The Paraguayan War ends Paraguayan ambitions for expansion and destroys much of the Paraguayan population","links": {"main": {"title":"Paraguayan War","link":"//en.wikipedia.org/wiki/Paraguayan_War"},"related":[]},"locations":["Paraguay"],"latlong":[[-25.266667, -57.666667]],"tags":["conflict"]},{"text":"The first railway track in Indonesia was laid between Semarang and Tanggung, Central Java by the Dutch colonial government","links": {"main": {"title":"Rail transport in Indonesia","link":"//en.wikipedia.org/wiki/Rail_transport_in_Indonesia"},"related":[{"title":"Semarang","link":"//en.wikipedia.org/wiki/Semarang"},{"title":"Central Java","link":"//en.wikipedia.org/wiki/Central_Java"},{"title":"Dutch East Indies","link":"//en.wikipedia.org/wiki/Dutch_East_Indies"}]},"locations":["Semarang","Central Java"],"latlong":[[-6.966667, 110.416667], [-7.5, 110]],"tags":[]}],"1865":[{"text":"Reconstruction in the United States; Slavery is banned in the United States by the Thirteenth Amendment to the United States Constitution","links": {"main": {"title":"Reconstruction era of the United States","link":"//en.wikipedia.org/wiki/Reconstruction_era_of_the_United_States"},"related":[{"title":"Thirteenth Amendment to the United States Constitution","link":"//en.wikipedia.org/wiki/Thirteenth_Amendment_to_the_United_States_Constitution"}]},"locations":["United States of America"],"latlong":[[38.883333, -77.016667]],"tags":["equality"]},{"text":"Robert E. Lee surrenders the Army of Northern Virginia to Ulysses S. Grant at Appomattox Courthouse, Virginia, effectively ending the American Civil War","links": {"main": {"title":"Robert E. Lee","link":"//en.wikipedia.org/wiki/Robert_E._Lee"},"related":[{"title":"Army of Northern Virginia","link":"//en.wikipedia.org/wiki/Army_of_Northern_Virginia"},{"title":"Ulysses S. Grant","link":"//en.wikipedia.org/wiki/Ulysses_S._Grant"},{"title":"Appomattox Courthouse, Virginia","link":"//en.wikipedia.org/wiki/Appomattox_Courthouse,_Virginia"},{"title":"American Civil War","link":"//en.wikipedia.org/wiki/American_Civil_War"}]},"locations":["Appomattox Courthouse","Appomattox","Virginia","United States of America"],"latlong":[[37.35554, -78.82986]],"tags":["conflict"]},{"text":"United States President Abraham Lincoln is assassinated by actor and Confederate sympathiser John Wilkes Booth, while attending a performance at Ford's Theater, Washington, D.C.. He dies approximately nine hours after being shot on 15 April 1865","links": {"main": {"title":"Abraham Lincoln","link":"//en.wikipedia.org/wiki/Abraham_Lincoln"},"related":[{"title":"Confederate States of America","link":"//en.wikipedia.org/wiki/Confederate_States_of_America"},{"title":"John Wilkes Booth","link":"//en.wikipedia.org/wiki/John_Wilkes_Booth"},{"title":"Ford's Theater","link":"//en.wikipedia.org/wiki/Ford%27s_Theater"},{"title":"Washington, D.C","link":"//en.wikipedia.org/wiki/Washington,_D.C."}]},"locations":["Ford's Theatre","Washington, D.C.","United States of America"],"latlong":[[38.896667, -77.025833]],"tags":["person","death","government"]},{"text":"Gregor Mendel formulates his laws of inheritance","links": {"main": {"title":"Gregor Mendel","link":"//en.wikipedia.org/wiki/Gregor_Mendel"},"related":[{"title":"Laws of inheritance","link":"//en.wikipedia.org/wiki/Laws_of_inheritance"}]},"locations":["St Thomas's Abbey","Brno","Austrian Empire"],"latlong":[[49.190961, 16.593014]],"tags":["science"]},{"text":"Lewis Carroll publishes Alice's Adventures in Wonderland","links": {"main": {"title":"Lewis Carroll","link":"//en.wikipedia.org/wiki/Lewis_Carroll"},"related":[{"title":"Alice's Adventures in Wonderland","link":"//en.wikipedia.org/wiki/Alice%27s_Adventures_in_Wonderland"}]},"locations":["Christ Church","Oxford","England","United Kingdom"],"latlong":[[51.750199, -1.255853]],"tags":["art"]}],"1866":[{"text":"Successful transatlantic telegraph cable follows an earlier attempt in 1858","links": {"main": {"title":"Transatlantic telegraph cable","link":"//en.wikipedia.org/wiki/Transatlantic_telegraph_cable"},"related":[]},"locations":["Valentia Island","Ireland","Heart's Content","Newfoundland","Canada"],"latlong":[[51.9, -10.35], [47.870278, -53.364444]],"tags":["technology"]},{"text":"Austro-Prussian War results in the dissolution of the German Confederation and the creation of the North German Confederation and the Austrian-Hungarian Dual Monarchy","links": {"main": {"title":"Austro-Prussian War","link":"//en.wikipedia.org/wiki/Austro-Prussian_War"},"related":[{"title":"German Confederation","link":"//en.wikipedia.org/wiki/German_Confederation"},{"title":"North German Confederation","link":"//en.wikipedia.org/wiki/North_German_Confederation"},{"title":"Austria-Hungary","link":"//en.wikipedia.org/wiki/Austria-Hungary"}]},"locations":["Bohemia","Germany","Italy"],"latlong":[[43.474, -1.553]],"tags":["conflict"]},{"text":"Famine in Finland","links": {"main": {"title":"Finnish famine of 1866–68","link":"//en.wikipedia.org/wiki/Finnish_famine_of_1866–68"},"related":[]},"locations":["Finland"],"latlong":[[64, 26]],"tags":["natural disaster"]},{"text":"After the Meiji Restoration, Japan embarks on a program of rapid modernization","links": {"main": {"title":"Meiji Restoration","link":"//en.wikipedia.org/wiki/Meiji_Restoration"},"related":[{"title":"Modernization","link":"//en.wikipedia.org/wiki/Modernization"}]},"locations":["Japan"],"latlong":[[36.204824, 138.252924]],"tags":["government"]}],"1867":[{"text":"The United States purchases Alaska from Russia","links": {"main": {"title":"Alaska Purchase","link":"//en.wikipedia.org/wiki/Alaska_Purchase"},"related":[{"title":"Russia","link":"//en.wikipedia.org/wiki/Russia"}]},"locations":["Alaska"],"latlong":[[64, -150]],"tags":["government"]},{"text":"Canadian Confederation formed, dividing into the new provinces of Ontario and Quebec, while New Brunswick and Nova Scotia became provinces of the new Dominion of Canada","links": {"main": {"title":"Canadian Confederation","link":"//en.wikipedia.org/wiki/Canadian_Confederation"},"related":[]},"locations":["Canada"],"latlong":[[50, -85]],"tags":["government"]},{"text":"Alfred Nobel invents dynamite","links": {"main": {"title":"Alfred Nobel","link":"//en.wikipedia.org/wiki/Alfred_Nobel"},"related":[{"title":"Dynamite","link":"//en.wikipedia.org/wiki/Dynamite"}]},"locations":["Geesthacht","Germany"],"latlong":[[53.433333, 10.366667]],"tags":["technology"]},{"text":"The Principality of Serbia passes a Constitution which defines its independence from the Ottoman Empire. International recognition followed in 1878","links": {"main": {"title":"Principality of Serbia","link":"//en.wikipedia.org/wiki/Principality_of_Serbia"},"related":[{"title":"Constitution","link":"//en.wikipedia.org/wiki/Constitution"},{"title":"Ottoman Empire","link":"//en.wikipedia.org/wiki/Ottoman_Empire"}]},"locations":["Principality of Serbia"],"latlong":[[44.011111, 20.911111]],"tags":["internal conflict","treaty"]},{"text":"The Luxembourg Crisis; a diplomatic confrontation between France and Prussia on the status of Luxembourg and the towns fortifications are torn down","links": {"main": {"title":"Luxembourg Crisis","link":"//en.wikipedia.org/wiki/Luxembourg_Crisis"},"related":[{"title":"Luxembourg","link":"//en.wikipedia.org/wiki/Luxembourg"}]},"locations":["Luxembourg"],"latlong":[[49.6, 6.116667]],"tags":["treaty","conflict"]}],"1868":[{"text":"The Expatriation Act of 1868 is approved by the U.S. Congress, one of the early blows which would eventually lead to the death of the common law doctrine of perpetual allegiance","links": {"main": {"title":"Expatriation Act of 1868","link":"//en.wikipedia.org/wiki/Expatriation_Act_of_1868"},"related":[]},"locations":["United States of America"],"latlong":[[38.883333,-77.016667]],"tags":["equality","government"]},{"text":"The Fourteenth Amendment to the United States Constitution is approved","links": {"main": {"title":"Fourteenth Amendment to the United States Constitution","link":"//en.wikipedia.org/wiki/Fourteenth_Amendment_to_the_United_States_Constitution"},"related":[]},"locations":["United States of America"],"latlong":[[38.883333,-77.016667]],"tags":[]},{"text":"Cro-Magnon man first identified","links": {"main": {"title":"Cro-Magnon","link":"//en.wikipedia.org/wiki/Cro-Magnon"},"related":[]},"locations":["Les Eyzies-de-Tayac-Sireuil","France"],"latlong":[[44.936, 1.018]],"tags":["history","science"]},{"text":"Michael Barrett is the last person to be publicly hanged in England","links": {"main": {"title":"Michael Barrett (Fenian)","link":"//en.wikipedia.org/wiki/Michael_Barrett_(Fenian)"},"related":[]},"locations":["Newgate Prison","London","United Kingdom"],"latlong":[[51.515692, -0.101919]],"tags":["crime"]},{"text":"Ten Years' War between Cuba and Spain","links": {"main": {"title":"Ten Years' War","link":"//en.wikipedia.org/wiki/Ten_Years%27_War"},"related":[{"title":"Cuba","link":"//en.wikipedia.org/wiki/Cuba"},{"title":"Kingdom of Spain","link":"//en.wikipedia.org/wiki/Kingdom_of_Spain"}]},"locations":["Cuba"],"latlong":[[23.133333, -82.383333]],"tags":["conflict"]},{"text":"The Batavian Museum (today National Museum of Indonesia) was officially opened by Dutch East Indies government","links": {"main": {"title":"National Museum of Indonesia","link":"//en.wikipedia.org/wiki/National_Museum_of_Indonesia"},"related":[]},"locations":["Jakarta","Indonesia"],"latlong":[[-6.176111, 106.821667]],"tags":["science","art"]}],"1869":[{"text":"Leo Tolstoy publishes War and Peace","links": {"main": {"title":"Leo Tolstoy","link":"//en.wikipedia.org/wiki/Leo_Tolstoy"},"related":[{"title":"War and Peace","link":"//en.wikipedia.org/wiki/War_and_Peace"}]},"locations":["Yasnaya Polyana","Tula","Russia"],"latlong":[[54.076111, 37.526111]],"tags":["conflict"]},{"text":"First Transcontinental Railroad completed in United States on 10 May. - United States","links": {"main": {"title":"First Transcontinental Railroad","link":"//en.wikipedia.org/wiki/First_Transcontinental_Railroad"},"related":[]},"locations":["Promontory","Utah","United States of America"],"latlong":[[41.618611, -111.55]],"tags":["transport"]},{"text":"Dmitri Mendeleev created the Periodic table","links": {"main": {"title":"Dmitri Mendeleev","link":"//en.wikipedia.org/wiki/Dmitri_Mendeleev"},"related":[{"title":"Periodic table","link":"//en.wikipedia.org/wiki/Periodic_table"}]},"locations":["St Petersburg","Russian Empire"],"latlong":[[59.95, 30.3]],"tags":["science"]},{"text":"The Suez Canal opens linking the Mediterranean to the Red Sea","links": {"main": {"title":"Suez Canal","link":"//en.wikipedia.org/wiki/Suez_Canal"},"related":[{"title":"Mediterranean Sea","link":"//en.wikipedia.org/wiki/Mediterranean_Sea"},{"title":"Red Sea","link":"//en.wikipedia.org/wiki/Red_Sea"}]},"locations":["Red Sea"],"latlong":[[22, 38]],"tags":["transport"]}],"1870":[{"text":"Rasmus Malling-Hansen's invention the Hansen Writing Ball becomes the first commercially sold typewriter","links": {"main": {"title":"Rasmus Malling-Hansen","link":"//en.wikipedia.org/wiki/Rasmus_Malling-Hansen"},"related":[{"title":"Hansen Writing Ball","link":"//en.wikipedia.org/wiki/Hansen_Writing_Ball"},{"title":"Typewriter","link":"//en.wikipedia.org/wiki/Typewriter"}]},"locations":["Copenhagen","Denmark"],"latlong":[[55.676111, 12.568333]],"tags":["technology"]},{"text":"The Franco-Prussian War results in the unifications of Germany and Italy, the collapse of the Second French Empire and the emergence of a New Imperialism","links": {"main": {"title":"Franco-Prussian War","link":"//en.wikipedia.org/wiki/Franco-Prussian_War"},"related":[{"title":"Unification of Germany","link":"//en.wikipedia.org/wiki/Unification_of_Germany"},{"title":"Italian unification","link":"//en.wikipedia.org/wiki/Italian_unification"},{"title":"Second French Empire","link":"//en.wikipedia.org/wiki/Second_French_Empire"},{"title":"New Imperialism","link":"//en.wikipedia.org/wiki/New_Imperialism"}]},"locations":["France","Germany","Italy"],"latlong":[[47, 2], [52.516667, 13.383333], [41.9, 12.483333]],"tags":["conflict"]},{"text":"Official dismantling of the Cultivation System and beginning of a 'Liberal Policy' of deregulated exploitation of the Netherlands East Indies","links": {"main": {"title":"Cultivation System","link":"//en.wikipedia.org/wiki/Cultivation_System"},"related":[{"title":"Liberal Period (Dutch East Indies)","link":"//en.wikipedia.org/wiki/Liberal_Period_(Dutch_East_Indies)"}]},"locations":["Indonesia"],"latlong":[[-6.175, 106.828333]],"tags":["conflict"]}],"1871":[{"text":"In Germany, Otto von Bismarck attacks the privileges of the Catholic Church in the Kulturkampf ('Culture War')","links": {"main": {"title":"Kulturkampf","link":"//en.wikipedia.org/wiki/Kulturkampf"},"related":[{"title":"Otto von Bismarck","link":"//en.wikipedia.org/wiki/Otto_von_Bismarck"}]},"locations":["Germany"],"latlong":[[52.516667, 13.383333]],"tags":["religion","government"]},{"text":"Famine in Persia is believed to have caused the death of 2 million","links": {"main": {"title":"List of famines","link":"//en.wikipedia.org/wiki/List_of_famines"},"related":[{"title":"Iran","link":"//en.wikipedia.org/wiki/Iran"}]},"locations":["Persia"],"latlong":[[32, 53]],"tags":["natural disaster"]},{"text":"Royal Albert Hall opens in London","links": {"main": {"title":"Royal Albert Hall","link":"//en.wikipedia.org/wiki/Royal_Albert_Hall"},"related":[]},"locations":["London","United Kingdom"],"latlong":[[51.500944,-0.177436]],"tags":["art"]},{"text":"The Paris Commune briefly rules the French capital","links": {"main": {"title":"Paris Commune","link":"//en.wikipedia.org/wiki/Paris_Commune"},"related":[]},"locations":["Paris","France"],"latlong":[[48.856614, 2.352222]],"tags":["government","internal conflict"]},{"text":"The feudal system is dismantled in Japan","links": {"main": {"title":"Abolition of the han system","link":"//en.wikipedia.org/wiki/Abolition_of_the_han_system"},"related":[]},"locations":["Empire of Japan"],"latlong":[[35.683333,139.683333]],"tags":["government"]},{"text":"Henry Morton Stanley meets Dr. David Livingstone near Lake Tanganyika","links": {"main": {"title":"Henry Morton Stanley","link":"//en.wikipedia.org/wiki/Henry_Morton_Stanley"},"related":[{"title":"David Livingstone","link":"//en.wikipedia.org/wiki/David_Livingstone"},{"title":"Lake Tanganyika","link":"//en.wikipedia.org/wiki/Lake_Tanganyika"}]},"locations":["Lake Tanganyika"],"latlong":[[-6.5, 29.833333]],"tags":["exploration"]}],"1872":[{"text":"Yellowstone National Park, the first national park, is created","links": {"main": {"title":"Yellowstone National Park","link":"//en.wikipedia.org/wiki/Yellowstone_National_Park"},"related":[{"title":"National park","link":"//en.wikipedia.org/wiki/National_park"}]},"locations":["Yellowstone National Park","United States of America"],"latlong":[[44.6, -110.5]],"tags":["ecology"]},{"text":"The first recognised international soccer match, between England and Scotland, is played","links": {"main": {"title":"Association football","link":"//en.wikipedia.org/wiki/Association_football"},"related":[{"title":"England","link":"//en.wikipedia.org/wiki/England"},{"title":"Scotland","link":"//en.wikipedia.org/wiki/Scotland"}]},"locations":["The Oval","Kennington","London","England","United Kingdom"],"latlong":[[51.483719, -0.114981]],"tags":["sport"]}],"1873":[{"text":"The Panic of 1873 starts the 'Long Depression'","links": {"main": {"title":"Panic of 1873","link":"//en.wikipedia.org/wiki/Panic_of_1873"},"related":[{"title":"Long Depression","link":"//en.wikipedia.org/wiki/Long_Depression"}]},"locations":["Western Europe","North America"],"latlong":[[51.507351, -0.127758], [38.883333,-77.016667]],"tags":["economy"]},{"text":"Maxwell's A Treatise on Electricity and Magnetism published","links": {"main": {"title":"Samurai","link":"//en.wikipedia.org/wiki/Samurai"},"related":[{"title":"Japan","link":"//en.wikipedia.org/wiki/Japan"}]},"locations":["University of Cambridge","Cambridge","England","United Kingdom"],"latlong":[[52.205278,0.117222]],"tags":["science"]},{"text":"The samurai class is abolished in Japan","links": {"main": {"title":"A Treatise on Electricity and Magnetism","link":"//en.wikipedia.org/wiki/A_Treatise_on_Electricity_and_Magnetism"},"related":[]},"locations":["Empire of Japan"],"latlong":[[35.683333,139.683333]],"tags":["government"]},{"text":"Blue jeans is invented","links": {"main": {"title":"Jeans","link":"//en.wikipedia.org/wiki/Jeans"},"related":[]},"locations":["San Francisco","California","United States of America"],"latlong":[[37.783333, -122.416667]],"tags":["invention"]},{"text":"Barbed wire is invented","links": {"main": {"title":"Barbed wire","link":"//en.wikipedia.org/wiki/Barbed_wire"},"related":[]},"locations":["DeKalb","Illinois","United States of America"],"latlong":[[41.931389, -88.750278]],"tags":["invention"]},{"text":"The beginning of the bloody Aceh War for Dutch occupation of the province","links": {"main": {"title":"Aceh War","link":"//en.wikipedia.org/wiki/Aceh_War"},"related":[]},"locations":["Sumatra","Indonesia"],"latlong":[[0,102]],"tags":["conflict"]}],"1874":[{"text":"The Société Anonyme Coopérative des Artistes Peintres, Sculpteurs, and Graveurs, better known as the Impressionists, organize and present their first public group exhibition at the Paris studio of the photographer Nadar","links": {"main": {"title":"Impressionist","link":"//en.wikipedia.org/wiki/Impressionist"},"related":[{"title":"Nadar (photographer)","link":"//en.wikipedia.org/wiki/Nadar_(photographer)"}]},"locations":["Boulevard des Capucines","Paris","France"],"latlong":[[48.871111, 2.333611]],"tags":["art"]},{"text":"The Home Rule Movement is established in Ireland","links": {"main": {"title":"Irish Home Rule movement","link":"//en.wikipedia.org/wiki/Irish_Home_Rule_movement"},"related":[]},"locations":["Ireland"],"latlong":[[53.416667, -8]],"tags":["government"]},{"text":"The British East India Company is dissolved","links": {"main": {"title":"British East India Company","link":"//en.wikipedia.org/wiki/British_East_India_Company"},"related":[]},"locations":["London","England","United Kingdom"],"latlong":[[51.507351, -0.127758]],"tags":["government"]},{"text":"First Republic in Spain","links": {"main": {"title":"First Spanish Republic","link":"//en.wikipedia.org/wiki/First_Spanish_Republic"},"related":[]},"locations":["First Spanish Republic"],"latlong":[[40.383333, -3.716667]],"tags":["government"]}],"1875":[{"text":"HMS Challenger surveys the deepest point in the Earth's oceans, the Challenger Deep","links": {"main": {"title":"Challenger Deep","link":"//en.wikipedia.org/wiki/Challenger_Deep"},"related":[]},"locations":["Challenger Deep","Mariana Trench","Pacific Ocean"],"latlong":[[11.373333, 142.591667]],"tags":["exploration"]},{"text":"26 million Indians perish in India due to famine","links": {"main": {"title":"Famine in India","link":"//en.wikipedia.org/wiki/Famine_in_India"},"related":[]},"locations":["India"],"latlong":[[21, 78]],"tags":["natural disaster"]},{"text":"Georges Bizet's opera Carmen premiers in Paris","links": {"main": {"title":"Georges Bizet","link":"//en.wikipedia.org/wiki/Georges_Bizet"},"related":[{"title":"Carmen","link":"//en.wikipedia.org/wiki/Carmen"}]},"locations":["Opéra-Comique","Paris","France"],"latlong":[[48.870962, 2.337703]],"tags":["art"]}],"1876":[{"text":"Bulgarians instigate the April Uprising against Ottoman rule","links": {"main": {"title":"Bulgarians","link":"//en.wikipedia.org/wiki/Bulgarians"},"related":[{"title":"April Uprising","link":"//en.wikipedia.org/wiki/April_Uprising"},{"title":"Ottoman Empire","link":"//en.wikipedia.org/wiki/Ottoman_Empire"}]},"locations":["Ottoman Bulgaria"],"latlong":[[42.633333, 24.35]],"tags":["internal conflict"]},{"text":"Richard Wagner's Ring Cycle is first performed in its entirety","links": {"main": {"title":"Richard Wagner","link":"//en.wikipedia.org/wiki/Richard_Wagner"},"related":[]},"locations":["Bayreuth","Germany"],"latlong":[[49.959583, 11.579583]],"tags":["art"]},{"text":"Queen Victoria becomes Empress of India","links": {"main": {"title":"Queen Victoria","link":"//en.wikipedia.org/wiki/Queen_Victoria"},"related":[{"title":"Empress of India","link":"//en.wikipedia.org/wiki/Empress_of_India"}]},"locations":["India"],"latlong":[[21, 78]],"tags":["government"]},{"text":"Battle of the Little Bighorn leads to the death of General Custer and victory for the alliance of Lakota, Cheyenne and Arapaho","links": {"main": {"title":"Battle of the Little Bighorn","link":"//en.wikipedia.org/wiki/Battle_of_the_Little_Bighorn"},"related":[{"title":"General Custer","link":"//en.wikipedia.org/wiki/General_Custer"},{"title":"Lakota people","link":"//en.wikipedia.org/wiki/Lakota_people"},{"title":"Northern Cheyenne","link":"//en.wikipedia.org/wiki/Northern_Cheyenne"},{"title":"Arapaho","link":"//en.wikipedia.org/wiki/Arapaho"}]},"locations":["Big Horn County","Montana","United States of America"],"latlong":[[45.565, -107.428889]],"tags":["conflict"]},{"text":"13 million Chinese die of famine in northern China","links": {"main": {"title":"Famine","link":"//en.wikipedia.org/wiki/Famine"},"related":[]},"locations":["China"],"latlong":[[35, 103]],"tags":["natural disaster"]}],"1877":[{"text":"Great Railroad Strike in the United States may have been the world's first nationwide labour strike","links": {"main": {"title":"Great Railroad Strike","link":"//en.wikipedia.org/wiki/Great_Railroad_Strike"},"related":[{"title":"United States","link":"//en.wikipedia.org/wiki/United_States"},{"title":"Strike action","link":"//en.wikipedia.org/wiki/Strike_action"}]},"locations":["United States of America"],"latlong":[[39.459167, -77.967778]],"tags":["government","economy"]},{"text":"Crazy Horse surrenders and is later killed","links": {"main": {"title":"Crazy Horse","link":"//en.wikipedia.org/wiki/Crazy_Horse"},"related":[]},"locations":["Fort Robinson","Nebraska","United States of America"],"latlong":[[42.668889, -103.467222]],"tags":["internal conflict","person","death"]},{"text":"Asaph Hall discovers the moons of Mars","links": {"main": {"title":"Asaph Hall","link":"//en.wikipedia.org/wiki/Asaph_Hall"},"related":[{"title":"Moons of Mars","link":"//en.wikipedia.org/wiki/Moons_of_Mars"}]},"locations":["Foggy Bottom","Washington, D.C.","United States of America"],"latlong":[[38.900889, -77.050056]],"tags":["exploration"]},{"text":"Thomas Edison invents the phonograph","links": {"main": {"title":"Thomas Edison","link":"//en.wikipedia.org/wiki/Thomas_Edison"},"related":[{"title":"Phonograph","link":"//en.wikipedia.org/wiki/Phonograph"}]},"locations":["Menlo Park","New Jersey","United States of America"],"latlong":[[40.565, -74.3375]],"tags":["technology"]},{"text":"Following the Russo-Turkish War, the Treaty of Berlin recognizes formal independence of the Principality of Serbia, Montenegro and Romania. Bulgaria becomes autonomous","links": {"main": {"title":"Russo-Turkish War (1877–1878)","link":"//en.wikipedia.org/wiki/Russo-Turkish_War_(1877–1878)"},"related":[{"title":"Treaty of Berlin, 1878","link":"//en.wikipedia.org/wiki/Treaty_of_Berlin,_1878"},{"title":"Principality of Serbia","link":"//en.wikipedia.org/wiki/Principality_of_Serbia"},{"title":"Montenegro","link":"//en.wikipedia.org/wiki/Montenegro"},{"title":"Romania","link":"//en.wikipedia.org/wiki/Romania"},{"title":"Bulgaria","link":"//en.wikipedia.org/wiki/Bulgaria"}]},"locations":["Berlin"],"latlong":[[52.516667, 13.383333]],"tags":["conflict","treaty"]}],"1878":[{"text":"First commercial telephone exchange in New Haven, Connecticut","links": {"main": {"title":"Telephone exchange","link":"//en.wikipedia.org/wiki/Telephone_exchange"},"related":[{"title":"New Haven, Connecticut","link":"//en.wikipedia.org/wiki/New_Haven,_Connecticut"}]},"locations":["New Haven","Connecticut","United States of America"],"latlong":[[41.31, -72.923611]],"tags":["technology"]}],"1879":[{"text":"Anglo-Zulu War in South Africa. - South Africa","links": {"main": {"title":"Anglo-Zulu War","link":"//en.wikipedia.org/wiki/Anglo-Zulu_War"},"related":[]},"locations":["Zulu Kingdom"],"latlong":[[-28.2975, 31.421667]],"tags":["conflict"]},{"text":"Thomas Edison tests his first light bulb","links": {"main": {"title":"Thomas Edison","link":"//en.wikipedia.org/wiki/Thomas_Edison"},"related":[{"title":"Light bulb","link":"//en.wikipedia.org/wiki/Light_bulb"}]},"locations":["Menlo Park","New Jersey","United States of America"],"latlong":[[40.565, -74.3375]],"tags":["technology"]},{"text":"Little War against Spanish rule in Cuba leads to rebel defeat","links": {"main": {"title":"Little War (Cuba)","link":"//en.wikipedia.org/wiki/Little_War_(Cuba)"},"related":[{"title":"Cuba","link":"//en.wikipedia.org/wiki/Cuba"}]},"locations":["Cuba"],"latlong":[[23.133333, -82.383333]],"tags":["conflict"]},{"text":"Chile battles with Peru and Bolivia over Andean territory in the War of the Pacific","links": {"main": {"title":"Chile","link":"//en.wikipedia.org/wiki/Chile"},"related":[{"title":"Peru","link":"//en.wikipedia.org/wiki/Peru"},{"title":"Bolivia","link":"//en.wikipedia.org/wiki/Bolivia"},{"title":"War of the Pacific","link":"//en.wikipedia.org/wiki/War_of_the_Pacific"}]},"locations":["Peru","Bolivia"],"latlong":[[-12.043333, -77.028333]],"tags":["conflict"]},{"text":"Belgium is engulfed in a political crisis, dubbed the First School War, over the role of religion in state education","links": {"main": {"title":"Belgium","link":"//en.wikipedia.org/wiki/Belgium"},"related":[{"title":"First School War","link":"//en.wikipedia.org/wiki/First_School_War"}]},"locations":["Belgium"],"latlong":[[50.85, 4.35]],"tags":["government","religion"]},{"text":"Kartini was born in Jepara on the 21st April; today the date is commemorated as women's emancipation day in Indonesia","links": {"main": {"title":"Kartini","link":"//en.wikipedia.org/wiki/Kartini"},"related":[{"title":"Jepara","link":"//en.wikipedia.org/wiki/Jepara"}]},"locations":["Jepara","Indonesia"],"latlong":[[-6.533333, 110.666667]],"tags":["equality","person"]}],"1880":[{"text":"The First Boer War","links": {"main": {"title":"First Boer War","link":"//en.wikipedia.org/wiki/First_Boer_War"},"related":[]},"locations":["Transvaal Colony"],"latlong":[[-25, 30]],"tags":["conflict"]}],"1881":[{"text":"Tsar Alexander II is assassinated","links": {"main": {"title":"Alexander II of Russia","link":"//en.wikipedia.org/wiki/Alexander_II_of_Russia"},"related":[]},"locations":["Pevchesky Bridge","Saint Petersburg","Russian Empire"],"latlong":[[59.9401, 30.3193]],"tags":["person","death","government"]},{"text":"Wave of pogroms begins in the Russian Empire","links": {"main": {"title":"Anti-Jewish pogroms in the Russian Empire","link":"//en.wikipedia.org/wiki/Anti-Jewish_pogroms_in_the_Russian_Empire"},"related":[]},"locations":["Russian Empire"],"latlong":[[59.95, 30.3]],"tags":["religion","government","internal conflict"]},{"text":"Gunfight at the O.K. Corral. Sitting Bull surrenders","links": {"main": {"title":"Gunfight at the O.K. Corral","link":"//en.wikipedia.org/wiki/Gunfight_at_the_O.K._Corral"},"related":[{"title":"Sitting Bull","link":"//en.wikipedia.org/wiki/Sitting_Bull"}]},"locations":["Tombstone","Arizona Territory","United States of America"],"latlong":[[31.713889, -110.0675]],"tags":["crime","death"]},{"text":"First electrical power plant and grid in Godalming, Britain","links": {"main": {"title":"Power plant","link":"//en.wikipedia.org/wiki/Power_plant"},"related":[{"title":"Electricity distribution","link":"//en.wikipedia.org/wiki/Electricity_distribution"},{"title":"Godalming","link":"//en.wikipedia.org/wiki/Godalming"}]},"locations":["Godalming","Surrey","England","United Kingdom"],"latlong":[[51.18, -0.61]],"tags":["technology"]},{"text":"President James A. Garfield is assassinated","links": {"main": {"title":"Assassination of James A. Garfield","link":"//en.wikipedia.org/wiki/Assassination_of_James_A._Garfield"},"related":[{"title":"James A. Garfield","link":"//en.wikipedia.org/wiki/James_A._Garfield"}]},"locations":["Baltimore and Potomac Railroad Station","Washington D.C.","United States of America"],"latlong":[[38.891944,-77.020278]],"tags":["person","death","government"]},{"text":"The Jules Ferry laws are passed in France establishing free, secular education","links": {"main": {"title":"Jules Ferry laws","link":"//en.wikipedia.org/wiki/Jules_Ferry_laws"},"related":[{"title":"French Third Republic","link":"//en.wikipedia.org/wiki/French_Third_Republic"}]},"locations":["France"],"latlong":[[46.227638, 2.213749]],"tags":["education","religion","government"]},{"text":"The Mahdist War in Sudan","links": {"main": {"title":"Mahdist War","link":"//en.wikipedia.org/wiki/Mahdist_War"},"related":[{"title":"Anglo-Egyptian Sudan","link":"//en.wikipedia.org/wiki/Anglo-Egyptian_Sudan"}]},"locations":["Sudan"],"latlong":[[15, 32]],"tags":["conflict"]}],"1882":[{"text":"The British invasion and subsequent occupation of Egypt","links": {"main": {"title":"Anglo-Egyptian War","link":"//en.wikipedia.org/wiki/Anglo-Egyptian_War"},"related":[{"title":"Khedivate of Egypt","link":"//en.wikipedia.org/wiki/Khedivate_of_Egypt"}]},"locations":["Egypt"],"latlong":[[26, 30]],"tags":["conflict"]}],"1883":[{"text":"Krakatoa volcano explosion, one of the largest in modern history","links": {"main": {"title":"1883 eruption of Krakatoa","link":"//en.wikipedia.org/wiki/1883_eruption_of_Krakatoa"},"related":[{"title":"Krakatoa","link":"//en.wikipedia.org/wiki/Krakatoa"}]},"locations":["Krakatoa","Indonesia"],"latlong":[[-6.102, 105.423]],"tags":["natural disaster"]},{"text":"The quagga is rendered extinct","links": {"main": {"title":"Quagga","link":"//en.wikipedia.org/wiki/Quagga"},"related":[]},"locations":["South Africa"],"latlong":[[-30, 25]],"tags":["ecology"]},{"text":"Robert Louis Stevenson's Treasure Island is published","links": {"main": {"title":"Treasure Island","link":"//en.wikipedia.org/wiki/Treasure_Island"},"related":[{"title":"Robert Louis Stevenson","link":"//en.wikipedia.org/wiki/Robert_Louis_Stevenson"}]},"locations":["London","United Kingdom"],"latlong":[[51.507351, -0.127758]],"tags":["art"]}],"1884":[{"text":"Siege of Khartoum","links": {"main": {"title":"Siege of Khartoum","link":"//en.wikipedia.org/wiki/Siege_of_Khartoum"},"related":[]},"locations":["Khartoum","Mahdist Sudan"],"latlong":[[15.6333, 32.5333]],"tags":["conflict"]},{"text":"Germany gains control of Cameroon","links": {"main": {"title":"Kamerun","link":"//en.wikipedia.org/wiki/Kamerun"},"related":[{"title":"German Empire","link":"//en.wikipedia.org/wiki/German_Empire"},{"title":"Cameroon","link":"//en.wikipedia.org/wiki/Cameroon"}]},"locations":["Cameroon"],"latlong":[[4.05, 9.7]],"tags":["government"]},{"text":"Mark Twain publishes The Adventures of Huckleberry Finn","links": {"main": {"title":"Mark Twain","link":"//en.wikipedia.org/wiki/Mark_Twain"},"related":[]},"locations":["Quarry Farm","Elmira","New York","United States of America"],"latlong":[[42.113056, -76.782222]],"tags":["art"]},{"text":"Sir Hiram Maxim invents the first self-powered Machine gun","links": {"main": {"title":"Maxim gun","link":"//en.wikipedia.org/wiki/Maxim_gun"},"related":[{"title":"Sir Hiram Maxim","link":"//en.wikipedia.org/wiki/Sir_Hiram_Maxim"},{"title":"Machine gun","link":"//en.wikipedia.org/wiki/Machine_gun"}]},"locations":["West Norwood","London","United Kingdom"],"latlong":[[51.427025, -0.095539]],"tags":["technology"]},{"text":"The Berlin Conference signals the start of the European 'scramble for Africa'. Attending nations also agree to ban trade in slaves","links": {"main": {"title":"Berlin Conference","link":"//en.wikipedia.org/wiki/Berlin_Conference"},"related":[{"title":"Scramble for Africa","link":"//en.wikipedia.org/wiki/Scramble_for_Africa"}]},"locations":["Berlin","Germany"],"latlong":[[52.516667, 13.383333]],"tags":["treaty","conflict","government"]},{"text":"The Sino-French War led to the formation of French Indochina","links": {"main": {"title":"Sino-French War","link":"//en.wikipedia.org/wiki/Sino-French_War"},"related":[{"title":"French Indochina","link":"//en.wikipedia.org/wiki/French_Indochina"}]},"locations":["Southeast Mainland China","Taiwan","Northern Vietnam"],"latlong":[[21.033333, 105.85]],"tags":["conflict"]}],"1885":[{"text":"Louis Pasteur creates the first successful vaccine against rabies for a young boy who had been bitten 14 times by a rabid dog","links": {"main": {"title":"Louis Pasteur","link":"//en.wikipedia.org/wiki/Louis_Pasteur"},"related":[{"title":"Vaccine","link":"//en.wikipedia.org/wiki/Vaccine"}]},"locations":["Paris","France"],"latlong":[[48.856614, 2.352222]],"tags":["science","technology"]},{"text":"King Leopold II of Belgium establishes the Congo Free State as a personal fiefdom","links": {"main": {"title":"Leopold II of Belgium","link":"//en.wikipedia.org/wiki/Leopold_II_of_Belgium"},"related":[{"title":"Congo Free State","link":"//en.wikipedia.org/wiki/Congo_Free_State"}]},"locations":["Congo Free State"],"latlong":[[-5.85, 13.05]],"tags":["disaster","government","terrorism","person","economy","conflict"]},{"text":"Britain establishes a protectorate over Bechuanaland (modern Botswana)","links": {"main": {"title":"Bechuanaland Protectorate","link":"//en.wikipedia.org/wiki/Bechuanaland_Protectorate"},"related":[{"title":"Botswana","link":"//en.wikipedia.org/wiki/Botswana"}]},"locations":["Bechuanaland"],"latlong":[[-24.658333, 25.908333]],"tags":["government"]},{"text":"Singer begins production of the Singer Model 27 featuring a vibrating shuttle bobbin driver, which would become the most popular model of sewing machine","links": {"main": {"title":"Singer Model 27 and 127","link":"//en.wikipedia.org/wiki/Singer_Model_27_and_127"},"related":[{"title":"Singer Manufacturing Company","link":"//en.wikipedia.org/wiki/Singer_Manufacturing_Company"},{"title":"Sewing machine","link":"//en.wikipedia.org/wiki/Sewing_machine"}]},"locations":["561 Broadway","New York","United States of America"],"latlong":[[40.724169, -73.998341]],"tags":["technology"]},{"text":"Rock Springs massacre. White miners rioted, killing at least 28 Chinese immigrant miners","links": {"main": {"title":"Rock Springs massacre","link":"//en.wikipedia.org/wiki/Rock_Springs_massacre"},"related":[{"title":"Miners","link":"//en.wikipedia.org/wiki/Miners"}]},"locations":["Rock Springs","Wyoming","United States of America"],"latlong":[[41.590833, -109.2225]],"tags":["economy","internal conflict"]}],"1886":[{"text":"'The Strange Case of Dr. Jekyll and Mr. Hyde' by Robert Louis Stevenson is published","links": {"main": {"title":"The Strange Case of Dr. Jekyll and Mr. Hyde","link":"//en.wikipedia.org/wiki/The_Strange_Case_of_Dr._Jekyll_and_Mr._Hyde"},"related":[]},"locations":["London","United Kingdom"],"latlong":[[51.507351, -0.127758]],"tags":["art"]},{"text":"Burma is presented to Queen Victoria as a birthday gift","links": {"main": {"title":"Myanmar","link":"//en.wikipedia.org/wiki/Myanmar"},"related":[{"title":"Queen Victoria","link":"//en.wikipedia.org/wiki/Queen_Victoria"}]},"locations":["Burma"],"latlong":[[21.913965, 95.956223]],"tags":["government"]},{"text":"Karl Benz sells the first commercial automobile","links": {"main": {"title":"Benz Patent-Motorwagen","link":"//en.wikipedia.org/wiki/Benz_Patent-Motorwagen"},"related":[{"title":"Karl Benz","link":"//en.wikipedia.org/wiki/Karl_Benz"},{"title":"Automobile","link":"//en.wikipedia.org/wiki/Automobile"}]},"locations":["Mannheim","Germany"],"latlong":[[49.488889, 8.469167]],"tags":["technology","transport"]},{"text":"Coca-Cola is developed","links": {"main": {"title":"Coca-Cola","link":"//en.wikipedia.org/wiki/Coca-Cola"},"related":[]},"locations":["Atlanta","Georgia","United States of America"],"latlong":[[33.755, -84.39]],"tags":["social"]},{"text":"Construction of the Statue of Liberty","links": {"main": {"title":"Statue of Liberty","link":"//en.wikipedia.org/wiki/Statue_of_Liberty"},"related":[]},"locations":["Liberty Island","Manhattan","New York","United States of America"],"latlong":[[40.689167, -74.044444]],"tags":["government","equality","monument"]}],"1887":[{"text":"The British Empire takes over Balochistan","links": {"main": {"title":"Balochistan","link":"//en.wikipedia.org/wiki/Balochistan"},"related":[]},"locations":["Balochistan"],"latlong":[[28.883333, 64.416667]],"tags":["government"]},{"text":"Sir Arthur Conan Doyle publishes his first Sherlock Holmes story, A Study in Scarlet","links": {"main": {"title":"Sir Arthur Conan Doyle","link":"//en.wikipedia.org/wiki/Sir_Arthur_Conan_Doyle"},"related":[{"title":"Sherlock Holmes","link":"//en.wikipedia.org/wiki/Sherlock_Holmes"}]},"locations":["Portsmouth","England","United Kingdom"],"latlong":[[50.816667, -1.083333]],"tags":["art"]}],"1888":[{"text":"Louis Le Prince records the Roundhay Garden Scene, the earliest surviving film","links": {"main": {"title":"Roundhay Garden Scene","link":"//en.wikipedia.org/wiki/Roundhay_Garden_Scene"},"related":[{"title":"Louis Le Prince","link":"//en.wikipedia.org/wiki/Louis_Le_Prince"},{"title":"Film","link":"//en.wikipedia.org/wiki/Film"}]},"locations":["Roundhay","Leeds","Yorkshire","United Kingdom"],"latlong":[[53.831, -1.497]],"tags":["art"]},{"text":"Jack the Ripper murders occur in Whitechapel, London","links": {"main": {"title":"Jack the Ripper","link":"//en.wikipedia.org/wiki/Jack_the_Ripper"},"related":[]},"locations":["Whitechapel","London","United Kingdom"],"latlong":[[51.5165, -0.075]],"tags":["crime","death"]},{"text":"Slavery banned in Brazil","links": {"main": {"title":"Lei Ãurea","link":"//en.wikipedia.org/wiki/Lei_Ãurea"},"related":[{"title":"Slavery in Brazil","link":"//en.wikipedia.org/wiki/Slavery_in_Brazil"}]},"locations":["Brazil"],"latlong":[[-15.783333, -47.866667]],"tags":["equality","government","treaty"]},{"text":"Founding of the shipping line Koninklijke Paketvaart-Maatschappij (KPM) that supported the unification and development of the colonial economy","links": {"main": {"title":"Koninklijke Paketvaart-Maatschappij","link":"//en.wikipedia.org/wiki/Koninklijke_Paketvaart-Maatschappij"},"related":[]},"locations":["Netherlands"],"latlong":[[52.25, 4.667]],"tags":["transport"]}],"1889":[{"text":"The Mayerling Incident. Crown Prince Rudolf of Austria and Baroness Mary Vetsera are found dead in an apparent murder-suicide","links": {"main": {"title":"Mayerling Incident","link":"//en.wikipedia.org/wiki/Mayerling_Incident"},"related":[{"title":"Crown Prince Rudolf of Austria","link":"//en.wikipedia.org/wiki/Crown_Prince_Rudolf_of_Austria"},{"title":"Baroness Mary Vetsera","link":"//en.wikipedia.org/wiki/Baroness_Mary_Vetsera"}]},"locations":["Mayerling","Baden","Austria"],"latlong":[[48.046944, 16.098333]],"tags":["government","person","death","crime"]},{"text":"Eiffel Tower is inaugurated in Paris","links": {"main": {"title":"Eiffel Tower","link":"//en.wikipedia.org/wiki/Eiffel_Tower"},"related":[{"title":"Paris","link":"//en.wikipedia.org/wiki/Paris"}]},"locations":["Paris","France"],"latlong":[[48.858222, 2.2945]],"tags":["monument"]},{"text":"Mirza Ghulam Ahmad establishes the Ahmadiyya Muslim Community, a reform sect of Islam","links": {"main": {"title":"Mirza Ghulam Ahmad","link":"//en.wikipedia.org/wiki/Mirza_Ghulam_Ahmad"},"related":[{"title":"Ahmadiyya","link":"//en.wikipedia.org/wiki/Ahmadiyya"}]},"locations":["British Raj"],"latlong":[[22.566667, 88.366667]],"tags":["religion"]},{"text":"End of the Brazilian Empire and the beginning of the Brazilian Republic","links": {"main": {"title":"Brazilian Empire","link":"//en.wikipedia.org/wiki/Brazilian_Empire"},"related":[{"title":"History of Brazil (1889–1930)","link":"//en.wikipedia.org/wiki/History_of_Brazil_(1889–1930)"}]},"locations":["First Brazilian Republic"],"latlong":[[-22.908333, -43.196389]],"tags":["government"]},{"text":"Vincent van Gogh paints Starry Night","links": {"main": {"title":"The Starry Night","link":"//en.wikipedia.org/wiki/The_Starry_Night"},"related":[{"title":"Vincent van Gogh","link":"//en.wikipedia.org/wiki/Vincent_van_Gogh"}]},"locations":["Saint-Rémy-de-Provence","France"],"latlong":[[43.79, 4.8325]],"tags":["art"]},{"text":"Aspirin patented","links": {"main": {"title":"History of aspirin","link":"//en.wikipedia.org/wiki/History_of_aspirin"},"related":[{"title":"Aspirin","link":"//en.wikipedia.org/wiki/Aspirin"}]},"locations":["Barmen","Germany"],"latlong":[[51.266667, 7.2]],"tags":["science"]},{"text":"Moulin Rouge opens in Paris","links": {"main": {"title":"Moulin Rouge","link":"//en.wikipedia.org/wiki/Moulin_Rouge"},"related":[]},"locations":["Paris","France"],"latlong":[[48.884167, 2.3325]],"tags":["art"]}],"1890":[{"text":"The Wounded Knee Massacre in South Dakota was the last battle in the American Indian Wars. This event represents the end of the American Old West","links": {"main": {"title":"Wounded Knee Massacre","link":"//en.wikipedia.org/wiki/Wounded_Knee_Massacre"},"related":[{"title":"South Dakota","link":"//en.wikipedia.org/wiki/South_Dakota"},{"title":"Indian Wars","link":"//en.wikipedia.org/wiki/Indian_Wars"},{"title":"American Old West","link":"//en.wikipedia.org/wiki/American_Old_West"}]},"locations":["Wounded Knee Creek","South Dakota","United States of America"],"latlong":[[43.1411, -102.3628]],"tags":["conflict"]},{"text":"Italy annexes Eritrea","links": {"main": {"title":"Italian Eritrea","link":"//en.wikipedia.org/wiki/Italian_Eritrea"},"related":[{"title":"Eritrea","link":"//en.wikipedia.org/wiki/Eritrea"}]},"locations":["Eritrea"],"latlong":[[15.333333, 38.916667]],"tags":["government","conflict"]},{"text":"First use of the electric chair as a method of execution","links": {"main": {"title":"Electric chair","link":"//en.wikipedia.org/wiki/Electric_chair"},"related":[{"title":"William Kemmler","link":"//en.wikipedia.org/wiki/William_Kemmler"}]},"locations":["Auburn Prison","Auburn","New York","United States of America"],"latlong":[[42.934722, -76.574167]],"tags":["crime","death"]},{"text":"Independence of Luxembourg","links": {"main": {"title":"Luxembourg","link":"//en.wikipedia.org/wiki/Luxembourg"},"related":[]},"locations":["Luxembourg"],"latlong":[[49.6, 6.116667]],"tags":["government"]},{"text":"Death of Vincent van Gogh","links": {"main": {"title":"Vincent van Gogh","link":"//en.wikipedia.org/wiki/Vincent_van_Gogh"},"related":[]},"locations":["Auvers-sur-Oise","France"],"latlong":[[49.0725, 2.175]],"tags":["person","death"]},{"text":"The cardboard box is invented","links": {"main": {"title":"Cardboard box","link":"//en.wikipedia.org/wiki/Cardboard_box"},"related":[]},"locations":["Brookly","New York","United States of America"],"latlong":[[40.692778, -73.990278]],"tags":["technology"]}],"1891":[{"text":"Mirza Ghulam Ahmad, founder of the Ahmadiyya movement, claims to be Promised Messiah and Imam Mahdi","links": {"main": {"title":"Mirza Ghulam Ahmad","link":"//en.wikipedia.org/wiki/Mirza_Ghulam_Ahmad"},"related":[{"title":"Ahmadiyya","link":"//en.wikipedia.org/wiki/Ahmadiyya"},{"title":"Imam Mahdi","link":"//en.wikipedia.org/wiki/Imam_Mahdi"}]},"locations":["British Raj"],"latlong":[[22.566667, 88.366667]],"tags":["religion"]},{"text":"Chilean Civil War","links": {"main": {"title":"1891 Chilean Civil War","link":"//en.wikipedia.org/wiki/1891_Chilean_Civil_War"},"related":[]},"locations":["Chile"],"latlong":[[-33.45, -70.666667]],"tags":["conflict"]},{"text":"Wrigley Company is founded in Illinois","links": {"main": {"title":"Wrigley Company","link":"//en.wikipedia.org/wiki/Wrigley_Company"},"related":[]},"locations":["Chicago","Illinois","United States of America"],"latlong":[[41.836944, -87.684722]],"tags":["social"]},{"text":"Pope Leo XIII launches the encyclical Rerum Novarum, the first major catholic document on social justice","links": {"main": {"title":"Rerum Novarum","link":"//en.wikipedia.org/wiki/Rerum_Novarum"},"related":[{"title":"Leo XIII","link":"//en.wikipedia.org/wiki/Leo_XIII"},{"title":"Encyclical","link":"//en.wikipedia.org/wiki/Encyclical"}]},"locations":["Vatican","Italy"],"latlong":[[41.903333, 12.453333]],"tags":["religion","equality"]}],"1892":[{"text":"Basketball is invented","links": {"main": {"title":"Basketball","link":"//en.wikipedia.org/wiki/Basketball"},"related":[]},"locations":["Springfield College","Springfield","Massachusetts","United States of America"],"latlong":[[42.104333, -72.555056]],"tags":["sport"]},{"text":"The World's Columbian Exposition was held in Chicago celebrating the 400th anniversary of Christopher Columbus's arrival in the New World","links": {"main": {"title":"World's Columbian Exposition","link":"//en.wikipedia.org/wiki/World%27s_Columbian_Exposition"},"related":[{"title":"Chicago","link":"//en.wikipedia.org/wiki/Chicago"},{"title":"Christopher Columbus","link":"//en.wikipedia.org/wiki/Christopher_Columbus"},{"title":"New World","link":"//en.wikipedia.org/wiki/New_World"}]},"locations":["Jackson Park","Chicago","Illinois","United States of America"],"latlong":[[41.79, -87.58]],"tags":["science","technology"]},{"text":"Fingerprinting is officially adopted for the first time","links": {"main": {"title":"Fingerprinting","link":"//en.wikipedia.org/wiki/Fingerprinting"},"related":[]},"locations":["Buenos Aires","Argentina"],"latlong":[[-34.603333, -58.381667]],"tags":["science","crime","technology"]},{"text":"Tchaikovsky's Nutcracker Suite premières in St Petersberg","links": {"main": {"title":"The Nutcracker","link":"//en.wikipedia.org/wiki/The_Nutcracker"},"related":[{"title":"Tchaikovsky","link":"//en.wikipedia.org/wiki/Tchaikovsky"}]},"locations":["Mariinsky Theatre","St Petersberg","Russia"],"latlong":[[59.925556, 30.296111]],"tags":["art"]}],"1893":[{"text":"The Internal Macedonian Revolutionary Organisation is formed","links": {"main": {"title":"Internal Macedonian Revolutionary Organisation","link":"//en.wikipedia.org/wiki/Internal_Macedonian_Revolutionary_Organisation"},"related":[]},"locations":["Salonica","Greece"],"latlong":[[40.65, 22.9]],"tags":["government"]},{"text":"New Zealand becomes the first country to enact women's suffrage","links": {"main": {"title":"Women's suffrage in New Zealand","link":"//en.wikipedia.org/wiki/Women%27s_suffrage_in_New_Zealand"},"related":[{"title":"Women's suffrage","link":"//en.wikipedia.org/wiki/Women%27s_suffrage"}]},"locations":["New Zealand"],"latlong":[[-42, 174]],"tags":["equality"]},{"text":"The Coremans-de Vriendt law is passed in Belgium, creating legal equality for French and Dutch languages","links": {"main": {"title":"Coremans-de Vriendt law","link":"//en.wikipedia.org/wiki/Coremans-de_Vriendt_law"},"related":[{"title":"Belgium","link":"//en.wikipedia.org/wiki/Belgium"},{"title":"French language","link":"//en.wikipedia.org/wiki/French_language"},{"title":"Dutch language","link":"//en.wikipedia.org/wiki/Dutch_language"}]},"locations":["Belgium"],"latlong":[[50.85, 4.35]],"tags":["government","equality"]}],"1894":[{"text":"First gramophone record","links": {"main": {"title":"Gramophone record","link":"//en.wikipedia.org/wiki/Gramophone_record"},"related":[]},"locations":["Washington, D.C.","United States of America"],"latlong":[[38.904722, -77.016389]],"tags":["art","technology"]},{"text":"Karl Elsener invents the Swiss Army knife","links": {"main": {"title":"Karl Elsener (inventor)","link":"//en.wikipedia.org/wiki/Karl_Elsener_(inventor)"},"related":[{"title":"Swiss Army knife","link":"//en.wikipedia.org/wiki/Swiss_Army_knife"}]},"locations":["Ibach","Switzerland"],"latlong":[[47.011278, 8.644472]],"tags":["invention","technology"]},{"text":"After the First Sino-Japanese War, China cedes Taiwan to Japan and grants Japan a free hand in Korea","links": {"main": {"title":"First Sino-Japanese War","link":"//en.wikipedia.org/wiki/First_Sino-Japanese_War"},"related":[{"title":"Taiwan","link":"//en.wikipedia.org/wiki/Taiwan"}]},"locations":["Japan"],"latlong":[[35.683333, 139.766667]],"tags":["conflict"]},{"text":"Dreyfuss Affair in France","links": {"main": {"title":"Dreyfuss Affair","link":"//en.wikipedia.org/wiki/Dreyfuss_Affair"},"related":[{"title":"French Third Republic","link":"//en.wikipedia.org/wiki/French_Third_Republic"}]},"locations":["France"],"latlong":[[46.227638, 2.213749]],"tags":["crime","government","internal conflict"]},{"text":"Lombok War. The Dutch looted and destroyed the Cakranegara palace of Mataram. J. L. A. Brandes, a Dutch philologist discovered and secured Nagarakretagama manuscript in Lombok royal library","links": {"main": {"title":"Mataram (city)","link":"//en.wikipedia.org/wiki/Mataram_(city)"},"related":[{"title":"Nagarakretagama","link":"//en.wikipedia.org/wiki/Nagarakretagama"}]},"locations":["Mataram","Indonesia"],"latlong":[[-8.583333, 116.116667]],"tags":["conflict"]}],"1895":[{"text":"Volleyball is invented","links": {"main": {"title":"Volleyball","link":"//en.wikipedia.org/wiki/Volleyball"},"related":[]},"locations":["Holyoke","Massachusetts","United States of America"],"latlong":[[42.204167, -72.616667]],"tags":["sport"]},{"text":"Trial of Oscar Wilde and premiere of his play The Importance of Being Earnest","links": {"main": {"title":"Oscar Wilde","link":"//en.wikipedia.org/wiki/Oscar_Wilde"},"related":[]},"locations":["St James's Theatre","London","United Kingdom"],"latlong":[[51.506667, -0.136944]],"tags":["art","person","crime"]},{"text":"French troops capture Antananarivo in Madagascar","links": {"main": {"title":"Antananarivo","link":"//en.wikipedia.org/wiki/Antananarivo"},"related":[{"title":"Merina Kingdom","link":"//en.wikipedia.org/wiki/Merina_Kingdom"}]},"locations":["Antananarivo","Madagascar"],"latlong":[[-18.933333, 47.516667]],"tags":["conflict"]},{"text":"Wilhelm RÃ¶ntgen identifies x-rays","links": {"main": {"title":"Wilhelm RÃ¶ntgen","link":"//en.wikipedia.org/wiki/Wilhelm_R%C3%B6ntgen"},"related":[{"title":"X-rays","link":"//en.wikipedia.org/wiki/X-rays"}]},"locations":["University of WÃ¼rzburg","WÃ¼rzburg","Germany"],"latlong":[[49.788056, 9.935278]],"tags":["science","technology"]},{"text":"Abyssinia defeats Italy in the First Italo–Ethiopian War","links": {"main": {"title":"Ethiopian Empire","link":"//en.wikipedia.org/wiki/Ethiopian_Empire"},"related":[{"title":"First Italo–Ethiopian War","link":"//en.wikipedia.org/wiki/First_Italo–Ethiopian_War"}]},"locations":["Ethiopia"],"latlong":[[14.018889, 38.973333]],"tags":["conflict"]},{"text":"Cuban War for Independence results in Cuban independence from Spain","links": {"main": {"title":"Cuban War for Independence","link":"//en.wikipedia.org/wiki/Cuban_War_for_Independence"},"related":[{"title":"Spanish Empire","link":"//en.wikipedia.org/wiki/Spanish_Empire"}]},"locations":["Cuba"],"latlong":[[23.133333, -82.383333]],"tags":["conflict"]}],"1896":[{"text":"Olympic Games revived in Athens","links": {"main": {"title":"1896 Summer Olympics","link":"//en.wikipedia.org/wiki/1896_Summer_Olympics"},"related":[{"title":"Olympic Games","link":"//en.wikipedia.org/wiki/Olympic_Games"}]},"locations":["Athens","Greece"],"latlong":[[37.96833, 23.74111]],"tags":["sport","social"]},{"text":"Philippine Revolution ends declaring Philippines free from Spanish rule","links": {"main": {"title":"Philippine Revolution","link":"//en.wikipedia.org/wiki/Philippine_Revolution"},"related":[]},"locations":["Philippines"],"latlong":[[14.583333, 120.966667]],"tags":["internal conflict","government"]},{"text":"Ethiopia defeated Italy at the Battle of Adwa","links": {"main": {"title":"Battle of Adwa","link":"//en.wikipedia.org/wiki/Battle_of_Adwa"},"related":[]},"locations":["Adwa","Ethiopia"],"latlong":[[14.018889, 38.973333]],"tags":["conflict"]},{"text":"Klondike Gold Rush in Canada","links": {"main": {"title":"Klondike Gold Rush","link":"//en.wikipedia.org/wiki/Klondike_Gold_Rush"},"related":[]},"locations":["Dawson City","Klondike","Canada"],"latlong":[[64.056944, -139.436111]],"tags":["economy","social"]},{"text":"Henri Becquerel discovers radioactivity","links": {"main": {"title":"Henri Becquerel","link":"//en.wikipedia.org/wiki/Henri_Becquerel"},"related":[{"title":"Radioactivity","link":"//en.wikipedia.org/wiki/Radioactivity"}]},"locations":["Paris","France"],"latlong":[[48.856614, 2.352222]],"tags":["science"]},{"text":"J. J. Thomson identifies the electron, though not by name","links": {"main": {"title":"J. J. Thomson","link":"//en.wikipedia.org/wiki/J._J._Thomson"},"related":[{"title":"Electron","link":"//en.wikipedia.org/wiki/Electron"}]},"locations":["University of Cambridge","Cambridge","England","United Kingdom"],"latlong":[[52.205278, 0.117222]],"tags":["science"]}],"1897":[{"text":"Gojong, or Emperor Gwangmu, proclaims the short-lived Korean Empire","links": {"main": {"title":"Gojong of Joseon","link":"//en.wikipedia.org/wiki/Gojong_of_Joseon"},"related":[{"title":"Gojong of the Korean Empire","link":"//en.wikipedia.org/wiki/Gojong_of_the_Korean_Empire"},{"title":"Korean Empire","link":"//en.wikipedia.org/wiki/Korean_Empire"}]},"locations":["Korean Empire"],"latlong":[[37.566667, 126.966667]],"tags":["government"]},{"text":"Benin Expedition of 1897 loots and burns Benin","links": {"main": {"title":"Benin Expedition of 1897","link":"//en.wikipedia.org/wiki/Benin_Expedition_of_1897"},"related":[{"title":"Benin","link":"//en.wikipedia.org/wiki/Benin"}]},"locations":["Benin"],"latlong":[[6.466667, 2.6]],"tags":["conflict"]},{"text":"Greco-Turkish War","links": {"main": {"title":"Greco-Turkish War (1897)","link":"//en.wikipedia.org/wiki/Greco-Turkish_War_(1897)"},"related":[]},"locations":["Greece"],"latlong":[[39.6, 22.2]],"tags":["conflict"]},{"text":"Bram Stoker writes Dracula","links": {"main": {"title":"Bram Stoker","link":"//en.wikipedia.org/wiki/Bram_Stoker"},"related":[{"title":"Dracula","link":"//en.wikipedia.org/wiki/Dracula"}]},"locations":["London","United Kingdom"],"latlong":[[51.507351, -0.127758]],"tags":["art"]}],"1898":[{"text":"The United States gains control of Cuba, Puerto Rico, and the Philippines after the Spanish–American War","links": {"main": {"title":"Spanish–American War","link":"//en.wikipedia.org/wiki/Spanish–American_War"},"related":[{"title":"Cuba","link":"//en.wikipedia.org/wiki/Cuba"},{"title":"Puerto Rico","link":"//en.wikipedia.org/wiki/Puerto_Rico"},{"title":"Philippines","link":"//en.wikipedia.org/wiki/Philippines"}]},"locations":["Cuba","Puerto Rico","Philippines"],"latlong":[[23.116667, -82.35], [18.45, -66.1], [14.583333, 120.966667]],"tags":["conflict"]},{"text":"Empress Dowager Cixi of China engineers a coup d'état, marking the end of the Hundred Days' Reform; the Guangxu Emperor is arrested","links": {"main": {"title":"Empress Dowager Cixi","link":"//en.wikipedia.org/wiki/Empress_Dowager_Cixi"},"related":[{"title":"Qing Dynasty","link":"//en.wikipedia.org/wiki/Qing_Dynasty"},{"title":"Hundred Days' Reform","link":"//en.wikipedia.org/wiki/Hundred_Days%27_Reform"},{"title":"Guangxu Emperor","link":"//en.wikipedia.org/wiki/Guangxu_Emperor"}]},"locations":["Forbidden City","Beijing","China"],"latlong":[[39.914722, 116.390556]],"tags":["government","internal conflict"]},{"text":"H. G. Wells publishes The War of the Worlds","links": {"main": {"title":"The War of the Worlds","link":"//en.wikipedia.org/wiki/The_War_of_the_Worlds"},"related":[{"title":"H. G. Wells","link":"//en.wikipedia.org/wiki/H._G._Wells"}]},"locations":["Sandgate","Kent","England","United Kingdom"],"latlong":[[51.074, 1.1454]],"tags":["art"]},{"text":"Empress Elisabeth of Austria is assassinated by anarchist Luigi Lucheni","links": {"main": {"title":"Empress Elisabeth of Austria","link":"//en.wikipedia.org/wiki/Empress_Elisabeth_of_Austria"},"related":[{"title":"Anarchist","link":"//en.wikipedia.org/wiki/Anarchist"},{"title":"Luigi Lucheni","link":"//en.wikipedia.org/wiki/Luigi_Lucheni"}]},"locations":["Territet","Switzerland"],"latlong":[[46.4245, 6.92475]],"tags":["government","person","death","terrorism"]},{"text":"The Boxer Rebellion in China is suppressed by an Eight-Nation Alliance","links": {"main": {"title":"Boxer Rebellion","link":"//en.wikipedia.org/wiki/Boxer_Rebellion"},"related":[{"title":"Eight-Nation Alliance","link":"//en.wikipedia.org/wiki/Eight-Nation_Alliance"}]},"locations":["China"],"latlong":[[35.861660, 104.195397]],"tags":["conflict"]},{"text":"The Thousand Days' War in Colombia breaks out between the 'Liberales' and 'Conservadores', culminating with the loss of Panama in 1903","links": {"main": {"title":"Thousand Days' War","link":"//en.wikipedia.org/wiki/Thousand_Days%27_War"},"related":[{"title":"Colombia","link":"//en.wikipedia.org/wiki/Colombia"},{"title":"Liberalism","link":"//en.wikipedia.org/wiki/Liberalism"},{"title":"Conservatism","link":"//en.wikipedia.org/wiki/Conservatism"},{"title":"Panama","link":"//en.wikipedia.org/wiki/Panama"}]},"locations":["Colombia"],"latlong":[[4.583333, -74.066667]],"tags":["conflict"]},{"text":"General van Heutz becomes chief of staff of Aceh campaign.","links": {"main": {"title":"General van Heutz","link":"//en.wikipedia.org/wiki/General_van_Heutz"},"related":[]},"locations":["Sumatra","Indonesia"],"latlong":[[0,102]],"tags":["conflict"]},{"text":"Wilhelmina becomes queen of the Netherlands","links": {"main": {"title":"Wilhelmina of the Netherlands","link":"//en.wikipedia.org/wiki/Wilhelmina_of_the_Netherlands"},"related":[]},"locations":["Netherlands"],"latlong":[[52.132633, 5.291266]],"tags":["government"]}],"1899":[{"text":"Second Boer War begins","links": {"main": {"title":"Second Boer War","link":"//en.wikipedia.org/wiki/Second_Boer_War"},"related":[]},"locations":["South Africa","British Empire"],"latlong":[[-30.559482, 22.937506], [51.507351, -0.127758]],"tags":["conflict"]},{"text":"Philippine–American War begins","links": {"main": {"title":"Philippine–American War","link":"//en.wikipedia.org/wiki/Philippine–American_War"},"related":[]},"locations":["Philippines"],"latlong":[[23.116667, -82.35], [18.45, -66.1], [14.583333, 120.966667]],"tags":["conflict"]},{"text":"Indian famine kills over 1 million people","links": {"main": {"title":"Indian famine of 1899–1900","link":"//en.wikipedia.org/wiki/Indian_famine_of_1899–1900"},"related":[]},"locations":["India"],"latlong":[[21, 78]],"tags":["natural disaster"]}],"1900":[{"text":"Hawaii becomes an official U.S. territory","links": {"main": {"title":"Hawaii","link":"//en.wikipedia.org/wiki/Hawaii"},"related":[{"title":"United States","link":"//en.wikipedia.org/wiki/United_States"},{"title":"Organized territory","link":"//en.wikipedia.org/wiki/Organized_territory"}]},"locations":["Hawaii"],"latlong":[[21.311389, -157.796389]],"tags":["government"]},{"text":"Galveston Hurricane in Texas kills 8000 people","links": {"main": {"title":"Galveston Hurricane","link":"//en.wikipedia.org/wiki/Galveston_Hurricane"},"related":[{"title":"Texas","link":"//en.wikipedia.org/wiki/Texas"}]},"locations":["Texas"],"latlong":[[29.281111, -94.825833]],"tags":["natural disaster"]},{"text":"L. Frank Baum publishes The Wonderful Wizard of Oz","links": {"main": {"title":"L. Frank Baum","link":"//en.wikipedia.org/wiki/L._Frank_Baum"},"related":[{"title":"The Wonderful Wizard of Oz","link":"//en.wikipedia.org/wiki/The_Wonderful_Wizard_of_Oz"}]},"locations":["Chicago","Illinois","United States of America"],"latlong":[[41.836944, -87.684722]],"tags":["art"]},{"text":"King Umberto I of Italy is assassinated","links": {"main": {"title":"Umberto I of Italy","link":"//en.wikipedia.org/wiki/Umberto_I_of_Italy"},"related":[]},"locations":["Monza","Italy"],"latlong":[[45.583333,9.266667]],"tags":["person","government","death"]},{"text":"Exposition Universelle held in Paris, prominently featuring the growing art trend Art Nouveau","links": {"main": {"title":"Exposition Universelle (1900)","link":"//en.wikipedia.org/wiki/Exposition_Universelle_(1900)"},"related":[{"title":"Art Nouveau","link":"//en.wikipedia.org/wiki/Art_Nouveau"}]},"locations":["Paris","France"],"latlong":[[48.8561,2.2978]],"tags":["technology","art"]},{"text":"Eight nations invaded China at the same time and ransacked Forbidden City","links": {"main": {"title":"Eight-Nation Alliance","link":"//en.wikipedia.org/wiki/Eight-Nation_Alliance"},"related":[{"title":"The Forbidden City","link":"//en.wikipedia.org/wiki/The_Forbidden_City"}]},"locations":["Forbidden City","Beijing","China"],"latlong":[[39.914722, 116.390556]],"tags":["government","conflict"]}],"1901":[{"text":"Australian colonies unified under single government","links": {"main": {"title":"Australia","link":"//en.wikipedia.org/wiki/Australia"}},"locations":["Australia"],"latlong":[[-25.274398, 133.775136]],"tags":["government"]},{"text":"Boxer Rebellion ends","links": {"main": {"title":"Boxer Rebellion","link":"//en.wikipedia.org/wiki/Boxer_Rebellion"}},"locations":["China"],"latlong":[[35.861660, 104.195397]],"tags":["conflict"]},{"text":"Edward VII becomes King of the United Kingdom and the British Dominions and Emperor of India upon the death of Queen Victoria","links": {"main": {"title":"Edward VII","link":"//en.wikipedia.org/wiki/Edward_VII"},"related":[{"title":"British Empire","link":"//en.wikipedia.org/wiki/British_Empire"},{"title":"Queen Victoria","link":"//en.wikipedia.org/wiki/Queen_Victoria"}]},"locations":["British Empire"],"latlong":[[51.507351, -0.127758]],"tags":["government","person"]},{"text":"Platt Amendment limits the autonomy of Cuba in exchange for withdrawal of American troops","links": {"main": {"title":"Platt Amendment","link":"//en.wikipedia.org/wiki/Platt_Amendment"},"related":[{"title":"Cuba","link":"//en.wikipedia.org/wiki/Cuba"}]},"locations":["Cuba","United States of America"],"latlong":[[21.521757, -77.781167], [39.740986, -102.128906]],"tags":["treaty"]},{"text":"Assassination of William McKinley","links": {"main": {"title":"Assassination of William McKinley","link":"//en.wikipedia.org/wiki/Assassination_of_William_McKinley"},"related":[{"title":"William McKinley","link":"//en.wikipedia.org/wiki/William_McKinley"}]},"locations":["New York","United States of America"],"latlong":[[40.712784, -74.005941]],"tags":["person","death"]},{"text":"Emily Hobhouse reports on the terrible conditions in the 45 British concentration camps for Boer women and children in South Africa","links": {"main": {"title":"Emily Hobhouse","link":"//en.wikipedia.org/wiki/Emily_Hobhouse"},"related":[{"title":"Second Boer War","link":"//en.wikipedia.org/wiki/Second_Boer_War"}]},"locations":["South Africa","British Empire"],"latlong":[[-30.559482, 22.937506], [51.507351, -0.127758]],"tags":["conflict"]},{"text":"Guglielmo Marconi receives the first trans-Atlantic radio signal","links": {"main": {"title":"Guglielmo Marconi","link":"//en.wikipedia.org/wiki/Guglielmo_Marconi"},"related":[{"title":"Radio","link":"//en.wikipedia.org/wiki/Radio"}]},"locations":["England","Canada"],"latlong":[[51.507351, -0.127758], [56.130366, -106.346771]],"tags":["technology"]}],"1902":[{"text":"Second Boer War ends","links": {"main": {"title":"Second Boer War","link":"//en.wikipedia.org/wiki/Second_Boer_War"}},"locations":["South Africa","British Empire"],"latlong":[[-30.559482, 22.937506], [51.507351, -0.127758]],"tags":["conflict"]},{"text":"Philippine-American War ends","links": {"main": {"title":"Philippine-American War","link":"//en.wikipedia.org/wiki/Philippine–American_War"}},"locations":["United States of America","First Philippine Republic","Republic of Zamboanga","Sultanate of Sulu"],"latlong":[[39.740986, -102.128906], [10.517518, 123.958740], [6.921442, 122.079027], [5.211306, 118.168945]],"tags":["conflict"]},{"text":"Cuba gains independence from the United States","links": {"main": {"title":"Cuba","link":"//en.wikipedia.org/wiki/Cuba"}},"locations":["Cuba","United States of America"],"latlong":[[21.521757, -77.781167], [39.740986, -102.128906]],"tags":["government"]},{"text":"Willis Carrier invents the first modern electrical air conditioning unit","links": {"main": {"title":"Willis Carrier","link":"//en.wikipedia.org/wiki/Willis_Carrier"},"related":[{"title":"Air conditioning","link":"//en.wikipedia.org/wiki/Air_conditioning"}]},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["technology"]},{"text":"Unification of Saudi Arabia begins","links": {"main": {"title":"Unification of Saudi Arabia","link":"//en.wikipedia.org/wiki/Unification_of_Saudi_Arabia"}},"locations":["Saudi Arabia"],"latlong":[[23.885942, 45.079162]],"tags":["government","conflict"]},{"text":"Venezuela Crisis, in which Britain, Germany and Italy sustain a naval blockade on Venezuela in order to enforce collection of outstanding financial claims","links": {"main": {"title":"Venezuelan Crisis","link":"//en.wikipedia.org/wiki/Venezuelan_crisis_of_1902–03"}},"locations":["Venezuela","United Kingdom","German Empire","Italy"],"latlong":[[6.423750, -66.58973], [51.507351, -0.127758], [51.165691, 10.451526], [41.871940, 12.56738]],"tags":["conflict"]}],"1903":[{"text":"First controlled heavier-than-air flight of the Wright Brothers","links": {"main": {"title":"Wright Brothers","link":"//en.wikipedia.org/wiki/Wright_Brothers"},"related":[{"title":"Wright Flyer","link":"//en.wikipedia.org/wiki/Wright_Flyer"}]},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["technology"]},{"text":"Herero and Namaqua Genocide, the first genocide of the 20th century, begins in German South-West Africa","links": {"main": {"title":"Herero and Namaqua Genocide","link":"//en.wikipedia.org/wiki/Herero_and_Namaqua_Genocide"},"related":[{"title":"German South-West Africa","link":"//en.wikipedia.org/wiki/German_South-West_Africa"},{"title":"Herero people","link":"//en.wikipedia.org/wiki/Herero_people"},{"title":"Nama people","link":"//en.wikipedia.org/wiki/Nama_people"},{"title":"Whitaker Report","link":"//en.wikipedia.org/wiki/Sub-Commission_on_the_Promotion_and_Protection_of_Human_Rights"}]},"locations":["German South-west Africa"],"latlong":[[-22.957640, 18.49041]],"tags":["conflict"]},{"text":"In Russia the Bolsheviks and the Mensheviks form from the breakup of the Russian Social Democratic Labor Party","links": {"main": {"title":"Bolsheviks","link":"//en.wikipedia.org/wiki/Bolsheviks"},"related":[{"title":"Mensheviks","link":"//en.wikipedia.org/wiki/Mensheviks"},{"title":"Russian Social Democratic Labour Party","link":"//en.wikipedia.org/wiki/Russian_Social_Democratic_Labour_Party"}]},"locations":["Russia"],"latlong":[[61.524010, 105.318756]],"tags":["government"]},{"text":"Pius X becomes Pope","links": {"main": {"title":"Pius X","link":"//en.wikipedia.org/wiki/Pope_Pius_X"}},"locations":["Italy","Vatican City"],"latlong":[[41.902916, 12.453389]],"tags":["person","religion"]},{"text":"The teddy bear is invented","links": {"main": {"title":"Teddy bear","link":"//en.wikipedia.org/wiki/Teddy_bear"}},"locations":["Germany","United States of America"],"latlong":[[51.165691, 10.451526], [39.740986, -102.128906]],"tags":["toys"]},{"text":"The first Tour de France is held","links": {"main": {"title":"Tour de France","link":"//en.wikipedia.org/wiki/Tour_de_France"}},"locations":["France"],"latlong":[[46.227638, 2.213749]],"tags":["sport"]},{"text":"Independence of Panama, the Hay-Bunau-Varilla Treaty is signed by the United States and Panama","links": {"main": {"title":"Hay-Bunau-Varilla Treaty","link":"//en.wikipedia.org/wiki/Hay–Bunau-Varilla_Treaty"},"related":[{"title":"Panama","link":"//en.wikipedia.org/wiki/Panama"}]},"locations":["United States of America","Panama"],"latlong":[[39.740986, -102.128906], [8.537981, -80.782127]],"tags":["government","treaty"]},{"text":"The Ottoman Empire and the German Empire sign an agreement to build the Constantinople-Baghdad Railway","links": {"main": {"title":"Constantinople-Baghdad Railway","link":"//en.wikipedia.org/wiki/Baghdad_Railway"}},"locations":["Ottoman Empire","German Empire"],"latlong":[[38.963745, 35.243322], [51.165691, 10.451526]],"tags":["technology","transport"]}],"1904":[{"text":"Entente Cordiale signed between Britain and France","links": {"main": {"title":"Entente Cordiale","link":"//en.wikipedia.org/wiki/Entente_Cordiale"}},"locations":["France","United Kingdom","Germany","Austria-hungry"],"latlong":[[46.227638, 2.213749], [51.507351, -0.127758], [51.165691, 10.451526], [48.188274, 16.309632]],"tags":["treaty","ww1"]},{"text":"A Japanese surprise attack on Port Arthur (Lushun) starts the Russo-Japanese War","links": {"main": {"title":"Russo-Japanese War","link":"//en.wikipedia.org/wiki/Russo-Japanese_War"}},"locations":["Empire of Japan","Russia"],"latlong":[[36.204824, 138.252924], [61.524010, 105.318756]],"tags":["conflict"]},{"text":"Trans-Siberian railway is completed","links": {"main": {"title":"Trans-Siberian Railway","link":"//en.wikipedia.org/wiki/Trans-Siberian_Railway"}},"locations":["Russia"],"latlong":[[61.524010, 105.318756]],"tags":["technology","transport"]},{"text":"Construction of the Panama Canal begins","links": {"main": {"title":"Panama Canal","link":"//en.wikipedia.org/wiki/Panama_Canal"}},"locations":["Panama"],"latlong":[[8.537981, -80.782127]],"tags":["technology"]},{"text":"Roger Casement publishes his account of Belgian atrocities in the Congo Free State","links": {"main": {"title":"Roger Casement","link":"//en.wikipedia.org/wiki/Roger_Casement"},"related":[{"title":"Casement Report","link":"//en.wikipedia.org/wiki/Casement_Report"}]},"locations":["Congo Free State","Belgium"],"latlong":[[-0.228021, 15.827659], [50.503887, 4.469936]],"tags":["person","conflict"]},{"text":"End of British expedition to Tibet","links": {"main": {"title":"British Expedition to Tibet","link":"//en.wikipedia.org/wiki/British_expedition_to_Tibet"}},"locations":["British Empire","Qing Empire","Tibet"],"latlong":[[51.507351, -0.127758], [29.646923, 91.117212]],"tags":["conflict"]}],"1905":[{"text":"Russo-Japanese War ends","links": {"main": {"title":"Russo-Japanese War","link":"//en.wikipedia.org/wiki/Russo-Japanese_War"}},"locations":["Empire of Japan","Russia"],"latlong":[[36.204824, 138.252924], [61.524010, 105.318756]],"tags":["conflict"]},{"text":"Revolution of 1905 in Russia","links": {"main": {"title":"Revolution of 1905","link":"//en.wikipedia.org/wiki/Revolution_of_1905"}},"locations":["Russia"],"latlong":[[61.524010, 105.318756]],"tags":["conflict"]},{"text":"Persian Constitutional Revolution begins","links": {"main": {"title":"Persian Constitutional Revolution","link":"//en.wikipedia.org/wiki/Persian_Constitutional_Revolution"}},"locations":["Persia","Armenian Revolutionary Federation","Russia"],"latlong":[[32.427908, 53.688046], [40.069099, 45.038189], [61.524010, 105.318756]],"tags":["conflict"]},{"text":"Trans-Siberian Railway opened","links": {"main": {"title":"Trans-Siberian Railway","link":"//en.wikipedia.org/wiki/Trans-Siberian_Railway"}},"locations":["Russia"],"latlong":[[61.524010, 105.318756]],"tags":["technology","transport"]},{"text":"Albert Einstein's formulation of relativity","links": {"main": {"title":"Albert Einstein","link":"//en.wikipedia.org/wiki/Albert_Einstein"},"related":[{"title":"Annus Mirabilis papers","link":"//en.wikipedia.org/wiki/Annus_Mirabilis_papers"},{"title":"Theory of Relativity","link":"//en.wikipedia.org/wiki/Theory_of_relativity"}]},"locations":["Switzerland"],"latlong":[[46.818188, 8.227512]],"tags":["science","person"]},{"text":"Schlieffen Plan proposed","links": {"main": {"title":"Schlieffen Plan","link":"//en.wikipedia.org/wiki/Schlieffen_Plan"}},"locations":["Germany"],"latlong":[[51.165691, 10.451526]],"tags":["government","ww1"]},{"text":"The British Indian Province of Bengal, was partitioned by the Viceroy of India, Lord Curzon","links": {"main": {"title":"Partition of Bengal","link":"//en.wikipedia.org/wiki/Partition_of_Bengal_(1905)"},"related":[{"title":"Lord Curzon","link":"//en.wikipedia.org/wiki/George_Curzon,_1st_Marquess_Curzon_of_Kedleston"}]},"locations":["Bengal"],"latlong":[[22.986757, 87.854976]],"tags":["government"]},{"text":"First Moroccan Crisis","links": {"main": {"title":"First Moroccan Crisis","link":"//en.wikipedia.org/wiki/First_Moroccan_Crisis"}},"locations":["Morocco"],"latlong":[[31.791702, -7.09262]],"tags":["ww1"]},{"text":"The Norwegian Parliament declares the union with Sweden dissolved, and Norway achieves full independence","links": {"main": {"title":"Dissolution of the union between Norway and Sweden","link":"//en.wikipedia.org/wiki/Dissolution_of_the_union_between_Norway_and_Sweden"},"related":[{"title":"Storting","link":"//en.wikipedia.org/wiki/Storting"}]},"locations":["Sweden","Norway"],"latlong":[[60.128161, 18.643501], [60.472024, 8.468946]],"tags":["government"]}],"1906":[{"text":"Earthquake in San Francisco, California (death toll: 3000)","links": {"main": {"title":"1906 San Francisco earthquake","link":"//en.wikipedia.org/wiki/1906_San_Francisco_earthquake"}},"locations":["United States of America","San Francisco"],"latlong":[[37.774929, -122.419416]],"tags":["natural disaster"]},{"text":"Earthquake in Valparaíso, Chile (death toll: 20,000) occur","links": {"main": {"title":"1906 Valparaíso earthquake","link":"//en.wikipedia.org/wiki/1906_Valpara%C3%ADso_earthquake"}},"locations":["Chile","Valparaíso"],"latlong":[[-33.047238, -71.612688]],"tags":["natural disaster"]},{"text":"Dreyfus Affair ends","links": {"main": {"title":"Dreyfus Affair","link":"//en.wikipedia.org/wiki/Dreyfus_affair"},"related":[{"title":"Alfred Dreyfus","link":"//en.wikipedia.org/wiki/Alfred_Dreyfus"}]},"locations":["France"],"latlong":[[46.227638, 2.213749]],"tags":["person","government"]},{"text":"Stolypin reform in Russia creates a new class of affluent kulaks","links": {"main": {"title":"Stolypin reform","link":"//en.wikipedia.org/wiki/Stolypin_reform"},"related":[{"title":"Kulak","link":"//en.wikipedia.org/wiki/Kulak"}]},"locations":["Russia"],"latlong":[[61.524010, 105.318756]],"tags":["government"]},{"text":"Brazilian inventor Alberto Santos-Dumont takes off and flies his 14-bis to a crowd in Paris","links": {"main": {"title":"Alberto Santos-Dumont","link":"//en.wikipedia.org/wiki/Alberto_Santos-Dumont"},"related":[{"title":"Santos-Dumont 14-bis","link":"//en.wikipedia.org/wiki/Santos-Dumont_14-bis"}]},"locations":["Paris","France"],"latlong":[[48.856614, 2.352222]],"tags":["technology"]},{"text":"Death of Paul Cézanne","links": {"main": {"title":"Paul Cézanne","link":"//en.wikipedia.org/wiki/Paul_C%C3%A9zanne"}},"locations":["France"],"latlong":[[46.227638, 2.213749]],"tags":["art","person"]},{"text":"The Muslim League is formed by Nawab Salimullah Khan of Dacca","links": {"main": {"title":"All-India Muslim League","link":"//en.wikipedia.org/wiki/All-India_Muslim_League"},"related":[{"title":"Khwaja Salimullah","link":"//en.wikipedia.org/wiki/Khwaja_Salimullah"},{"title":"Dhaka","link":"//en.wikipedia.org/wiki/Dhaka"}]},"locations":["India"],"latlong":[[20.593684, 78.96288]],"tags":["religion","government"]},{"text":"The US began the Second Occupation of Cuba","links": {"main": {"title":"Second Occupation of Cuba","link":"//en.wikipedia.org/wiki/Second_Occupation_of_Cuba"}},"locations":["Cuba","United States of America"],"latlong":[[21.521757, -77.781167], [39.740986, -102.128906]],"tags":["conflict"]}],"1907":[{"text":"Herero and Namaqua Genocide ends","links": {"main": {"title":"Herero and Namaqua Genocide","link":"//en.wikipedia.org/wiki/Herero_and_Namaqua_Genocide"},"related":[{"title":"German South-West Africa","link":"//en.wikipedia.org/wiki/German_South-West_Africa"},{"title":"Herero people","link":"//en.wikipedia.org/wiki/Herero_people"},{"title":"Nama people","link":"//en.wikipedia.org/wiki/Nama_people"},{"title":"Whitaker Report","link":"//en.wikipedia.org/wiki/Sub-Commission_on_the_Promotion_and_Protection_of_Human_Rights"}]},"locations":["German South-west Africa"],"latlong":[[-22.957640, 18.49041]],"tags":["conflict"]},{"text":"A peasants' revolt in Romania kills roughly 11,000","links": {"main": {"title":"1907 Romanian Peasants' revolt","link":"//en.wikipedia.org/wiki/1907_Romanian_Peasants%27_revolt"}},"locations":["Moldavia","Romania"],"latlong":[[47.411631, 28.369885]],"tags":["conflict"]},{"text":"The Indian National Congress splits into two factions at its Surat session, presided by Rash Behari Bose","links": {"main": {"title":"Indian National Congress","link":"//en.wikipedia.org/wiki/Indian_National_Congress"},"related":[{"title":"Rash Behari Bose","link":"//en.wikipedia.org/wiki/Rash_Behari_Bose"}]},"locations":["Surat","India"],"latlong":[[21.170240, 72.831061]],"tags":["government"]},{"text":"Persian Constitutional Revolution ends with the establishment of a parliament","links": {"main": {"title":"Persian Constitutional Revolution","link":"//en.wikipedia.org/wiki/Persian_Constitutional_Revolution"}},"locations":["Persia","Armenian Revolutionary Federation","Russia"],"latlong":[[32.427908, 53.688046], [40.069099, 45.038189], [61.524010, 105.318756]],"tags":["conflict"]},{"text":"Japan-Korea Treaty of 1907","links": {"main": {"title":"Japan-Korea Treaty of 1907","link":"//en.wikipedia.org/wiki/Japan–Korea_Treaty_of_1907"}},"locations":["Empire of Japan","Korean Empire"],"latlong":[[36.204824, 138.252924], [35.907757, 127.766922]],"tags":["treaty","government"]},{"text":"The Anglo-Russian Entente bring a pause in The Great Game in Central Asia","links": {"main": {"title":"Anglo-Russian Entente","link":"//en.wikipedia.org/wiki/Anglo-Russian_Entente"},"related":[{"title":"The Great Game","link":"//en.wikipedia.org/wiki/The_Great_Game"}]},"locations":["Great Britain","Russia"],"latlong":[[51.507351, -0.127758], [61.524010, 105.318756]],"tags":["government","treaty","ww1"]},{"text":"Elections to the new Parliament of Finland are the first in the world with woman candidates, as well as the first elections in Europe where universal suffrage is applied","links": {"main": {"title":"Parliament of Finland","link":"//en.wikipedia.org/wiki/Parliament_of_Finland"},"related":[{"title":"Universal suffrage","link":"//en.wikipedia.org/wiki/Universal_suffrage"}]},"locations":["Finland"],"latlong":[[61.924110, 25.748151]],"tags":["government","equality"]}],"1908":[{"text":"The Ford Motor Company invents the Model T","links": {"main": {"title":"Ford Motor Company","link":"//en.wikipedia.org/wiki/Ford_Motor_Company"},"related":[{"title":"Ford Model T","link":"//en.wikipedia.org/wiki/Ford_Model_T"}]},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["technology","transport"]},{"text":"First commercial Middle-Eastern oilfield established, at Masjed Soleyman in southwest Persia","links": {"main": {"title":"William Knox D'Arcy","link":"//en.wikipedia.org/wiki/William_Knox_D%27Arcy"},"related":[{"title":"Mozaffar ad-Din Shah Qajar","link":"//en.wikipedia.org/wiki/Mozaffar_ad-Din_Shah_Qajar"}]},"locations":["Masjed Soleyman","Iran"],"latlong":[[31.936389, 49.303889]],"tags":["technology"]},{"text":"The Tunguska impact devastates thousands of square kilometres of Siberia","links": {"main": {"title":"Tunguska event","link":"//en.wikipedia.org/wiki/Tunguska_event"}},"locations":["Tunguska","Russia"],"latlong":[[61.594400, 90.1333]],"tags":["natural disaster"]},{"text":"Young Turk Revolution in the Ottoman Empire","links": {"main": {"title":"Young Turk Revolution","link":"//en.wikipedia.org/wiki/Young_Turk_Revolution"},"related":[{"title":"Young Turks","link":"//en.wikipedia.org/wiki/Young_Turks"}]},"locations":["Ottoman Empire"],"latlong":[[38.963745, 35.243322]],"tags":["conflict"]},{"text":"Independence of Bulgaria","links": {"main": {"title":"Bulgaria","link":"//en.wikipedia.org/wiki/Bulgaria"}},"locations":["Bulgaria"],"latlong":[[42.733883, 25.48583]],"tags":["government","ww1"]},{"text":"Austro-Hungary annexes Bosnia-Herzegovina, triggering the Bosnian Crisis","links": {"main": {"title":"Bosnian crisis","link":"//en.wikipedia.org/wiki/Bosnian_crisis"},"related":[{"title":"Austria-Hungary","link":"//en.wikipedia.org/wiki/Austria-Hungary"},{"title":"Bosnia and Herzegovina","link":"//en.wikipedia.org/wiki/Bosnia_and_Herzegovina"}]},"locations":["Ottoman Empire","Austria-hungary","Bosnia And Herzegovina"],"latlong":[[38.963745, 35.243322], [48.188274, 16.309632], [43.915886, 17.679076]],"tags":["government","conflict","ww1"]},{"text":"Pu Yi, the last Emperor of China, assumes the throne","links": {"main": {"title":"Pu yi","link":"//en.wikipedia.org/wiki/Puyi"}},"locations":["China"],"latlong":[[35.861660, 104.195397]],"tags":["person"]},{"text":"1908 Messina earthquake kills over 70,000 people","links": {"main": {"title":"1908 Messina earthquake","link":"//en.wikipedia.org/wiki/1908_Messina_earthquake"}},"locations":["Messina","Sicily","Italy"],"latlong":[[38.193814, 15.554015]],"tags":["natural disaster"]},{"text":"Start of publication of Robert Baden-Powell's Scouting for Boys in London","links": {"main": {"title":"Robert Baden-Powell, 1st Baron Baden-Powell","link":"//en.wikipedia.org/wiki/Robert_Baden-Powell,1st_Baron_Baden-Powell"},"related":[{"title":"Scouting for Boys","link":"//en.wikipedia.org/wiki/Scouting_for_Boys"}]},"locations":["London","United Kingdom"],"latlong":[[51.507351, -0.127758]],"tags":["person"]}],"1909":[{"text":"United States troops leave Cuba","links": {"main": {"title":"Second Occupation of Cuba","link":"//en.wikipedia.org/wiki/Second_Occupation_of_Cuba"}},"locations":["Cuba","United States of America"],"latlong":[[21.521757, -77.781167], [39.740986, -102.128906]],"tags":["conflict"]},{"text":"Bosnian crisis ends with Austro-Hungary's annexation of Bosnia and Herzegovina","links": {"main": {"title":"Bosnian crisis","link":"//en.wikipedia.org/wiki/Bosnian_crisis"},"related":[{"title":"Austria-Hungary","link":"//en.wikipedia.org/wiki/Austria-Hungary"},{"title":"Bosnia and Herzegovina","link":"//en.wikipedia.org/wiki/Bosnia_and_Herzegovina"}]},"locations":["Ottoman Empire","Austria-hungary","Bosnia And Herzegovina"],"latlong":[[38.963745, 35.243322], [48.188274, 16.309632], [43.915886, 17.679076]],"tags":["government","conflict","ww1"]},{"text":"Robert Peary claims to have reached the North Pole though the claim is subsequently heavily contested","links": {"main": {"title":"Robert Peary","link":"//en.wikipedia.org/wiki/Robert_Peary"},"related":[{"title":"North Pole","link":"//en.wikipedia.org/wiki/North_Pole"}]},"locations":["North Pole"],"latlong":[[90.000000, 0]],"tags":["exploration","person"]},{"text":"Anglo-Siamese Treaty of 1909","links": {"main": {"title":"Anglo-Siamese Treaty of 1909","link":"//en.wikipedia.org/wiki/Anglo-Siamese_Treaty_of_1909"},"related":[{"title":"Kingdom of Siam","link":"//en.wikipedia.org/wiki/Thailand"}]},"locations":["Thailand","United Kingdom","Bangkok"],"latlong":[[51.507351, -0.127758], [13.756331, 100.501765]],"tags":["treaty","government"]},{"text":"Ottoman countercoup fails in the Ottoman Empire","links": {"main": {"title":"Ottoman countercoup of 1909","link":"//en.wikipedia.org/wiki/Ottoman_countercoup_of_1909"},"related":[{"title":"Young Turks","link":"//en.wikipedia.org/wiki/Young_Turks"}]},"locations":["Ottoman Empire"],"latlong":[[38.963745, 35.243322]],"tags":["internal conflict","government"]},{"text":"A revolution forces Mohammad Ali Shah, Persian Shah of the Qajar dynasty to abdicate in favor of his son Ahmad Shah Qajar","links": {"main": {"title":"Mohammad Ali Shah Qajar","link":"//en.wikipedia.org/wiki/Mohammad_Ali_Shah_Qajar"},"related":[{"title":"Ahmad Shah Qajar","link":"//en.wikipedia.org/wiki/Ahmad_Shah_Qajar"},{"title":"Qajar dynasty","link":"//en.wikipedia.org/wiki/Qajar_dynasty"}]},"locations":["Iran"],"latlong":[[32.427908, 53.688046]],"tags":["conflict"]},{"text":"Japan and China sign the Jiandao/Gando Treaty","links": {"main": {"title":"Gando Convention","link":"//en.wikipedia.org/wiki/Gando_Convention"}},"locations":["Japan","China"],"latlong":[[36.204824, 138.252924], [35.861660, 104.195397]],"tags":["treaty"]}],"1910":[{"text":"First commercial radio transmissions","links": {"main": {"title":"Birth of public radio broadcasting","link":"//en.wikipedia.org/wiki/Birth_of_public_radio_broadcasting"}},"locations":["New York","United States of America"],"latlong":[[40.712784, -74.005941]],"tags":["technology"]},{"text":"Beginning of the Mexican Revolution","links": {"main": {"title":"Mexican Revolution","link":"//en.wikipedia.org/wiki/Mexican_Revolution"}},"locations":["Mexico"],"latlong":[[23.634501, -102.552784]],"tags":["conflict"]},{"text":"George V becomes King of the United Kingdom and the British Dominions and Emperor of India","links": {"main": {"title":"George V","link":"//en.wikipedia.org/wiki/George_V"}},"locations":["Great Britain"],"latlong":[[51.507351, -0.127758]],"tags":["person"]},{"text":"Union of South Africa created","links": {"main": {"title":"Union of South Africa","link":"//en.wikipedia.org/wiki/Union_of_South_Africa"}},"locations":["South Africa"],"latlong":[[-30.559482, 22.937506]],"tags":["government"]},{"text":"5 October 1910 revolution in Portugal and proclamation of the First Portuguese Republic","links": {"main": {"title":"5 October 1910 Revolution","link":"//en.wikipedia.org/wiki/5_October_1910_revolution"},"related":[{"title":"First Portuguese Republic","link":"//en.wikipedia.org/wiki/First_Portuguese_Republic"}]},"locations":["Portugal"],"latlong":[[39.399872, -8.224454]],"tags":["conflict","government"]},{"text":"Leo Tolstoy Dies","links": {"main": {"title":"Leo Tolstoy","link":"//en.wikipedia.org/wiki/Leo_Tolstoy"},"related":[{"title":"War and Peace","link":"//en.wikipedia.org/wiki/War_and_Peace"},{"title":"Anna Karenina","link":"//en.wikipedia.org/wiki/Anna_Karenina"}]},"locations":["Russia"],"latlong":[[61.524010, 105.318756]],"tags":["person","death"]},{"text":"Mark Twain Dies","links": {"main": {"title":"Mark Twain","link":"//en.wikipedia.org/wiki/Mark_Twain"},"related":[{"title":"The Adventures of Tom Sawyer","link":"//en.wikipedia.org/wiki/The_Adventures_of_Tom_Sawyer"},{"title":"Adventures of Huckleberry Finn","link":"//en.wikipedia.org/wiki/Adventures_of_Huckleberry_Finn"}]},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["person","death"]},{"text":"Imperial Japan annexes Korea","links": {"main": {"title":"Japan-Korea Treaty of 1910","link":"//en.wikipedia.org/wiki/Japan–Korea_Treaty_of_1910"}},"locations":["Empire of Japan","Korean Empire"],"latlong":[[36.204824, 138.252924], [35.907757, 127.766922]],"tags":["treaty"]},{"text":"Boy Scouts of America is founded","links": {"main": {"title":"Boy Scouts of America","link":"//en.wikipedia.org/wiki/Boy_Scouts_of_America"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["social"]},{"text":"Halley's Comet returns","links": {"main": {"title":"Halley's Comet","link":"//en.wikipedia.org/wiki/Halley%27s_Comet"}},"locations":[""],"latlong":[],"tags":["space","science"]},{"text":"Montenegro is proclaimed an independent kingdom","links": {"main": {"title":"Kingdom of Montenegro","link":"//en.wikipedia.org/wiki/Kingdom_of_Montenegro"}},"locations":["Montenegro"],"latlong":[[42.708678, 19.37439]],"tags":["government"]},{"text":"Albanian Revolt of 1910","links": {"main": {"title":"Albanian Revolt of 1910","link":"//en.wikipedia.org/wiki/Albanian_Revolt_of_1910"}},"locations":["Ottoman Empire"],"latlong":[[38.963745, 35.243322]],"tags":["conflict"]}],"1911":[{"text":"Xinhai Revolution in China overthrows the Qing Dynasty","links": {"main": {"title":"Xinhai Revolution","link":"//en.wikipedia.org/wiki/Xinhai_Revolution"},"related":[{"title":"Wuchang Uprising","link":"//en.wikipedia.org/wiki/Wuchang_Uprising"},{"title":"Railway Protection Movement","link":"//en.wikipedia.org/wiki/Railway_Protection_Movement"}]},"locations":["China"],"latlong":[[35.861660, 104.195397]],"tags":["conflict"]},{"text":"Roald Amundsen first reaches the South Pole","links": {"main": {"title":"Roald Amundsen","link":"//en.wikipedia.org/wiki/Roald_Amundsen"},"related":[{"title":"South Pole","link":"//en.wikipedia.org/wiki/South_Pole"}]},"locations":["South Pole"],"latlong":[[-90.000000, 0]],"tags":["exploration","person"]},{"text":"Triangle Shirtwaist Factory fire results in the deaths of 146 workers and leads to sweeping workplace safety reforms","links": {"main": {"title":"Triangle Shirtwaist Factory fire","link":"//en.wikipedia.org/wiki/Triangle_Shirtwaist_Factory_fire"},"related":[{"title":"American Society of Safety Engineers","link":"//en.wikipedia.org/wiki/American_Society_of_Safety_Engineers"},{"title":"International Ladies' Garment Workers' Union","link":"//en.wikipedia.org/wiki/International_Ladies%27_Garment_Workers%27_Union"}]},"locations":["New York","United States of America"],"latlong":[[40.712784, -74.005941]],"tags":["death","equality","disaster"]},{"text":"New Delhi becomes the capital of British India","links": {"main": {"title":"New Delhi","link":"//en.wikipedia.org/wiki/New_Delhi"},"related":[{"title":"Presidencies and provinces of British India","link":"//en.wikipedia.org/wiki/Presidencies_and_provinces_of_British_India"}]},"locations":["New Delhi","India"],"latlong":[[28.613939, 77.209021]],"tags":["government"]},{"text":"Ernest Rutherford identifies the atomic nucleus","links": {"main": {"title":"Ernest Rutherford","link":"//en.wikipedia.org/wiki/Ernest_Rutherford"},"related":[{"title":"Atomic nucleus","link":"//en.wikipedia.org/wiki/Atomic_nucleus"},{"title":"Rutherford model","link":"//en.wikipedia.org/wiki/Rutherford_model"},{"title":"Geiger-Marsden experiment","link":"//en.wikipedia.org/wiki/Geiger–Marsden_experiment"}]},"locations":["Manchester","United Kingdom"],"latlong":[[53.480759, -2.242631]],"tags":["science","person"]},{"text":"The Italo-Turkish war leads to the capture of Libya by Italy","links": {"main": {"title":"Italo-Turkish War","link":"//en.wikipedia.org/wiki/Italo-Turkish_War"}},"locations":["Ottoman Empire","Kingdom of Italy"],"latlong":[[38.963745, 35.243322], [41.871940, 12.56738]],"tags":["conflict"]},{"text":"Eugene Ely lands on the deck of the USS Pennsylvania stationed in San Francisco harbor, marking the first time an aircraft lands on a ship","links": {"main": {"title":"Eugene Burton Ely","link":"//en.wikipedia.org/wiki/Eugene_Burton_Ely"},"related":[{"title":"Curtiss Model D","link":"//en.wikipedia.org/wiki/Curtiss_Model_D"},{"title":"USS Pennsylvania (ACR-4)","link":"//en.wikipedia.org/wiki/USS_Pennsylvania_(ACR-4)"}]},"locations":["San Francisco","United States of America"],"latlong":[[37.774929, -122.419416]],"tags":["person","technology","transport"]},{"text":"Agadir Crisis","links": {"main": {"title":"Agadir Crisis","link":"//en.wikipedia.org/wiki/Agadir_Crisis"}},"locations":["German Empire","United Kingdom","France","Morocco"],"latlong":[[51.165691, 10.451526], [51.507351, -0.127758], [46.227638, 2.213749], [31.791702, -7.09262]],"tags":["conflict","ww1"]}],"1912":[{"text":"End of the Chinese Empire; Republic of China established","links": {"main": {"title":"Republic of China (1912-49)","link":"//en.wikipedia.org/wiki/Republic_of_China_(1912–49)"}},"locations":["China"],"latlong":[[35.861660, 104.195397]],"tags":["government"]},{"text":"The African National Congress is founded","links": {"main": {"title":"African National Congress","link":"//en.wikipedia.org/wiki/African_National_Congress"}},"locations":["South Africa"],"latlong":[[-30.559482, 22.937506]],"tags":["government"]},{"text":"Morocco becomes a protectorate of France","links": {"main": {"title":"French protectorate in Morocco","link":"//en.wikipedia.org/wiki/French_protectorate_in_Morocco"},"related":[{"title":"Treaty of Fes","link":"//en.wikipedia.org/wiki/Treaty_of_Fes"},{"title":"Morocco","link":"//en.wikipedia.org/wiki/Morocco"},{"title":"Protectorate","link":"//en.wikipedia.org/wiki/Protectorate"}]},"locations":["Morocco","France"],"latlong":[[31.791702, -7.09262], [46.227638, 2.213749]],"tags":["government","treaty"]},{"text":"Sinking of the RMS Titanic","links": {"main": {"title":"RMS Titanic","link":"//en.wikipedia.org/wiki/RMS_Titanic"},"related":[{"title":"Wreck of the RMS Titanic","link":"//en.wikipedia.org/wiki/Wreck_of_the_RMS_Titanic"},{"title":"Changes in safety practices after the sinking of the RMS Titanic","link":"//en.wikipedia.org/wiki/Changes_in_safety_practices_after_the_sinking_of_the_RMS_Titanic"},{"title":"UNESCO Convention on the Protection of the Underwater Cultural Heritage","link":"//en.wikipedia.org/wiki/UNESCO_Convention_on_the_Protection_of_the_Underwater_Cultural_Heritage"}]},"locations":["Belfast","Ireland","Southampton","United Kingdom","New York","United States of America"],"latlong":[[54.597285, -5.93012], [50.909700, -1.404351], [40.712784, -74.005941]],"tags":["death","disaster","transport"]},{"text":"First Balkan War begin","links": {"main": {"title":"First Balkan War","link":"//en.wikipedia.org/wiki/First_Balkan_War"}},"locations":["Ottoman Empire","Balkan League"],"latlong":[[38.963745, 35.243322]],"tags":["conflict"]},{"text":"Woodrow Wilson is elected 28th President of the United States","links": {"main": {"title":"Woodrow Wilson","link":"//en.wikipedia.org/wiki/Woodrow_Wilson"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["person","government"]},{"text":"Arizona becomes the last state to be admitted to the continental Union","links": {"main": {"title":"Arizona","link":"//en.wikipedia.org/wiki/Arizona"},"related":[{"title":"Constitution of Arizona","link":"//en.wikipedia.org/wiki/Constitution_of_Arizona"}]},"locations":["Arizona","United States of America"],"latlong":[[34.048928, -111.093731]],"tags":["government","treaty"]},{"text":"United States occupation of Nicaragua begins","links": {"main": {"title":"United States occupation of Nicaragua","link":"//en.wikipedia.org/wiki/United_States_occupation_of_Nicaragua"}},"locations":["Nicaragua","United States of America"],"latlong":[[12.865416, -85.207229], [39.740986, -102.128906]],"tags":["conflict"]},{"text":"The Kuomintang, the Chinese nationalist party, is founded","links": {"main": {"title":"Kuomintang","link":"//en.wikipedia.org/wiki/Kuomintang"}},"locations":["China"],"latlong":[[35.861660, 104.195397]],"tags":["government"]}],"1913":[{"text":"Niels Bohr formulates the first cohesive model of the atomic nucleus, and in the process paves the way to quantum mechanics","links": {"main": {"title":"Niels Bohr","link":"//en.wikipedia.org/wiki/Niels_Bohr"},"related":[{"title":"Bohr model","link":"//en.wikipedia.org/wiki/Bohr_model"},{"title":"Rydberg formula","link":"//en.wikipedia.org/wiki/Rydberg_formula"}]},"locations":["Manchester","United Kingdom"],"latlong":[[53.480759, -2.242631]],"tags":["person","science"]},{"text":"In the 1913 Ottoman coup d'état, Ismail Enver comes to power","links": {"main": {"title":"1913 Ottoman coup d'état","link":"//en.wikipedia.org/wiki/1913_Ottoman_coup_d%27%C3%A9tat"},"related":[{"title":"Ismail Enver Pasha","link":"//en.wikipedia.org/wiki/Enver_Pasha"},{"title":"Talaat Pasha","link":"//en.wikipedia.org/wiki/Talaat_Pasha"}]},"locations":["Ottoman Empire"],"latlong":[[38.963745, 35.243322]],"tags":["internal conflict","government"]},{"text":"Ford Motor Company introduces the first moving assembly line","links": {"main": {"title":"Ford Motor Company","link":"//en.wikipedia.org/wiki/Ford_Motor_Company"},"related":[{"title":"Assembly line","link":"//en.wikipedia.org/wiki/Assembly_line"}]},"locations":["Michigan","United States of America"],"latlong":[[44.314844, -85.602364]],"tags":["technology"]},{"text":"La Decena Trágica (Ten Tragic Days) takes place during the Mexican Revolution","links": {"main": {"title":"Ten Tragic Days","link":"//en.wikipedia.org/wiki/Ten_Tragic_Days"},"related":[{"title":"Francisco I. Madero","link":"//en.wikipedia.org/wiki/Francisco_I._Madero"},{"title":"Victoriano Huerta","link":"//en.wikipedia.org/wiki/Victoriano_Huerta"},{"title":"Pedro Lascuráin","link":"//en.wikipedia.org/wiki/Pedro_Lascuráin"}]},"locations":["Mexico"],"latlong":[[23.634501, -102.552784]],"tags":["conflict","government"]},{"text":"Yuan Shikai uses military force to dissolve China's parliament and rules as a dictator","links": {"main": {"title":"Yuan Shikai","link":"//en.wikipedia.org/wiki/Yuan_Shikai"}},"locations":["China"],"latlong":[[35.861660, 104.195397]],"tags":["government","person"]},{"text":"Igor Stravinsky's The Rite of Spring infamously premiers in Paris","links": {"main": {"title":"Igor Stravinsky","link":"//en.wikipedia.org/wiki/Igor_Stravinsky"},"related":[{"title":"The Rite of Spring","link":"//en.wikipedia.org/wiki/The_Rite_of_Spring"}]},"locations":["Paris","France"],"latlong":[[48.856614, 2.352222]],"tags":["art","person"]},{"text":"First Balkan War Ends, Treaty of London Signed, Second Balkan War and Treaty of Bucharest","links": {"main": {"title":"First Balkan War","link":"//en.wikipedia.org/wiki/First_Balkan_War"},"related":[{"title":"Treaty of London (1913)","link":"//en.wikipedia.org/wiki/Treaty_of_London_(1913)"},{"title":"Second Balkan War","link":"//en.wikipedia.org/wiki/Second_Balkan_War"},{"title":"Treaty of Bucharest (1913)","link":"//en.wikipedia.org/wiki/Treaty_of_Bucharest_(1913)"}]},"locations":["Ottoman Empire","Balkan League"],"latlong":[[38.963745, 35.243322]],"tags":["conflict","treaty","government"]},{"text":"The Federal Reserve System is created","links": {"main": {"title":"Federal Reserve System","link":"//en.wikipedia.org/wiki/Federal_Reserve_System"},"related":[{"title":"Federal Reserve Act","link":"//en.wikipedia.org/wiki/Federal_Reserve_Act"}]},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["government","treaty"]}],"1914":[{"text":"Gavrilo Princip assassinates Archduke Franz Ferdinand of Austria in Sarajevo, triggering the start of World War I","links": {"main": {"title":"Gavrilo Princip","link":"//en.wikipedia.org/wiki/Gavrilo_Princip"},"related":[{"title":"Archduke Franz Ferdinand of Austria","link":"//en.wikipedia.org/wiki/Archduke_Franz_Ferdinand_of_Austria"},{"title":"World War 1","link":"//en.wikipedia.org/wiki/World_War_I"}]},"locations":["Sarajevo","Bosnia And Herzegovina"],"latlong":[[43.856259, 18.413076], [43.915886, 17.679076]],"tags":["ww1","person","death","conflict"]},{"text":"The United Kingdom establishes the Sultanate of Egypt as a protectorate","links": {"main": {"title":"Sultanate of Egypt","link":"//en.wikipedia.org/wiki/Sultanate_of_Egypt"}},"locations":["Egypt","United Kingdom"],"latlong":[[26.820553, 30.802498], [51.507351, -0.127758]],"tags":["conflict"]},{"text":"Panama Canal opens","links": {"main": {"title":"Panama Canal","link":"//en.wikipedia.org/wiki/Panama_Canal"}},"locations":["Panama"],"latlong":[[8.537981, -80.782127]],"tags":["technology"]},{"text":"Benedict XV becomes Pope","links": {"main": {"title":"Benedict XV","link":"//en.wikipedia.org/wiki/Pope_Benedict_XV"}},"locations":["Italy","Vatican City"],"latlong":[[41.902916, 12.453389]],"tags":["person","religion"]},{"text":"Martha, last known passenger pigeon, dies","links": {"main": {"title":"Martha (pigeon)","link":"//en.wikipedia.org/wiki/Martha_(pigeon)"},"related":[{"title":"Passenger Pigeon","link":"//en.wikipedia.org/wiki/Passenger_pigeon"},{"title":"Charles Otis Whitman","link":"//en.wikipedia.org/wiki/Charles_Otis_Whitman"}]},"locations":["Chicago","United States of America"],"latlong":[[41.878114, -87.629798]],"tags":["science"]}],"1915":[{"text":"The RMS Lusitania is sunk","links": {"main": {"title":"RMS Lusitania","link":"//en.wikipedia.org/wiki/RMS_Lusitania"},"related":[{"title":"Sinking of the RMS Lusitania","link":"//en.wikipedia.org/wiki/Sinking_of_the_RMS_Lusitania"},{"title":"U-boat","link":"//en.wikipedia.org/wiki/U-boat"},{"title":"Prize rules","link":"//en.wikipedia.org/wiki/Prize_rules"}]},"locations":["United Kindom","Ireland"],"latlong":[[51.507351, -0.127758], [53.412910, -8.24389]],"tags":["conflict","ww1","conflict"]},{"text":"The United States occupation of Haiti begins","links": {"main": {"title":"United States occupation of Haiti","link":"//en.wikipedia.org/wiki/United_States_occupation_of_Haiti"}},"locations":["Haiti","United States of America"],"latlong":[[18.971187, -72.285215], [39.740986, -102.128906]],"tags":["conflict"]},{"text":"Armenian genocide in the Ottoman Empire","links": {"main": {"title":"Armenian Genocide","link":"//en.wikipedia.org/wiki/Armenian_Genocide"}},"locations":["Ottoman Empire","Armenia"],"latlong":[[38.963745, 35.243322], [40.069099, 45.038189]],"tags":["conflict"]},{"text":"D. W. Griffith's The Birth of a Nation is released","links": {"main": {"title":"D. W. Griffith","link":"//en.wikipedia.org/wiki/D._W._Griffith"},"related":[{"title":"The Birth of a Nation","link":"//en.wikipedia.org/wiki/The_Birth_of_a_Nation"}]},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["art","person"]},{"text":"First use of poison gas at the Battle of Neuve Chapelle and Second Battle of Ypres","links": {"main": {"title":"Chemical warfare","link":"//en.wikipedia.org/wiki/Chemical_warfare"},"related":[{"title":"Chemical weapons in World War I","link":"//en.wikipedia.org/wiki/Chemical_weapons_in_World_War_I"},{"title":"Battle of Neuve Chapelle","link":"//en.wikipedia.org/wiki/Battle_of_Neuve_Chapelle"},{"title":"Second Battle of Ypres","link":"//en.wikipedia.org/wiki/Second_Battle_of_Ypres"}]},"locations":["France","Belgium"],"latlong":[[46.227638, 2.213749], [50.503887, 4.469936]],"tags":["conflict","technology","ww1"]}],"1916":[{"text":"Easter Rising in Ireland","links": {"main": {"title":"Easter Rising","link":"//en.wikipedia.org/wiki/Easter_Rising"},"related":[{"title":"Irish Republic","link":"//en.wikipedia.org/wiki/Irish_Republic"},{"title":"Irish Republicanism","link":"//en.wikipedia.org/wiki/Irish_republicanism"}]},"locations":["Ireland","Great Britain"],"latlong":[[53.412910, -8.24389], [51.507351, -0.127758]],"tags":["conflict"]},{"text":"The implementation of daylight saving time","links": {"main": {"title":"Daylight saving time","link":"//en.wikipedia.org/wiki/Daylight_saving_time"}},"locations":["Greenwich","United Kingdom"],"latlong":[[51.482577, -0.007659]],"tags":["science"]},{"text":"Warlord Era begins in China","links": {"main": {"title":"Warlord Era","link":"//en.wikipedia.org/wiki/Warlord_Era"}},"locations":["China"],"latlong":[[35.861660, 104.195397]],"tags":["conflict","government"]},{"text":"David Lloyd George becomes the Prime Minister of the United Kingdom","links": {"main": {"title":"David Lloyd George","link":"//en.wikipedia.org/wiki/David_Lloyd_George"}},"locations":["United Kingdom"],"latlong":[[51.507351, -0.127758]],"tags":["person","government"]},{"text":"The Gallipoli Campaign fails","links": {"main": {"title":"Gallipoli Campaign","link":"//en.wikipedia.org/wiki/Gallipoli_Campaign"}},"locations":["Gallipoli","Ottoman Empire"],"latlong":[[40.055851, 17.992614]],"tags":["conflict","ww1"]},{"text":"First use of tanks at the Battle of Flers-Courcelette","links": {"main": {"title":"Tank","link":"//en.wikipedia.org/wiki/Tank"},"related":[{"title":"Battle of Flers-Courcelette","link":"//en.wikipedia.org/wiki/Battle_of_Flers–Courcelette"}]},"locations":["Flers","Courcelette","France"],"latlong":[[48.750059, -0.575794]],"tags":["conflict","ww1","technology"]},{"text":"Battle of the Somme","links": {"main": {"title":"Battle of the Somme","link":"//en.wikipedia.org/wiki/Battle_of_the_Somme"}},"locations":["Somme","France"],"latlong":[[49.914518, 2.27071]],"tags":["conflict","ww1"]},{"text":"Grigory Rasputin is assassinated by H.H. Prince Felix Youssoupov","links": {"main": {"title":"Grigori Rasputin","link":"//en.wikipedia.org/wiki/Grigori_Rasputin"},"related":[{"title":"Felix Yusupov","link":"//en.wikipedia.org/wiki/Felix_Yusupov"}]},"locations":["St. Petersburg","Russia"],"latlong":[[27.773056, -82.64]],"tags":["death","person"]},{"text":"The Lucknow Pact is agreed upon by both the Congress and the Muslim League at the Indian city of Lucknow","links": {"main": {"title":"Lucknow Pact","link":"//en.wikipedia.org/wiki/Lucknow_Pact"},"related":[{"title":"Indian National Congress","link":"//en.wikipedia.org/wiki/Indian_National_Congress"},{"title":"All-India Muslim League","link":"//en.wikipedia.org/wiki/All-India_Muslim_League"},{"title":"Lucknow","link":"//en.wikipedia.org/wiki/Lucknow"}]},"locations":["India"],"latlong":[[20.593684, 78.96288]],"tags":["treaty","government"]},{"text":"Battle of Verdun","links": {"main": {"title":"Battle of Verdun","link":"//en.wikipedia.org/wiki/Battle_of_Verdun"}},"locations":["Verdun-sur-meuse","France"],"latlong":[[49.159876, 5.384423]],"tags":["conflict","ww1"]},{"text":"The Arab Revolt begins","links": {"main": {"title":"Arab Revolt","link":"//en.wikipedia.org/wiki/Arab_Revolt"}},"locations":["Kingdom of Hejaz","United Kingdom","France","Emirate of Nejd And Hasa","Ottoman Empire","German Empire","Emirate of Jabal Shammar"],"latlong":[[51.507351, -0.127758], [46.227638, 2.213749], [24.633333, 46.716667], [38.963745, 35.243322], [51.165691, 10.451526], [19.491411, 47.44904]],"tags":["conflict"]}],"1917":[{"text":"Russian Revolution ends the Russian Empire; beginning of Russian Civil War","links": {"main": {"title":"Russian Revolution","link":"//en.wikipedia.org/wiki/Russian_Revolution"},"related":[{"title":"Russian Civil War","link":"//en.wikipedia.org/wiki/Russian_Civil_War"}]},"locations":["Russia"],"latlong":[[61.524010, 105.318756]],"tags":["conflict"]},{"text":"USA join the Allies for the last 17 months of World War I","links": {"main": {"title":"United States in World War I","link":"//en.wikipedia.org/wiki/United_States_in_World_War_I"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["ww1"]},{"text":"Independence of Poland recognised","links": {"main": {"title":"Poland","link":"//en.wikipedia.org/wiki/Poland"}},"locations":["Poland"],"latlong":[[51.919438, 19.145136]],"tags":["government"]},{"text":"The first Pulitzer Prizes are awarded","links": {"main": {"title":"Pulitzer Prize","link":"//en.wikipedia.org/wiki/Pulitzer_Prize"}},"locations":["New York","United States of America"],"latlong":[[40.712784, -74.005941]],"tags":["art"]},{"text":"October Revolution in Russia","links": {"main": {"title":"October Revolution","link":"//en.wikipedia.org/wiki/October_Revolution"}},"locations":["Russia"],"latlong":[[61.524010, 105.318756]],"tags":["conflict","government"]},{"text":"Ukrainian-Soviet War begins","links": {"main": {"title":"Ukrainian-Soviet War","link":"//en.wikipedia.org/wiki/Ukrainian–Soviet_War"}},"locations":["Russia","Ukraine"],"latlong":[[61.524010, 105.318756], [48.379433, 31.16558]],"tags":["conflict"]}],"1918":[{"text":"End of World War I","links": {"main": {"title":"Armistice of 11 November 1918","link":"//en.wikipedia.org/wiki/Armistice_of_11_November_1918"}},"locations":["Compiègne","France"],"latlong":[[49.417816, 2.826145]],"tags":["ww1"]},{"text":"German Revolution begins","links": {"main": {"title":"German Revolution of 1918-19","link":"//en.wikipedia.org/wiki/German_Revolution_of_1918–19"}},"locations":["Germany"],"latlong":[[51.165691, 10.451526]],"tags":["conflict"]},{"text":"Abdication of Kaiser Wilhelm II","links": {"main": {"title":"Wilhelm II, German Emperor","link":"//en.wikipedia.org/wiki/Wilhelm_II,_German_Emperor"}},"locations":["Germany"],"latlong":[[51.165691, 10.451526]],"tags":["person"]},{"text":"Spanish flu pandemic","links": {"main": {"title":"1918 flu pandemic","link":"//en.wikipedia.org/wiki/1918_flu_pandemic"}},"locations":[""],"latlong":[],"tags":["natural disaster"]},{"text":"Murder of Tsar Nicholas II and his family","links": {"main": {"title":"Shooting of the Romanov family","link":"//en.wikipedia.org/wiki/Shooting_of_the_Romanov_family"},"related":[{"title":"Nicholas II of Russia","link":"//en.wikipedia.org/wiki/Nicholas_II_of_Russia"}]},"locations":["Russia"],"latlong":[[61.524010, 105.318756]],"tags":["person","government"]},{"text":"Poland, Ukraine and Belarus are among a number of states to declare independence from Russia","links": {"main": {"title":"Poland","link":"//en.wikipedia.org/wiki/Poland"},"related":[{"title":"Ukraine","link":"//en.wikipedia.org/wiki/Ukraine"},{"title":"Belarus","link":"//en.wikipedia.org/wiki/Belarus"}]},"locations":["Poland","Ukraine","Belarus","Russia"],"latlong":[[51.919438, 19.145136], [48.379433, 31.16558], [53.709807, 27.953389], [61.524010, 105.318756]],"tags":["government"]},{"text":"Finnish Civil War","links": {"main": {"title":"Finnish Civil War","link":"//en.wikipedia.org/wiki/Finnish_Civil_War"}},"locations":["Finland"],"latlong":[[61.924110, 25.748151]],"tags":["conflict"]},{"text":"Mehmed VI becomes last Sultan of the Ottoman Empire and last Caliph","links": {"main": {"title":"Mehmed VI","link":"//en.wikipedia.org/wiki/Mehmed_VI"},"related":[{"title":"Caliphate","link":"//en.wikipedia.org/wiki/Caliphate"}]},"locations":["Ottoman Empire"],"latlong":[[38.963745, 35.243322]],"tags":["person","government"]},{"text":"Partitioning of the Ottoman Empire begins","links": {"main": {"title":"Partitioning of the Ottoman Empire","link":"//en.wikipedia.org/wiki/Partitioning_of_the_Ottoman_Empire"},"related":[{"title":"Ottoman Empire","link":"//en.wikipedia.org/wiki/Ottoman_Empire"}]},"locations":["Ottoman Empire"],"latlong":[[38.963745, 35.243322]],"tags":["government","ww1"]},{"text":"The Kingdom of Iceland and The State of Slovenes, Croats and Serbs are established","links": {"main": {"title":"Kingdom of Iceland","link":"//en.wikipedia.org/wiki/Kingdom_of_Iceland"},"related":[{"title":"State of Slovenes, Croats and Serbs","link":"//en.wikipedia.org/wiki/State_of_Slovenes,_Croats_and_Serbs"}]},"locations":["Kingdom of Iceland","State of Slovenes, Croats And Serbs"],"latlong":[[64.963051, -19.020835], [45.815011, 15.981919]],"tags":["government","ww1"]},{"text":"The British occupy Palestine","links": {"main": {"title":"Mandatory Palestine","link":"//en.wikipedia.org/wiki/Mandatory_Palestine"},"related":[{"title":"Palestine","link":"//en.wikipedia.org/wiki/Palestine"}]},"locations":["Palestine","Great Britain"],"latlong":[[31.952162, 35.233154], [51.507351, -0.127758]],"tags":["government"]},{"text":"Mutawakkilite Kingdom of Yemen is founded","links": {"main": {"title":"Mutawakkilite Kingdom of Yemen","link":"//en.wikipedia.org/wiki/Mutawakkilite_Kingdom_of_Yemen"}},"locations":["Kingdom of Yemen"],"latlong":[[15.552727, 48.516388]],"tags":["government"]},{"text":"Azerbaijan Democratic Republic is declared","links": {"main": {"title":"Azerbaijan Democratic Republic","link":"//en.wikipedia.org/wiki/Azerbaijan_Democratic_Republic"}},"locations":["Azerbaijan Democratic Republic"],"latlong":[[40.143105, 47.576927]],"tags":["government"]},{"text":"Armenian-Azerbaijani War begins","links": {"main": {"title":"Armenian-Azerbaijani War","link":"//en.wikipedia.org/wiki/Armenian–Azerbaijani_War"}},"locations":["Armenia","Azerbaijan"],"latlong":[[40.069099, 45.038189], [40.143105, 47.576927]],"tags":["conflict"]},{"text":"Polish-Ukrainian War begins","links": {"main": {"title":"Polish-Ukrainian War","link":"//en.wikipedia.org/wiki/Polish–Ukrainian_War"}},"locations":["Poland","Ukraine"],"latlong":[[51.919438, 19.145136], [48.379433, 31.16558]],"tags":["conflict"]}],"1919":[{"text":"Treaty of Versailles redraws European borders","links": {"main": {"title":"Treaty of Versailles","link":"//en.wikipedia.org/wiki/Treaty_of_Versailles"}},"locations":["Versailles","France"],"latlong":[[48.801408, 2.130122], [46.227638, 2.213749]],"tags":["treaty","ww1"]},{"text":"German Revolution ends with the collapse of the German Empire and the establishment of the Weimar Republic","links": {"main": {"title":"German Revolution of 1918-19","link":"//en.wikipedia.org/wiki/German_Revolution_of_1918–19"},"related":[{"title":"Weimar Republic","link":"//en.wikipedia.org/wiki/Weimar_Republic"},{"title":"Weimar Constitution","link":"//en.wikipedia.org/wiki/Weimar_Constitution"}]},"locations":["Weimar Republic"],"latlong":[[51.165691, 10.451526]],"tags":["government","treaty"]},{"text":"Victory for Estonia in the Estonian War of Independence","links": {"main": {"title":"Estonian War of Independence","link":"//en.wikipedia.org/wiki/Estonian_War_of_Independence"},"related":[{"title":"Estonia","link":"//en.wikipedia.org/wiki/Estonia"}]},"locations":["Estonia"],"latlong":[[58.595272, 25.013607]],"tags":["conflict"]},{"text":"League of Nations founded in Paris","links": {"main": {"title":"League of Nations","link":"//en.wikipedia.org/wiki/League_of_Nations"}},"locations":["Paris"],"latlong":[[48.856614, 2.352222]],"tags":["government","treaty"]},{"text":"Polish-Soviet War begins","links": {"main": {"title":"Polish-Soviet War","link":"//en.wikipedia.org/wiki/Polish–Soviet_War"}},"locations":["Soviet Russia","Soviet Ukraine","Second Polish Republic","Ukrainian People's Republic"],"latlong":[[-22.957640, 18.49041], [48.379433, 31.16558], [51.919438, 19.145136]],"tags":["conflict"]},{"text":"The Italian National Fascist Party is established by Benito Mussolini","links": {"main": {"title":"National Fascist Party","link":"//en.wikipedia.org/wiki/National_Fascist_Party"},"related":[{"title":"Benito Mussolini","link":"//en.wikipedia.org/wiki/Benito_Mussolini"}]},"locations":["Italy"],"latlong":[[41.871940, 12.56738]],"tags":["ww2"]},{"text":"Communist International established","links": {"main": {"title":"Communist International","link":"//en.wikipedia.org/wiki/Communist_International"}},"locations":["Russia"],"latlong":[[61.524010, 105.318756]],"tags":["government"]},{"text":"Egyptian Revolution of 1919","links": {"main": {"title":"Egyptian Revolution of 1919","link":"//en.wikipedia.org/wiki/Egyptian_Revolution_of_1919"}},"locations":["Egypt"],"latlong":[[26.820553, 30.802498]],"tags":["conflict"]},{"text":"Turkish War of Independence begins","links": {"main": {"title":"Turkish War of Independence","link":"//en.wikipedia.org/wiki/Turkish_War_of_Independence"}},"locations":["Turkey"],"latlong":[[38.963745, 35.243322]],"tags":["conflict"]},{"text":"End of Polish-Ukrainian War","links": {"main": {"title":"Polish-Ukrainian War","link":"//en.wikipedia.org/wiki/Polish–Ukrainian_War"}},"locations":["Poland","Ukraine"],"latlong":[[51.919438, 19.145136], [48.379433, 31.16558]],"tags":["conflict"]},{"text":"The International Labor Organisation is established","links": {"main": {"title":"International Labour Organization","link":"//en.wikipedia.org/wiki/International_Labour_Organization"}},"locations":["Bern","Switzerland"],"latlong":[[46.947922, 7.444608], [46.818188, 8.227512]],"tags":["equality"]},{"text":"Ernest Rutherford discovers the proton","links": {"main": {"title":"Ernest Rutherford","link":"//en.wikipedia.org/wiki/Ernest_Rutherford"},"related":[{"title":"Proton","link":"//en.wikipedia.org/wiki/Proton"}]},"locations":[""],"latlong":[],"tags":["person","science"]},{"text":"First experimental evidence for the General theory of relativity obtained by Arthur Eddington","links": {"main": {"title":"Arthur Eddington","link":"//en.wikipedia.org/wiki/Arthur_Eddington"},"related":[{"title":"General relativity","link":"//en.wikipedia.org/wiki/General_relativity"}]},"locations":[""],"latlong":[],"tags":["person","science"]}],"1920":[{"text":"Mexican Revolution ends","links": {"main": {"title":"Mexican Revolution","link":"//en.wikipedia.org/wiki/Mexican_Revolution"}},"locations":["Mexico"],"latlong":[[23.634501, -102.552784]],"tags":["conflict"]},{"text":"Greece restores its monarchy after a referendum","links": {"main": {"title":"Greek referendum, 1920","link":"//en.wikipedia.org/wiki/Greek_referendum,_1920"}},"locations":["Greece"],"latlong":[[39.074208, 21.824312]],"tags":["government","treaty"]},{"text":"Turkish-Armenian War is fought, and ends with victory for Turkey","links": {"main": {"title":"Turkish–Armenian War","link":"//en.wikipedia.org/wiki/Turkish–Armenian_War"}},"locations":[""],"latlong":[],"tags":["conflict"]},{"text":"Red Army invasion of Azerbaijan and Armenia ends the Armenian-Azerbaijani War and concludes with their incorporation into the Soviet Union","links": {"main": {"title":"Red Army invasion of Azerbaijan","link":"//en.wikipedia.org/wiki/Red_Army_invasion_of_Azerbaijan"},"related":[{"title":"Armenian–Azerbaijani War","link":"//en.wikipedia.org/wiki/Armenian–Azerbaijani_War"}]},"locations":[""],"latlong":[],"tags":["conflict"]},{"text":"Mahatma Gandhi launches Non-cooperation movement","links": {"main": {"title":"Mahatma Gandhi","link":"//en.wikipedia.org/wiki/Mahatma_Gandhi"},"related":[{"title":"Non-cooperation movement","link":"//en.wikipedia.org/wiki/Non-cooperation_movement"}]},"locations":["India"],"latlong":[[20.593684, 78.96288]],"tags":["person","government"]},{"text":"Prohibition in the United States enforced","links": {"main": {"title":"Prohibition in the United States","link":"//en.wikipedia.org/wiki/Prohibition_in_the_United_States"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["social"]}],"1921":[{"text":"Adolf Hitler becomes FÃ¼hrer of the Nazi Party as hyperinflation in the Weimar Republic begins","links": {"main": {"title":"Adolf Hitler","link":"//en.wikipedia.org/wiki/Adolf_Hitler"},"related":[{"title":"FÃ¼hrer","link":"//en.wikipedia.org/wiki/F%C3%BChrer"},{"title":"Nazi Party","link":"//en.wikipedia.org/wiki/Nazi_Party"},{"title":"Hyperinflation in the Weimar Republic","link":"//en.wikipedia.org/wiki/Hyperinflation_in_the_Weimar_Republic"}]},"locations":["Germany"],"latlong":[[51.165691, 10.451526]],"tags":["ww2"]},{"text":"Russia invades Georgia and incorporates it into the Soviet Union","links": {"main": {"title":"Russia","link":"//en.wikipedia.org/wiki/Russian_Soviet_Federative_Socialist_Republic"},"related":[{"title":"Red Army invasion of Georgia","link":"//en.wikipedia.org/wiki/Red_Army_invasion_of_Georgia"},{"title":"Georgia","link":"//en.wikipedia.org/wiki/Georgia_(country)"}]},"locations":["Russia","Georgia"],"latlong":[[61.524010, 105.318756], [32.165622, -82.900075]],"tags":["conflict"]},{"text":"End of Russian Civil War","links": {"main": {"title":"Russian Civil War","link":"//en.wikipedia.org/wiki/Russian_Civil_War"}},"locations":["Russia"],"latlong":[[61.524010, 105.318756]],"tags":["conflict"]},{"text":"Polish-Soviet War and Ukrainian-Soviet War","links": {"main": {"title":"Russian Civil War","link":"//en.wikipedia.org/wiki/Russian_Civil_War"},"related":[{"title":"Polish-Soviet War","link":"//en.wikipedia.org/wiki/Polish-Soviet_War"},{"title":"Ukrainian–Soviet War","link":"//en.wikipedia.org/wiki/Ukrainian–Soviet_War"}]},"locations":["Russia","Poland","Ukraine"],"latlong":[[61.524010, 105.318756], [51.919438, 19.145136], [48.379433, 31.16558]],"tags":["conflict"]},{"text":"Coup brings the Pahlavi dynasty to power in Iran","links": {"main": {"title":"Pahlavi dynasty","link":"//en.wikipedia.org/wiki/Pahlavi_dynasty"}},"locations":["Iran"],"latlong":[[32.427908, 53.688046]],"tags":["government","internal conflict"]}],"1922":[{"text":"Ottoman Sultanate abolished by the Turkish Grand National Assembly; Sultan Mehmed VI is deposed","links": {"main": {"title":"Ottoman Sultanate","link":"//en.wikipedia.org/wiki/Ottoman_Empire"},"related":[{"title":"Defeat and dissolution of the Ottoman Empire","link":"//en.wikipedia.org/wiki/Defeat_and_dissolution_of_the_Ottoman_Empire"},{"title":"Turkish Grand National Assembly","link":"//en.wikipedia.org/wiki/Turkish_Grand_National_Assembly"},{"title":"Mehmed VI","link":"//en.wikipedia.org/wiki/Mehmed_VI"}]},"locations":["Turkey"],"latlong":[[38.963745, 35.243322]],"tags":["government"]},{"text":"Irish Free State is established, while the Province of Northern Ireland is created within The United Kingdom","links": {"main": {"title":"Irish Free State","link":"//en.wikipedia.org/wiki/Irish_Free_State"},"related":[{"title":"Northern Ireland","link":"//en.wikipedia.org/wiki/Northern_Ireland"},{"title":"United Kingdom","link":"//en.wikipedia.org/wiki/United_Kingdom"}]},"locations":["Ireland","United Kingdom"],"latlong":[[53.412910, -8.24389], [51.507351, -0.127758]],"tags":["government"]},{"text":"The Irish Civil War begins","links": {"main": {"title":"Irish Civil War","link":"//en.wikipedia.org/wiki/Irish_Civil_War"}},"locations":["Ireland"],"latlong":[[53.412910, -8.24389]],"tags":["conflict"]},{"text":"The Italian reconquest of Libya begins","links": {"main": {"title":"Libya","link":"//en.wikipedia.org/wiki/Libya"}},"locations":["Libya"],"latlong":[[26.335100, 17.228331]],"tags":["conflict"]},{"text":"The union of Costa Rica, Guatemala, Honduras and El Salvador is dissolved","links": {"main": {"title":"Federal Republic of Central America","link":"//en.wikipedia.org/wiki/Federal_Republic_of_Central_America"}},"locations":["Costa Rica","Guatemala","Honduras","El Salvador"],"latlong":[[9.748917, -83.753428], [15.783471, -90.230759], [15.199999, -86.241905], [13.794185, -88.89653]],"tags":["government"]},{"text":"Egypt gains independence from the United Kingdom, though British forces still occupy the Suez Canal","links": {"main": {"title":"Egypt gains independence from the United Kingdom","link":"//en.wikipedia.org/wiki/Unilateral_Declaration_of_Egyptian_Independence"},"related":[{"title":"Suez Canal","link":"//en.wikipedia.org/wiki/Suez_Canal"}]},"locations":["Egypt"],"latlong":[[26.820553, 30.802498]],"tags":["government"]},{"text":"March on Rome brings Benito Mussolini to power in Italy","links": {"main": {"title":"March on Rome","link":"//en.wikipedia.org/wiki/March_on_Rome"},"related":[{"title":"Benito Mussolini","link":"//en.wikipedia.org/wiki/Benito_Mussolini"}]},"locations":["Rome","Italy"],"latlong":[[41.902783, 12.496366]],"tags":["person","government"]},{"text":"Howard Carter discovers Tutankhamen's tomb","links": {"main": {"title":"Howard Carter","link":"//en.wikipedia.org/wiki/Howard_Carter"},"related":[{"title":"Tutankhamen's tomb","link":"//en.wikipedia.org/wiki/Tutankhamen%27s_tomb"}]},"locations":["Egypt"],"latlong":[[26.820553, 30.802498]],"tags":["person","history"]},{"text":"Gabriel Narutowicz, President of Poland is assassinated","links": {"main": {"title":"Gabriel Narutowicz","link":"//en.wikipedia.org/wiki/Gabriel_Narutowicz"},"related":[{"title":"Poland","link":"//en.wikipedia.org/wiki/Poland"}]},"locations":["Poland"],"latlong":[[51.919438, 19.145136]],"tags":["person","government","death"]},{"text":"The Union of Soviet Socialist Republics (USSR), the world's first officially Communist state, is formed","links": {"main": {"title":"Union of Soviet Socialist Republics","link":"//en.wikipedia.org/wiki/Soviet_Union"}},"locations":["Soviet Union"],"latlong":[[33.889764, -117.818796]],"tags":["government"]},{"text":"Pius XI becomes Pope","links": {"main": {"title":"Pius XI","link":"//en.wikipedia.org/wiki/Pope_Pius_XI"}},"locations":["Italy","Vatican City"],"latlong":[[41.902916, 12.453389]],"tags":["person","religion"]},{"text":"James Joyce publishes Ulysses","links": {"main": {"title":"James Joyce","link":"//en.wikipedia.org/wiki/James_Joyce"},"related":[{"title":"Ulysses","link":"//en.wikipedia.org/wiki/Ulysses_(novel)"}]},"locations":["Dublin","Ireland"],"latlong":[[53.349805, -6.26031]],"tags":["person","art"]},{"text":"The Washington Naval Treaty is signed","links": {"main": {"title":"Washington Naval Treaty","link":"//en.wikipedia.org/wiki/Washington_Naval_Treaty"}},"locations":["British Empire","United States of America","Empire of Japan","France","Italy"],"latlong":[[51.507351, -0.127758], [39.740986, -102.128906], [36.204824, 138.252924], [46.227638, 2.213749], [41.871940, 12.56738]],"tags":["government","treaty"]},{"text":"Mahatma Gandhi calls off Non-cooperation movement","links": {"main": {"title":"Mahatma Gandhi","link":"//en.wikipedia.org/wiki/Mahatma_Gandhi"},"related":[{"title":"Non-cooperation movement","link":"//en.wikipedia.org/wiki/Non-cooperation_movement"}]},"locations":["India"],"latlong":[[20.593684, 78.96288]],"tags":["person"]}],"1923":[{"text":"Hyperinflation in the Weimar Republic ends with the introduction of the Rentenmark","links": {"main": {"title":"Hyperinflation in the Weimar Republic","link":"//en.wikipedia.org/wiki/Hyperinflation_in_the_Weimar_Republic"},"related":[{"title":"Rentenmark","link":"//en.wikipedia.org/wiki/Rentenmark"}]},"locations":[""],"latlong":[],"tags":["ww2","government","economy"]},{"text":"Time Magazine is first published","links": {"main": {"title":"Time Magazine","link":"//en.wikipedia.org/wiki/Time_(magazine)"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["social"]},{"text":"Irish Civil War ends","links": {"main": {"title":"Irish Civil War","link":"//en.wikipedia.org/wiki/Irish_Civil_War"}},"locations":["Ireland"],"latlong":[[53.412910, -8.24389]],"tags":["conflict"]},{"text":"The Beer Hall Putsch, an attempt to overthrow the Weimar Republic, ends in failure and brief imprisonment for Adolf Hitler but brings the Nazi Party to national attention","links": {"main": {"title":"Beer Hall Putsch","link":"//en.wikipedia.org/wiki/Beer_Hall_Putsch"},"related":[{"title":"Weimar Republic","link":"//en.wikipedia.org/wiki/Weimar_Republic"},{"title":"Adolf Hitler","link":"//en.wikipedia.org/wiki/Adolf_Hitler"},{"title":"Nazi Party","link":"//en.wikipedia.org/wiki/Nazi_Party"}]},"locations":["Germany"],"latlong":[[51.165691, 10.451526]],"tags":["ww2"]},{"text":"A military coup ousts and kills Bulgarian Prime Minister Aleksandar Stamboliyski","links": {"main": {"title":"Bulgarian coup d'état of 1923","link":"//en.wikipedia.org/wiki/Bulgarian_coup_d'%C3%A9tat_of_1923"},"related":[{"title":"Aleksandar Stamboliyski","link":"//en.wikipedia.org/wiki/Aleksandar_Stamboliyski"}]},"locations":["Bulgaria"],"latlong":[[42.733883, 25.48583]],"tags":["internal conflict","government","person","death"]},{"text":"The Great KantÅ earthquake kills at least 105,000 people in Japan","links": {"main": {"title":"Great KantÅ earthquake","link":"//en.wikipedia.org/wiki/1923_Great_KantÅ_earthquake"}},"locations":["Japan"],"latlong":[[36.204824, 138.252924]],"tags":["natural disaster"]},{"text":"Turkish War of Independence ends; Kemal AtatÃ¼rk becomes the first President of the newly established Republic of Turkey; Ankara replaces Istanbul as its capital","links": {"main": {"title":"Turkish War of Independence","link":"//en.wikipedia.org/wiki/Turkish_War_of_Independence"},"related":[{"title":"Kemal AtatÃ¼rk","link":"//en.wikipedia.org/wiki/Kemal_Atat%C3%BCrk"},{"title":"Republic of Turkey","link":"//en.wikipedia.org/wiki/Republic_of_Turkey"},{"title":"Ankara","link":"//en.wikipedia.org/wiki/Ankara"},{"title":"Istanbul","link":"//en.wikipedia.org/wiki/Istanbul"}]},"locations":["Turkey"],"latlong":[[38.963745, 35.243322]],"tags":["conflict"]},{"text":"The Walt Disney Company is founded","links": {"main": {"title":"Walt Disney Company","link":"//en.wikipedia.org/wiki/Walt_Disney_Company"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["social","art"]}],"1924":[{"text":"Death of Vladimir Lenin triggers power struggle between Leon Trotsky and Joseph Stalin","links": {"main": {"title":"Vladimir Lenin","link":"//en.wikipedia.org/wiki/Vladimir_Lenin"},"related":[{"title":"Leon Trotsky","link":"//en.wikipedia.org/wiki/Leon_Trotsky"},{"title":"Joseph Stalin","link":"//en.wikipedia.org/wiki/Joseph_Stalin"}]},"locations":["Soviet Union"],"latlong":[[33.889764, -117.818796]],"tags":["person","death","government"]},{"text":"The Caliphate is abolished by Kamal AtatÃ¼rk","links": {"main": {"title":"Civic independence and the Caliphate, 1924–1925","link":"//en.wikipedia.org/wiki/Mustafa_Kemal_Atat%C3%BCrk"},"related":[{"title":"Caliphate","link":"//en.wikipedia.org/wiki/Caliphate"}]},"locations":[""],"latlong":[],"tags":["government"]},{"text":"The U.S. Federal Bureau of Investigation founded under J. Edgar Hoover","links": {"main": {"title":"Federal Bureau of Investigation","link":"//en.wikipedia.org/wiki/Federal_Bureau_of_Investigation"},"related":[{"title":"J. Edgar Hoover","link":"//en.wikipedia.org/wiki/J._Edgar_Hoover"}]},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["government"]},{"text":"The August Uprising in Georgia against Soviet rule","links": {"main": {"title":"August Uprising","link":"//en.wikipedia.org/wiki/August_Uprising"}},"locations":["Georgia"],"latlong":[[32.165622, -82.900075]],"tags":["conflict"]},{"text":"George Gershwin composes Rhapsody In Blue","links": {"main": {"title":"Rhapsody In Blue","link":"//en.wikipedia.org/wiki/Rhapsody_in_Blue"},"related":[{"title":"George Gershwin","link":"//en.wikipedia.org/wiki/George_Gershwin"}]},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["art","person"]},{"text":"U.S. Immigration Act of 1924 significantly restricts immigration from Asia, the Middle East, and Southern Europe","links": {"main": {"title":"Immigration Act of 1924","link":"//en.wikipedia.org/wiki/Immigration_Act_of_1924"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["treaty","government"]}],"1925":[{"text":"Benito Mussolini gains dictatorial powers in Italy","links": {"main": {"title":"Benito Mussolini","link":"//en.wikipedia.org/wiki/Benito_Mussolini"}},"locations":["Italy"],"latlong":[[41.871940, 12.56738]],"tags":["ww2"]},{"text":"Mein Kampf is published","links": {"main": {"title":"Mein Kampf","link":"//en.wikipedia.org/wiki/Mein_Kampf"}},"locations":["Germany"],"latlong":[[51.165691, 10.451526]],"tags":["ww2"]},{"text":"First televisual image created by John Logie Baird","links": {"main": {"title":"John Logie Baird","link":"//en.wikipedia.org/wiki/John_Logie_Baird"},"related":[{"title":"Stooky Bill","link":"//en.wikipedia.org/wiki/Stooky_Bill"},{"title":"Nipkow disk","link":"//en.wikipedia.org/wiki/Nipkow_disk"}]},"locations":["United Kingdom"],"latlong":[[51.507351, -0.127758]],"tags":["technology"]},{"text":"Locarno Treaties are signed","links": {"main": {"title":"Locarno Treaties","link":"//en.wikipedia.org/wiki/Locarno_Treaties"}},"locations":["British Empire","France","Germany"],"latlong":[[51.507351, -0.127758], [46.227638, 2.213749], [51.165691, 10.451526]],"tags":["treaty","ww1"]},{"text":"Serum run to Nome","links": {"main": {"title":"Serum run to Nome","link":"//en.wikipedia.org/wiki/1925_serum_run_to_Nome"}},"locations":["Nome","Alaska","United States of America"],"latlong":[[64.501111, -165.406389]],"tags":["natural disaster","transport"]}],"1926":[{"text":"Hirohito becomes Emperor of Japan","links": {"main": {"title":"Hirohito","link":"//en.wikipedia.org/wiki/Hirohito"},"related":[{"title":"Emperor of Japan","link":"//en.wikipedia.org/wiki/Emperor_of_Japan"}]},"locations":["Japan"],"latlong":[[36.204824, 138.252924]],"tags":["government","person"]},{"text":"Coups in Greece, Poland, Lithuania and Portugal install new dictatorships","links": {"main": {"title":"Second Hellenic Republic","link":"//en.wikipedia.org/wiki/Second_Hellenic_Republic"},"related":[{"title":"Greek presidential election, 1926","link":"//en.wikipedia.org/wiki/Greek_presidential_election,_1926"},{"title":"1926 Lithuanian coup d'état","link":"//en.wikipedia.org/wiki/1926_Lithuanian_coup_d%27état"},{"title":"May Coup (Poland)","link":"//en.wikipedia.org/wiki/May_Coup_(Poland)"},{"title":"28 May 1926 coup d'état","link":"//en.wikipedia.org/wiki/28_May_1926_coup_d%27état"}]},"locations":["Greece","Poland","Lithuania","Portugal"],"latlong":[[39.074208, 21.824312], [51.919438, 19.145136], [55.169438, 23.881275], [39.399872, -8.224454]],"tags":["government","internal conflict"]}],"1927":[{"text":"'The Jazz Singer', the first 'talkie', is released","links": {"main": {"title":"The Jazz Singer","link":"//en.wikipedia.org/wiki/The_Jazz_Singer"},"related":[{"title":"Sound film","link":"//en.wikipedia.org/wiki/Sound_film"},{"title":"Silent film","link":"//en.wikipedia.org/wiki/Silent_film"},{"title":"Warner Bros","link":"//en.wikipedia.org/wiki/Warner_Bros."}]},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["art","social","technology"]},{"text":"Joseph Stalin becomes leader of the Soviet Union","links": {"main": {"title":"Joseph Stalin","link":"//en.wikipedia.org/wiki/Joseph_Stalin"},"related":[{"title":"Soviet Union","link":"//en.wikipedia.org/wiki/Soviet_Union"}]},"locations":["Soviet Union"],"latlong":[[33.889764, -117.818796]],"tags":["government","person"]},{"text":"Chinese Civil War begins","links": {"main": {"title":"Chinese Civil War","link":"//en.wikipedia.org/wiki/Chinese_Civil_War"}},"locations":["China"],"latlong":[[35.861660, 104.195397]],"tags":["conflict"]},{"text":"Bath School disaster","links": {"main": {"title":"Bath School disaster","link":"//en.wikipedia.org/wiki/Bath_School_disaster"}},"locations":["Michigan","United States of America"],"latlong":[[44.314844, -85.602364]],"tags":["disaster"]},{"text":"Australian Parliament convenes in Canberra for the first time","links": {"main": {"title":"Australian Parliament","link":"//en.wikipedia.org/wiki/Parliament_of_Australia"},"related":[{"title":"Canberra","link":"//en.wikipedia.org/wiki/Canberra"}]},"locations":["Canberra","Australia"],"latlong":[[-35.282000, 149.128684]],"tags":["government"]},{"text":"The United Kingdom of Great Britain and Ireland officially becomes the United Kingdom of Great Britain and Northern Ireland","links": {"main": {"title":"United Kingdom of Great Britain and Ireland","link":"//en.wikipedia.org/wiki/United_Kingdom_of_Great_Britain_and_Ireland"},"related":[{"title":"United Kingdom of Great Britain and Northern Ireland","link":"//en.wikipedia.org/wiki/United_Kingdom"}]},"locations":["United Kingdom"],"latlong":[[51.507351, -0.127758]],"tags":["government"]},{"text":"Saudi Arabia gains independence","links": {"main": {"title":"Saudi Arabia","link":"//en.wikipedia.org/wiki/Saudi_Arabia"}},"locations":["Saudi Arabia"],"latlong":[[23.885942, 45.079162]],"tags":["government"]},{"text":"The BBC is granted a Royal Charter in the United Kingdom","links": {"main": {"title":"BBC","link":"//en.wikipedia.org/wiki/BBC"},"related":[{"title":"Royal Charter","link":"//en.wikipedia.org/wiki/Royal_Charter"}]},"locations":["United Kingdom"],"latlong":[[51.507351, -0.127758]],"tags":["treaty"]},{"text":"World population reaches 2 billion","links": {},"locations":[""],"latlong":[],"tags":["world population"]},{"text":"Charles Lindbergh's flight to Paris","links": {"main": {"title":"Charles Lindbergh","link":"//en.wikipedia.org/wiki/Charles_Lindbergh"},"related":[{"title":"Spirit of St. Louis","link":"//en.wikipedia.org/wiki/Spirit_of_St._Louis"}]},"locations":["Paris"],"latlong":[[48.856614, 2.352222]],"tags":["technology","transport"]}],"1928":[{"text":"Discovery of penicillin by Alexander Fleming","links": {"main": {"title":"Penicillin","link":"//en.wikipedia.org/wiki/Penicillin"},"related":[{"title":"History of penicillin","link":"//en.wikipedia.org/wiki/History_of_penicillin"},{"title":"Alexander Fleming","link":"//en.wikipedia.org/wiki/Alexander_Fleming"}]},"locations":["Scotland","Paddington","England","United Kingdom"],"latlong":[[56.490671, -4.202646], [-33.884611, 151.226586]],"tags":["science","technology"]},{"text":"Warlord Era ends in China","links": {"main": {"title":"Warlord Era","link":"//en.wikipedia.org/wiki/Warlord_Era"}},"locations":["China"],"latlong":[[35.861660, 104.195397]],"tags":["conflict"]},{"text":"Malta becomes a British Dominion","links": {"main": {"title":"Malta","link":"//en.wikipedia.org/wiki/Malta"},"related":[{"title":"British Dominion","link":"//en.wikipedia.org/wiki/British_Dominion"}]},"locations":["Malta"],"latlong":[[35.937496, 14.375416]],"tags":["government"]},{"text":"Bubble gum is invented","links": {"main": {"title":"Bubble gum","link":"//en.wikipedia.org/wiki/Bubble_gum"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["social","science","technology"]},{"text":"King Zog I is crowned in Albania","links": {"main": {"title":"Zog I","link":"//en.wikipedia.org/wiki/Zog_I_of_Albania"}},"locations":["Albania"],"latlong":[[41.153332, 20.168331]],"tags":["government"]},{"text":"The Kellogg-Briand Pact is signed in Paris","links": {"main": {"title":"Kellogg-Briand Pact","link":"//en.wikipedia.org/wiki/Kellogg–Briand_Pact"}},"locations":["Paris"],"latlong":[[48.856614, 2.352222]],"tags":["treaty","government"]},{"text":"The International Red Cross and Red Crescent Movement is established","links": {"main": {"title":"International Red Cross and Red Crescent Movement","link":"//en.wikipedia.org/wiki/International_Red_Cross_and_Red_Crescent_Movement"}},"locations":["Geneva","Switzerland"],"latlong":[[46.198392, 6.142296]],"tags":["social"]},{"text":"Mickey Mouse is created at the Walt Disney Studio","links": {"main": {"title":"Mickey Mouse","link":"//en.wikipedia.org/wiki/Mickey_Mouse"},"related":[{"title":"Walt Disney Burbank Studio","link":"//en.wikipedia.org/wiki/Walt_Disney_Studios_(Burbank)"}]},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["art"]},{"text":"Hassan al-Banna founds the Muslim Brotherhood","links": {"main": {"title":"Hassan al-Banna","link":"//en.wikipedia.org/wiki/Hassan_al-Banna"},"related":[{"title":"Muslim Brotherhood","link":"//en.wikipedia.org/wiki/Muslim_Brotherhood"}]},"locations":["Middle East"],"latlong":[[29.298528, 42.55096]],"tags":["religion","government"]}],"1929":[{"text":"Wall Street crash of 1929 and the beginning of the Great Depression","links": {"main": {"title":"Wall Street crash of 1929","link":"//en.wikipedia.org/wiki/Wall_Street_Crash_of_1929"},"related":[{"title":"Great Depression","link":"//en.wikipedia.org/wiki/Great_Depression"}]},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["social","economy"]},{"text":"Leon Trotsky is exiled First people sent to the gulag in the Soviet Union as Stalin assumes effective control","links": {"main": {"title":"Leon Trotsky","link":"//en.wikipedia.org/wiki/Leon_Trotsky"},"related":[{"title":"Gulag","link":"//en.wikipedia.org/wiki/Gulag"}]},"locations":["Soviet Union"],"latlong":[[33.889764, -117.818796]],"tags":["person","government","social"]},{"text":"Pope Pius XI signs the Lateran Treaty with Italian leader Benito Mussolini","links": {"main": {"title":"Pius XI","link":"//en.wikipedia.org/wiki/Pope_Pius_XI"},"related":[{"title":"Lateran Treaty","link":"//en.wikipedia.org/wiki/Lateran_Treaty"},{"title":"Benito Mussolini","link":"//en.wikipedia.org/wiki/Benito_Mussolini"}]},"locations":["Italy","Vatican City"],"latlong":[[41.902916, 12.453389], [41.871940, 12.56738]],"tags":["person","treaty"]},{"text":"Vatican City is recognised as a sovereign state","links": {"main": {"title":"Vatican City","link":"//en.wikipedia.org/wiki/Vatican_City"}},"locations":["Vatican City"],"latlong":[[41.902916, 12.453389]],"tags":["government"]},{"text":"Saint Valentine's Day Massacre","links": {"main": {"title":"Saint Valentine's Day Massacre","link":"//en.wikipedia.org/wiki/Saint_Valentine%27s_Day_Massacre"}},"locations":["Chicago","Illinois","United States of America"],"latlong":[[41.878114, -87.629798]],"tags":["crime"]},{"text":"The first Academy Awards are presented","links": {"main": {"title":"Academy Awards","link":"//en.wikipedia.org/wiki/Academy_Awards"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["art"]}],"1930":[{"text":"Aided by the Great Depression, the Nazi Party increases its share of the vote from 2.6% to 18.3%","links": {"main": {"title":"German Federal Election, 1930","link":"//en.wikipedia.org/wiki/German_federal_election,_1930"}},"locations":["Germany"],"latlong":[[51.165691, 10.451526]],"tags":["ww2","economy"]},{"text":"Clyde Tombaugh discovers Pluto","links": {"main": {"title":"Clyde Tombaugh","link":"//en.wikipedia.org/wiki/Clyde_Tombaugh"},"related":[{"title":"Pluto","link":"//en.wikipedia.org/wiki/Pluto"}]},"locations":["Space","Arizona","United States of America"],"latlong":[[34.048928, -111.093731]],"tags":["science","exploration"]},{"text":"Salt March by Mahatma Gandhi and the official start of civil disobedience in British India","links": {"main": {"title":"Salt March","link":"//en.wikipedia.org/wiki/Salt_March"},"related":[{"title":"Mahatma Gandhi","link":"//en.wikipedia.org/wiki/Mahatma_Gandhi"},{"title":"civil disobedience","link":"//en.wikipedia.org/wiki/Civil_disobedience"},{"title":"British India","link":"//en.wikipedia.org/wiki/British_India"}]},"locations":["India"],"latlong":[[20.593684, 78.96288]],"tags":["conflict","government"]},{"text":"Military coups replace governments in Peru and Brazil","links": {"main": {"title":"Peru","link":"//en.wikipedia.org/wiki/Peru"},"related":[{"title":"Brazil","link":"//en.wikipedia.org/wiki/Brazil"}]},"locations":["Peru","Brazil"],"latlong":[[-9.189967, -75.015152], [-14.235004, -51.92528]],"tags":["internal conflict","government"]},{"text":"Haile Selassie becomes king of Abyssinia","links": {"main": {"title":"Haile Selassie","link":"//en.wikipedia.org/wiki/Haile_Selassie"},"related":[{"title":"Abyssinia","link":"//en.wikipedia.org/wiki/Ethiopian_Empire"}]},"locations":["Abyssinia"],"latlong":[[55.184859, -1.595359]],"tags":["government"]},{"text":"First FIFA World Cup hosted","links": {"main": {"title":"First FIFA World Cup","link":"//en.wikipedia.org/wiki/1930_FIFA_World_Cup"}},"locations":["Uruguay"],"latlong":[[-32.522779, -55.765835]],"tags":["sport"]}],"1931":[{"text":"Floods in China kill up to 2.5 million people","links": {"main": {"title":"Floods in China","link":"//en.wikipedia.org/wiki/1931_China_floods"}},"locations":["China"],"latlong":[[35.861660, 104.195397]],"tags":["natural disaster"]},{"text":"Independence of South Africa","links": {"main": {"title":"South Africa","link":"//en.wikipedia.org/wiki/South_Africa"}},"locations":["South Africa"],"latlong":[[-30.559482, 22.937506]],"tags":["government"]},{"text":"Construction of the Empire State Building","links": {"main": {"title":"Empire State Building","link":"//en.wikipedia.org/wiki/Empire_State_Building"}},"locations":["New York","United States of America"],"latlong":[[40.712784, -74.005941]],"tags":["technology"]},{"text":"'The Star-Spangled Banner' is adopted as the United States's national anthem","links": {"main": {"title":"The Star-Spangled Banner","link":"//en.wikipedia.org/wiki/The_Star-Spangled_Banner"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["social","government"]},{"text":"The Second Spanish Republic is declared","links": {"main": {"title":"Second Spanish Republic","link":"//en.wikipedia.org/wiki/Second_Spanish_Republic"}},"locations":["Spain"],"latlong":[[40.463667, -3.74922]],"tags":["government"]},{"text":"The Chinese Soviet Republic is proclaimed by Mao Zedong","links": {"main": {"title":"Chinese Soviet Republic","link":"//en.wikipedia.org/wiki/Chinese_Soviet_Republic"},"related":[{"title":"Mao Zedong","link":"//en.wikipedia.org/wiki/Mao_Zedong"}]},"locations":["China"],"latlong":[[35.861660, 104.195397]],"tags":["government"]},{"text":"Statute of Westminster creates the British Commonwealth of Nations","links": {"main": {"title":"Statute of Westminster","link":"//en.wikipedia.org/wiki/Statute_of_Westminster_1931"},"related":[{"title":"British Commonwealth of Nations","link":"//en.wikipedia.org/wiki/British_Commonwealth_of_Nations"}]},"locations":["United Kingdom"],"latlong":[[51.507351, -0.127758]],"tags":["government","treaty"]},{"text":"Japan invades Manchuria, China and occupies it until the end of World War II","links": {"main": {"title":"Japan invades Manchuria","link":"//en.wikipedia.org/wiki/Japanese_invasion_of_Manchuria"}},"locations":["Japan","Manchuria","China"],"latlong":[[36.204824, 138.252924], [19.445411, -99.089734], [35.861660, 104.195397]],"tags":["conflict"]}],"1932":[{"text":"Franklin D. Roosevelt is elected President of the United States","links": {"main": {"title":"Franklin D. Roosevelt","link":"//en.wikipedia.org/wiki/Franklin_D._Roosevelt"},"related":[{"title":"President of the United States","link":"//en.wikipedia.org/wiki/President_of_the_United_States"}]},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["government","person"]},{"text":"Éamon de Valera becomes President of the Executive Council (prime minister) of the Irish Free State","links": {"main": {"title":"Éamon de Valera","link":"//en.wikipedia.org/wiki/%C3%89amon_de_Valera"},"related":[{"title":"President of the Executive Council","link":"//en.wikipedia.org/wiki/President_of_the_Executive_Council_of_the_Irish_Free_State"},{"title":"Irish Free State","link":"//en.wikipedia.org/wiki/Irish_Free_State"}]},"locations":["Ireland"],"latlong":[[53.412910, -8.24389]],"tags":["government","person"]},{"text":"The Nazi party becomes the largest single party in the German parliament","links": {"main": {"title":"German federal election, July 1932","link":"//en.wikipedia.org/wiki/German_federal_election,_July_1932"}},"locations":[""],"latlong":[],"tags":["government","ww2"]},{"text":"Military coup in Chile","links": {"main": {"title":"Socialist Republic of Chile","link":"//en.wikipedia.org/wiki/Socialist_Republic_of_Chile"},"related":[{"title":"Carlos Dávila","link":"//en.wikipedia.org/wiki/Carlos_Dávila"},{"title":"Juan Esteban Montero","link":"//en.wikipedia.org/wiki/Juan_Esteban_Montero"},{"title":"Bartolomé Blanche","link":"//en.wikipedia.org/wiki/Bartolomé_Blanche"}]},"locations":[""],"latlong":[],"tags":["government","person","internal conflict"]},{"text":"BBC World Service starts broadcasting","links": {"main": {"title":"BBC World Service","link":"//en.wikipedia.org/wiki/BBC_World_Service"}},"locations":["United Kingdom"],"latlong":[[51.507351, -0.127758]],"tags":["social","technology"]},{"text":"The Neutron is discovered","links": {"main": {"title":"Discovery of the neutron","link":"//en.wikipedia.org/wiki/Discovery_of_the_neutron"},"related":[{"title":"Neutron","link":"//en.wikipedia.org/wiki/Neutron"},{"title":"James Chadwick","link":"//en.wikipedia.org/wiki/James_Chadwick"}]},"locations":["Cambridge","United Kingdom"],"latlong":[[52.205337, 0.121817]],"tags":["science","person"]},{"text":"Lindbergh baby kidnapping","links": {"main": {"title":"Lindbergh baby kidnapping","link":"//en.wikipedia.org/wiki/Lindbergh_kidnapping"}},"locations":["New Jersey","United States of America"],"latlong":[[40.058324, -74.405661]],"tags":["death","crime"]}],"1933":[{"text":"Adolf Hitler becomes Chancellor of Germany","links": {"main": {"title":"Adolf Hitler","link":"//en.wikipedia.org/wiki/Adolf_Hitler"}},"locations":["Germany"],"latlong":[[51.165691, 10.451526]],"tags":["ww2"]},{"text":"New Deal begins in America","links": {"main": {"title":"New Deal","link":"//en.wikipedia.org/wiki/New_Deal"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["economy","government"]},{"text":"Japan and Germany announce they are going to leave the League of Nations","links": {"main": {"title":"League of Nations","link":"//en.wikipedia.org/wiki/League_of_Nations"}},"locations":["Japan","Germany"],"latlong":[[36.204824, 138.252924], [51.165691, 10.451526]],"tags":["ww2"]},{"text":"United States occupation of Nicaragua ends","links": {"main": {"title":"United States occupation of Nicaragua","link":"//en.wikipedia.org/wiki/United_States_occupation_of_Nicaragua"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["conflict"]},{"text":"Prohibition in the United States is abolished","links": {"main": {"title":"Prohibition in the United States","link":"//en.wikipedia.org/wiki/Prohibition_in_the_United_States"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["government","social"]}],"1934":[{"text":"Dictatorship begins in Brazil","links": {"main": {"title":"Vargas Era","link":"//en.wikipedia.org/wiki/Vargas_Era"},"related":[{"title":"Getúlio Vargas","link":"//en.wikipedia.org/wiki/Getúlio_Vargas"}]},"locations":["Brazil"],"latlong":[[-14.235004, -51.92528]],"tags":["government"]},{"text":"Dictatorship begins in Bolivia","links": {"main": {"title":"Daniel Salamanca Urey","link":"//en.wikipedia.org/wiki/Daniel_Salamanca_Urey"},"related":[{"title":"José Luis Tejada Sorzano","link":"//en.wikipedia.org/wiki/José_Luis_Tejada_Sorzano"}]},"locations":["Bolivia"],"latlong":[[-16.290154, -63.588653]],"tags":["government"]},{"text":"Mao Zedong begins the Long March","links": {"main": {"title":"Mao Zedong","link":"//en.wikipedia.org/wiki/Mao_Zedong"},"related":[{"title":"Long March","link":"//en.wikipedia.org/wiki/Long_March"}]},"locations":["Jiangxi","Shaanxi","China"],"latlong":[[28.675697, 115.909228], [34.265472, 108.954239]],"tags":["conflict"]},{"text":"United States occupation of Haiti ends","links": {"main": {"title":"United States occupation of Haiti","link":"//en.wikipedia.org/wiki/United_States_occupation_of_Haiti"}},"locations":["United States of America","Haiti"],"latlong":[[39.740986, -102.128906], [18.971187, -72.285215]],"tags":["conflict"]},{"text":"United States grants more autonomy to the Philippines","links": {"main": {"title":"Tydings–McDuffie Act","link":"//en.wikipedia.org/wiki/Tydings–McDuffie_Act"},"related":[{"title":"Manuel L. Quezon","link":"//en.wikipedia.org/wiki/Manuel_L._Quezon"},{"title":"Philippines","link":"//en.wikipedia.org/wiki/Philippines"}]},"locations":["United States of America","Philippines"],"latlong":[[39.740986, -102.128906], [10.517518, 123.958740]],"tags":["government"]},{"text":"Adolf Hitler instigates the Night of the Long Knives, which cements his power over both the Nazi Party and Germany","links": {"main": {"title":"Adolf Hitler","link":"//en.wikipedia.org/wiki/Adolf_Hitler"},"related":[{"title":"Night of the Long Knives","link":"//en.wikipedia.org/wiki/Night_of_the_Long_Knives"}]},"locations":["Germany"],"latlong":[[51.165691, 10.451526]],"tags":["ww2"]},{"text":"With the death of President Hindenburg, Hitler declares himself Fuhrer of Germany","links": {"main": {"title":"President Hindenburg","link":"//en.wikipedia.org/wiki/Paul_von_Hindenburg"},"related":[{"title":"Fuhrer","link":"//en.wikipedia.org/wiki/Fuhrer"}]},"locations":["Germany"],"latlong":[[51.165691, 10.451526]],"tags":["ww2"]},{"text":"Bonnie and Clyde are shot to death in a police ambush","links": {"main": {"title":"Bonnie and Clyde","link":"//en.wikipedia.org/wiki/Bonnie_and_Clyde"}},"locations":["Louisiana","United States of America"],"latlong":[[30.984298, -91.962333]],"tags":["death","person","crime"]},{"text":"John Dillinger is gunned down by the FBI outside the Biograph Theater","links": {"main": {"title":"John Dillinger","link":"//en.wikipedia.org/wiki/John_Dillinger"},"related":[{"title":"Biograph Theater","link":"//en.wikipedia.org/wiki/Biograph_Theater"}]},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["death","person"]}],"1935":[{"text":"Second Italo-Ethiopian War concludes with the exile of Haile Selassie and the conquest of Abyssinia by Benito Mussolini","links": {"main": {"title":"Second Italo-Ethiopian War","link":"//en.wikipedia.org/wiki/Second_Italo-Ethiopian_War"},"related":[{"title":"Haile Selassie","link":"//en.wikipedia.org/wiki/Haile_Selassie"},{"title":"Abyssinia","link":"//en.wikipedia.org/wiki/Ethiopian_Empire"},{"title":"Benito Mussolini","link":"//en.wikipedia.org/wiki/Benito_Mussolini"}]},"locations":["Abyssinia","Italy"],"latlong":[[55.184859, -1.595359], [41.871940, 12.56738]],"tags":["conflict"]},{"text":"Persia becomes Iran","links": {"main": {"title":"Persia","link":"//en.wikipedia.org/wiki/Iran"}},"locations":["Iran"],"latlong":[[32.427908, 53.688046]],"tags":["government"]},{"text":"William Lyon Mackenzie King is elected Prime Minister of Canada","links": {"main": {"title":"William Lyon Mackenzie King","link":"//en.wikipedia.org/wiki/William_Lyon_Mackenzie_King"}},"locations":["Canada"],"latlong":[[56.130366, -106.346771]],"tags":["government"]},{"text":"Enactment of the Nuremberg racial laws","links": {"main": {"title":"Nuremberg racial laws","link":"//en.wikipedia.org/wiki/Nuremberg_Laws"}},"locations":["Germany"],"latlong":[[51.165691, 10.451526]],"tags":["ww2"]}],"1936":[{"text":"Beginning of the Spanish Civil War","links": {"main": {"title":"Spanish Civil War","link":"//en.wikipedia.org/wiki/Spanish_Civil_War"}},"locations":["Spain"],"latlong":[[40.463667, -3.74922]],"tags":["conflict"]},{"text":"Great Purge begins under Stalin","links": {"main": {"title":"Great Purge","link":"//en.wikipedia.org/wiki/Great_Purge"}},"locations":["Soviet Union"],"latlong":[[33.889764, -117.818796]],"tags":["conflict","social"]},{"text":"Edward VIII becomes King of the British Commonwealth and Emperor of India, before abdicating and handing the throne to his brother, George VI","links": {"main": {"title":"Edward VIII","link":"//en.wikipedia.org/wiki/Edward_VIII"},"related":[{"title":"British Commonwealth","link":"//en.wikipedia.org/wiki/British_Commonwealth"},{"title":"Emperor of India","link":"//en.wikipedia.org/wiki/Emperor_of_India"},{"title":"George VI","link":"//en.wikipedia.org/wiki/George_VI_of_the_United_Kingdom"}]},"locations":["Great Britain"],"latlong":[[51.507351, -0.127758]],"tags":["government","person"]},{"text":"George Nissen and Larry Griswold build the first modern trampoline","links": {"main": {"title":"George Nissen","link":"//en.wikipedia.org/wiki/George_Nissen"},"related":[{"title":"Larry Griswold","link":"//en.wikipedia.org/wiki/Larry_Griswold"},{"title":"trampoline","link":"//en.wikipedia.org/wiki/Trampoline"}]},"locations":["Iowa","United States of America"],"latlong":[[41.878003, -93.097702]],"tags":["toys"]},{"text":"Hoover Dam is completed","links": {"main": {"title":"Hoover Dam","link":"//en.wikipedia.org/wiki/Hoover_Dam"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["technology"]},{"text":"Arab Revolt in Palestine against the British begins to oppose Jewish immigration","links": {"main": {"title":"1936–39 Arab revolt in Palestine","link":"//en.wikipedia.org/wiki/1936–39_Arab_revolt_in_Palestine"}},"locations":["Palestine","United Kingdom"],"latlong":[[31.952162, 35.233154], [51.507351, -0.127758]],"tags":["conflict"]},{"text":"Italy annexes Ethiopia","links": {"main": {"title":"Italy","link":"//en.wikipedia.org/wiki/Italy"},"related":[{"title":"Ethiopia","link":"//en.wikipedia.org/wiki/Ethiopia"}]},"locations":[""],"latlong":[],"tags":["conflict","ww2"]},{"text":"'Benjamin', the last known thylacine, dies in Hobart Zoo","links": {"main": {"title":"thylacine","link":"//en.wikipedia.org/wiki/Thylacine"},"related":[{"title":"Hobart Zoo","link":"//en.wikipedia.org/wiki/Hobart_Zoo"}]},"locations":["Tasmania","Australia"],"latlong":[[-41.365042, 146.62849], [-25.274398, 133.775136]],"tags":["ecology"]}],"1937":[{"text":"Japanese invasion of China, and the beginning of World War II in the Far East","links": {"main": {"title":"Japanese invasion of China","link":"//en.wikipedia.org/wiki/Second_Sino-Japanese_War"}},"locations":["Japan","China"],"latlong":[[36.204824, 138.252924], [35.861660, 104.195397]],"tags":["conflict","ww2"]},{"text":"Rape of Nanking","links": {"main": {"title":"Rape of Nanking","link":"//en.wikipedia.org/wiki/Nanking_Massacre"}},"locations":["Nanking","China"],"latlong":[[32.060255, 118.796877]],"tags":["conflict","ww2"]},{"text":"Neville Chamberlain becomes Prime Minister of the United Kingdom","links": {"main": {"title":"Neville Chamberlain","link":"//en.wikipedia.org/wiki/Neville_Chamberlain"}},"locations":["United Kingdom"],"latlong":[[51.507351, -0.127758]],"tags":["person","government"]},{"text":"The Irish Republican Army attempts to assassinate King George VI of the United Kingdom","links": {"main": {"title":"Irish Republican Army","link":"//en.wikipedia.org/wiki/Irish_Republican_Army"},"related":[{"title":"George VI of the United Kingdom","link":"//en.wikipedia.org/wiki/George_VI_of_the_United_Kingdom"}]},"locations":["United Kingdom","Ireland"],"latlong":[[51.507351, -0.127758], [53.412910, -8.24389]],"tags":["person","conflict"]},{"text":"Snow White and the Seven Dwarfs is the first feature-length animated movie released","links": {"main": {"title":"Snow White and the Seven Dwarfs","link":"//en.wikipedia.org/wiki/Snow_White_and_the_Seven_Dwarfs_(1937_film)"}},"locations":[""],"latlong":[],"tags":["art"]},{"text":"Death of George Gershwin","links": {"main": {"title":"George Gershwin","link":"//en.wikipedia.org/wiki/George_Gershwin"}},"locations":["Los Angeles","California","United States of America"],"latlong":[[34.052234, -118.243685]],"tags":["art","person","death"]},{"text":"Death of Maurice Ravel","links": {"main": {"title":"Maurice Ravel","link":"//en.wikipedia.org/wiki/Maurice_Ravel"}},"locations":["Paris","France"],"latlong":[[48.856614, 2.352222]],"tags":["art","person","death"]},{"text":"German zeppelin Hindenburg crashes in Lakehurst, New Jersey","links": {"main": {"title":"Hindenburg Disaster","link":"//en.wikipedia.org/wiki/Hindenburg_disaster"},"related":[{"title":"Hindenburg","link":"//en.wikipedia.org/wiki/LZ_129_Hindenburg"},{"title":"Lakehurst, New Jersey","link":"//en.wikipedia.org/wiki/Lakehurst,_New_Jersey"}]},"locations":["New Jersey","United States of America"],"latlong":[[40.058324, -74.405661]],"tags":["disaster"]}],"1938":[{"text":"Anschluss unifies Germany and Austria","links": {"main": {"title":"Anschluss","link":"//en.wikipedia.org/wiki/Anschluss"}},"locations":["Germany","Austria"],"latlong":[[51.165691, 10.451526], [47.516231, 14.550072]],"tags":["ww2"]},{"text":"Munich agreement hands Czechoslovakia to Nazi Germany","links": {"main": {"title":"Munich agreement","link":"//en.wikipedia.org/wiki/Munich_Agreement"}},"locations":["Czechoslovakia","Germany"],"latlong":[[14.480317, 121.039062], [51.165691, 10.451526]],"tags":["ww2","treaty"]},{"text":"Great Purge ends after nearly 700,000 executions","links": {"main": {"title":"Great Purge","link":"//en.wikipedia.org/wiki/Great_Purge"}},"locations":["Soviet Union"],"latlong":[[33.889764, -117.818796]],"tags":["conflict"]},{"text":"Kristallnacht in Germany, while Time Magazine declares Adolf Hitler as Man of the Year","links": {"main": {"title":"Kristallnacht","link":"//en.wikipedia.org/wiki/Kristallnacht"},"related":[{"title":"Time Magazine","link":"//en.wikipedia.org/wiki/Time_(magazine)"},{"title":"Adolf Hitler","link":"//en.wikipedia.org/wiki/Adolf_Hitler"}]},"locations":["Germany"],"latlong":[[51.165691, 10.451526]],"tags":["ww2"]},{"text":"DC Comics hero Superman has its first appearance","links": {"main": {"title":"DC Comics","link":"//en.wikipedia.org/wiki/DC_Comics"},"related":[{"title":"Superman","link":"//en.wikipedia.org/wiki/Superman"}]},"locations":[""],"latlong":[],"tags":["art","social"]}],"1939":[{"text":"End of Spanish Civil War; Francisco Franco becomes dictator of Spain","links": {"main": {"title":"Spanish Civil War","link":"//en.wikipedia.org/wiki/Spanish_Civil_War"},"related":[{"title":"Francisco Franco","link":"//en.wikipedia.org/wiki/Francisco_Franco"}]},"locations":["Spain"],"latlong":[[40.463667, -3.74922]],"tags":["government","person"]},{"text":"Molotov-Ribbentrop Pact between Germany and the Soviet Union","links": {"main": {"title":"Molotov–Ribbentrop Pact","link":"//en.wikipedia.org/wiki/Molotov–Ribbentrop_Pact"}},"locations":["Germany","Soviet Union"],"latlong":[[51.165691, 10.451526], [33.889764, -117.818796]],"tags":["ww2"]},{"text":"Nazi invasion of Poland triggers the beginning of World War II in Europe","links": {"main": {"title":"Nazi invasion of Poland","link":"//en.wikipedia.org/wiki/Invasion_of_Poland"}},"locations":["Poland"],"latlong":[[51.919438, 19.145136]],"tags":["ww2"]},{"text":"Soviet invasion of Poland begins 16 days later","links": {"main": {"title":"World War II","link":"//en.wikipedia.org/wiki/World_War_II"}},"locations":["Poland"],"latlong":[[51.919438, 19.145136]],"tags":["ww2"]},{"text":"Palestinian revolt against the British ends","links": {"main": {"title":"Soviet invasion of Poland","link":"//en.wikipedia.org/wiki/Soviet_invasion_of_Poland"}},"locations":["Palestine","Great Britain"],"latlong":[[31.952162, 35.233154], [51.507351, -0.127758]],"tags":["conflict"]},{"text":"Pius XII becomes Pope","links": {"main": {"title":"Pius XII","link":"//en.wikipedia.org/wiki/Pope_Pius_XII"}},"locations":["Italy","Vatican City"],"latlong":[[41.902916, 12.453389]],"tags":["person","religion"]}],"1940":[{"text":"Nazis invade France, the Netherlands, Denmark and Norway","links": {"main": {"title":"Nazi Invasion of France","link":"//en.wikipedia.org/wiki/Battle_of_France"},"related":[{"title":"Battle of the Netherlands","link":"//en.wikipedia.org/wiki/Battle_of_the_Netherlands"},{"title":"Operation WeserÃ¼bung","link":"//en.wikipedia.org/wiki/Operation_WeserÃ¼bung"}]},"locations":["France","Netherlands","Denmark","Norway"],"latlong":[[46.227638, 2.213749], [52.132633, 5.291266], [56.263920, 9.501785], [60.472024, 8.468946]],"tags":["ww2"]},{"text":"Katyn massacre of Polish soldiers in USSR and the Soviet occupation of the Baltic states","links": {"main": {"title":"Katyn massacre","link":"//en.wikipedia.org/wiki/Katyn_massacre"},"related":[{"title":"occupation of the Baltic states","link":"//en.wikipedia.org/wiki/Occupation_of_the_Baltic_states"}]},"locations":["Poland","Soviet Union","Baltic States"],"latlong":[[51.919438, 19.145136], [33.889764, -117.818796]],"tags":["ww2"]},{"text":"Winter War between Soviet Union and Finland","links": {"main": {"title":"Winter War","link":"//en.wikipedia.org/wiki/Winter_War"}},"locations":["Soviet Union","Finland"],"latlong":[[33.889764, -117.818796], [61.924110, 25.748151]],"tags":["ww2"]},{"text":"Soviet Union annexes the Baltic states","links": {"main": {"title":"Soviet occupation of the Baltic states (1940)","link":"//en.wikipedia.org/wiki/Soviet_occupation_of_the_Baltic_states_(1940)"},"related":[{"title":"Baltic states","link":"//en.wikipedia.org/wiki/Baltic_states"}]},"locations":["Soviet Union","Baltic States"],"latlong":[[33.889764, -117.818796]],"tags":["ww2"]},{"text":"Winston Churchill becomes Prime Minister of the United Kingdom","links": {"main": {"title":"Winston Churchill","link":"//en.wikipedia.org/wiki/Winston_Churchill"}},"locations":["United Kingdom"],"latlong":[[51.507351, -0.127758]],"tags":["person","government"]},{"text":"Battle of Britain, the first entirely aerial military campaign, becomes the first significant defeat for the Axis powers","links": {"main": {"title":"Battle of Britain","link":"//en.wikipedia.org/wiki/Battle_of_Britain"}},"locations":["United Kingdom"],"latlong":[[51.507351, -0.127758]],"tags":["ww2"]},{"text":"The Blitz begins","links": {"main": {"title":"The Blitz","link":"//en.wikipedia.org/wiki/The_Blitz"}},"locations":["United Kingdom"],"latlong":[[51.507351, -0.127758]],"tags":["ww2"]},{"text":"Leon Trotsky is assassinated","links": {"main": {"title":"Leon Trotsky","link":"//en.wikipedia.org/wiki/Leon_Trotsky"}},"locations":["Mexico City","Mexico"],"latlong":[[19.432608, -99.133208]],"tags":["person","death"]},{"text":"Chechen insurgency begins in Soviet Union","links": {"main": {"title":"Chechen insurgency","link":"//en.wikipedia.org/wiki/1940–44_insurgency_in_Chechnya"}},"locations":["Soviet Union"],"latlong":[[33.889764, -117.818796]],"tags":["conflict"]}],"1941":[{"text":"Operation Reinhard commences the main phase of The Holocaust","links": {"main": {"title":"Operation Reinhard","link":"//en.wikipedia.org/wiki/Operation_Reinhard"},"related":[{"title":"The Holocaust","link":"//en.wikipedia.org/wiki/The_Holocaust"}]},"locations":["Germany"],"latlong":[[51.165691, 10.451526]],"tags":["ww2"]},{"text":"Attack on Pearl Harbor, which leads to the USA joining World War II","links": {"main": {"title":"Attack on Pearl Harbor","link":"//en.wikipedia.org/wiki/Attack_on_Pearl_Harbor"}},"locations":["Pearl Harbor","United States of America"],"latlong":[[21.344507, -157.974891]],"tags":["ww2"]},{"text":"Hitler commences the Nazi invasion of the Soviet Union","links": {"main": {"title":"Operation Barbarossa","link":"//en.wikipedia.org/wiki/Operation_Barbarossa"}},"locations":["Soviet Union"],"latlong":[[33.889764, -117.818796]],"tags":["ww2"]},{"text":"Siege of Tobruk in North Africa is the first major defeat for Hitler's land forces","links": {"main": {"title":"Siege of Tobruk","link":"//en.wikipedia.org/wiki/Siege_of_Tobruk"}},"locations":["Tobruk","Libya"],"latlong":[[32.076111, 23.961389]],"tags":["ww2"]},{"text":"Siege of Leningrad begins","links": {"main": {"title":"Siege of Leningrad","link":"//en.wikipedia.org/wiki/Siege_of_Leningrad"}},"locations":["Leningrad","Soviet Union"],"latlong":[[60.079321, 31.892664]],"tags":["ww2"]}],"1942":[{"text":"Battle of Midway","links": {"main": {"title":"Battle of Midway","link":"//en.wikipedia.org/wiki/Battle_of_Midway"}},"locations":["Midway Atoll"],"latlong":[[28.210076, -177.37611]],"tags":["ww2"]},{"text":"Battle of the Coral Sea","links": {"main": {"title":"Battle of the Coral Sea","link":"//en.wikipedia.org/wiki/Battle_of_the_Coral_Sea"}},"locations":["Coral Sea"],"latlong":[[-19.391955, 155.856065]],"tags":["ww2"]},{"text":"First and second Battles of El Alamein","links": {"main": {"title":"First Battle of El Alamein","link":"//en.wikipedia.org/wiki/First_Battle_of_El_Alamein"},"related":[{"title":"Second Battle of El Alamein","link":"//en.wikipedia.org/wiki/Second_Battle_of_El_Alamein"}]},"locations":["El Alamein","Egypt"],"latlong":[[30.822470, 28.954309]],"tags":["ww2"]},{"text":"Battle of Stalingrad and Guadalcanal Campaign begin","links": {"main": {"title":"Battle of Stalingrad","link":"//en.wikipedia.org/wiki/Battle_of_Stalingrad"},"related":[{"title":"Guadalcanal Campaign","link":"//en.wikipedia.org/wiki/Guadalcanal_Campaign"}]},"locations":["Stalingrad","Soviet Union","Guadalcanal"],"latlong":[[48.7, 44.516667], [-9.5773284, 160.1455805]],"tags":["ww2"]},{"text":"Internment of Japanese-American citizens in the US begins","links": {"main": {"title":"Japanese American internment","link":"//en.wikipedia.org/wiki/Internment_of_Japanese_Americans"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["ww2"]},{"text":"Manhattan Project begins","links": {"main": {"title":"Manhattan Project","link":"//en.wikipedia.org/wiki/Manhattan_Project"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["ww2","science","technology"]}],"1943":[{"text":"Battle of Stalingrad ends with over two million casualties and the retreat of the German Army","links": {"main": {"title":"Battle of Stalingrad","link":"//en.wikipedia.org/wiki/Battle_of_Stalingrad"}},"locations":["Soviet Union"],"latlong":[[33.889764, -117.818796]],"tags":["ww2"]},{"text":"The failed Battle of Kursk becomes the last Nazi offensive on the Eastern Front","links": {"main": {"title":"Battle of Kursk","link":"//en.wikipedia.org/wiki/Battle_of_Kursk"},"related":[{"title":"Eastern Front (World War II)","link":"//en.wikipedia.org/wiki/Eastern_Front_(World_War_II)"}]},"locations":["Soviet Union"],"latlong":[[33.889764, -117.818796]],"tags":["ww2"]},{"text":"Warsaw Ghetto uprising fails","links": {"main": {"title":"Warsaw Ghetto uprising","link":"//en.wikipedia.org/wiki/Warsaw_Ghetto_Uprising"}},"locations":["Warsaw","Poland"],"latlong":[[52.229676, 21.012229]],"tags":["ww2"]},{"text":"Tehran Conference between Franklin Roosevelt, Winston Churchill and Joseph Stalin agrees to launch Operation Overlord","links": {"main": {"title":"Tehran Conference","link":"//en.wikipedia.org/wiki/Tehran_Conference"},"related":[{"title":"Operation Overlord","link":"//en.wikipedia.org/wiki/Operation_Overlord"},{"title":"Franklin Roosevelt","link":"//en.wikipedia.org/wiki/Franklin_Roosevelt"},{"title":"Winston Churchill","link":"//en.wikipedia.org/wiki/Winston_Churchill"},{"title":"Joseph Stalin","link":"//en.wikipedia.org/wiki/Joseph_Stalin"}]},"locations":["Tehran","Iran"],"latlong":[[35.696111, 51.423056]],"tags":["ww2"]},{"text":"Green Revolution begins","links": {"main": {"title":"Green Revolution","link":"//en.wikipedia.org/wiki/Green_Revolution"}},"locations":[""],"latlong":[],"tags":["science","technology"]}],"1944":[{"text":"D-Day","links": {"main": {"title":"D-Day","link":"//en.wikipedia.org/wiki/Normandy_landings"}},"locations":["Normandy","France"],"latlong":[[48.87987, 0.171253]],"tags":["ww2"]},{"text":"The Siege of Leningrad ends with Soviet victory after over a million deaths","links": {"main": {"title":"Siege of Leningrad","link":"//en.wikipedia.org/wiki/Siege_of_Leningrad"}},"locations":["Leningrad","Soviet Union"],"latlong":[[60.079321, 31.892664]],"tags":["ww2"]},{"text":"Chechen insurgency ends with deportation of the entire Chechen population","links": {"main": {"title":"Operation Lentil (Caucasus)","link":"//en.wikipedia.org/wiki/Operation_Lentil_(Caucasus)"}},"locations":["Chechnya","Soviet Union"],"latlong":[[43.402330, 45.718747]],"tags":["disaster","ww2","government"]},{"text":"First operational electronic computer, Colossus, comes online","links": {"main": {"title":"Colossus computer","link" : "//en.wikipedia.org/wiki/Colossus_computer"},"related":[{"title":"Tommy Flowers","link":"//en.wikipedia.org/wiki/Tommy_Flowers"},{"title":"Max Newman","link":"//en.wikipedia.org/wiki/Max_Newman"},{"title":"Alan Turing","link":"//en.wikipedia.org/wiki/Alan_Turing"}]},"locations":["United Kingdom"],"latlong":[[51.507351, -0.127758]],"tags":["technology"]}],"1945":[{"text":"Bombing of Dresden","links": {"main": {"title":"Bombing of Dresden","link":"//en.wikipedia.org/wiki/Bombing_of_Dresden_in_World_War_II"}},"locations":["Dresden","Germany"],"latlong":[[51.050409, 13.737262]],"tags":["ww2"]},{"text":"Battle of Berlin","links": {"main": {"title":"Battle of Berlin","link":"//en.wikipedia.org/wiki/Battle_of_Berlin"}},"locations":["Berlin","Germany"],"latlong":[[52.520007, 13.404954]],"tags":["ww2"]},{"text":"Yalta Conference","links": {"main": {"title":"Yalta Conference","link":"//en.wikipedia.org/wiki/Yalta_Conference"}},"locations":["United States","United Kingdom","Soviet Union","Yalta","Crimea"],"latlong":[[39.740986, -102.128906], [51.507351, -0.127758], [33.889764, -117.818796], [44.495205, 34.166301]],"tags":["government","ww2"]},{"text":"End of World War II in Europe","links": {"main": {"title":"End of World War II in Europe","link":"//en.wikipedia.org/wiki/End_of_World_War_II_in_Europe"}},"locations":["Europe"],"latlong":[[48.944151, 13.403320]],"tags":["ww2"]},{"text":"The Holocaust ends after ~12 million deaths, including 6 million Jews","links": {"main": {"title":"The Holocaust","link":"//en.wikipedia.org/wiki/The_Holocaust"}},"locations":["Germany"],"latlong":[[51.165691, 10.451526]],"tags":["ww2"]},{"text":"Death of Franklin Delano Roosevelt","links": {"main": {"title":"Franklin Delano Roosevelt","link":"//en.wikipedia.org/wiki/Franklin_D._Roosevelt"}},"locations":["Georgia","United States of America"],"latlong":[[32.165622, -82.900075], [39.740986, -102.128906]],"tags":["person","death"]},{"text":"Death of Adolf Hitler","links": {"main": {"title":"Death of Adolf Hitler","link":"//en.wikipedia.org/wiki/Death_of_Adolf_Hitler"}},"locations":["Berlin","Germany"],"latlong":[[52.520007, 13.404954], [51.165691, 10.451526]],"tags":["person","death","ww2"]},{"text":"Death of Benito Mussolini","links": {"main": {"title":"Death of Benito Mussolini","link":"//en.wikipedia.org/wiki/Death_of_Benito_Mussolini"}},"locations":["Giulino di Mezzegra","Como","Italy"],"latlong":[[45.44693, 8.622161]],"tags":["person","death","ww2"]},{"text":"Creation of the atomic bomb, and the atomic bombings of Hiroshima and Nagasaki","links": {"main": {"title":"Atomic bomb","link":"//en.wikipedia.org/wiki/Atomic_bomb"},"related":[{"title":"Atomic bombings of Hiroshima and Nagasaki","link":"//en.wikipedia.org/wiki/Atomic_bombings_of_Hiroshima_and_Nagasaki"}]},"locations":["Hiroshima","Nagasaki","Japan"],"latlong":[[34.385203, 132.455293], [32.750286, 129.877667]],"tags":["ww2","science","technology"]},{"text":"End of World War II in Asia and beginning of the Occupation of Japan","links": {"main": {"title":"End of World War II in Asia","link":"//en.wikipedia.org/wiki/End_of_World_War_II_in_Asia"},"related":[{"title":"Occupation of Japan","link":"//en.wikipedia.org/wiki/Occupation_of_Japan"}]},"locations":["Japan"],"latlong":[[36.204824, 138.252924]],"tags":["ww2"]},{"text":"Potsdam Conference divides Europe into Western and Soviet blocs","links": {"main": {"title":"Potsdam Conference","link":"//en.wikipedia.org/wiki/Potsdam_Conference"}},"locations":["United States","United Kingdom","Soviet Union"],"latlong":[[39.740986, -102.128906], [51.507351, -0.127758], [33.889764, -117.818796]],"tags":["ww2","treaty","government"]},{"text":"United Nations founded","links": {"main": {"title":"United Nations","link":"//en.wikipedia.org/wiki/United_Nations"},"related":[{"title":"United Nations Conference on International Organization","link":"//en.wikipedia.org/wiki/United_Nations_Conference_on_International_Organization"},{"title":"Dumbarton Oaks Conference","link":"//en.wikipedia.org/wiki/Dumbarton_Oaks_Conference"}]},"locations":["San Francisco","United States of America"],"latlong":[[37.774929, -122.419416]],"tags":["government"]},{"text":"Independence of Korea","links": {"main": {"title":"Korea","link":"//en.wikipedia.org/wiki/Korea"}},"locations":["Korea"],"latlong":[[38.251123, 127.199707]],"tags":["government"]},{"text":"Death of Anne Frank","links": {"main": {"title":"Anne Frank","link":"//en.wikipedia.org/wiki/Anne_Frank"}},"locations":["Germany"],"latlong":[[51.165691, 10.451526]],"tags":["person","death"]},{"text":"Death of Béla BartÃ³k","links": {"main": {"title":"Béla BartÃ³k","link":"//en.wikipedia.org/wiki/Béla_BartÃ³k"}},"locations":["Hungary"],"latlong":[[47.162494, 19.503304]],"tags":["person","death","art"]},{"text":"Independence of Indonesia","links": {"main": {"title":"Proclamation of Indonesian Independence","link":"//en.wikipedia.org/wiki/Proclamation_of_Indonesian_Independence"}},"locations":["Indonesia"],"latlong":[[-0.789275, 113.921327]],"tags":["government"]},{"text":"Nuremberg trials begin","links": {"main": {"title":"Nuremberg trials","link":"//en.wikipedia.org/wiki/Nuremberg_trials"}},"locations":["Nuremberg"],"latlong":[[49.45203, 11.07675]],"tags":["ww2"]}],"1946":[{"text":"Italy becomes a republic","links": {"main": {"title":"Italian constitutional referendum, 1946","link":"//en.wikipedia.org/wiki/Italian_constitutional_referendum,_1946"}},"locations":["Italy"],"latlong":[[41.871940, 12.56738]],"tags":["government"]},{"text":"French Fourth Republic established","links": {"main": {"title":"French Fourth Republic","link":"//en.wikipedia.org/wiki/French_Fourth_Republic"}},"locations":["France"],"latlong":[[46.227638, 2.213749]],"tags":["government"]},{"text":"Independence of Jordan","links": {"main": {"title":"Treaty of London","link":"//en.wikipedia.org/wiki/Treaty_of_London_(1946)"}},"locations":["Jordan"],"latlong":[[30.585164, 36.238414]],"tags":["government"]},{"text":"Nuremberg trials end","links": {"main": {"title":"Nuremberg trials","link":"//en.wikipedia.org/wiki/Nuremberg_trials"}},"locations":["Nuremberg"],"latlong":[[49.45203, 11.07675]],"tags":["ww2"]},{"text":"First IndoChina War begins","links": {"main": {"title":"First Indochina War","link":"//en.wikipedia.org/wiki/First_Indochina_War"}},"locations":["French Indochina","France","Viet Minh"],"latlong":[[21.027764, 105.83416], [46.227638, 2.213749]],"tags":["conflict"]},{"text":"First images taken of the Earth from space","links": {"main": {"title":"Timeline of Solar System exploration","link":"//en.wikipedia.org/wiki/Timeline_of_Solar_System_exploration"},"related":[{"title":"V-2 rocket","link":"//en.wikipedia.org/wiki/V-2_rocket"},{"title":"Satellite imagery","link":"//en.wikipedia.org/wiki/Satellite_imagery"}]},"locations":["Space"],"latlong":[],"tags":["science","technology","exploration"]},{"text":"Bhumibol Adulyadej becomes King of Thailand","links": {"main": {"title":"Bhumibol Adulyadej","link":"//en.wikipedia.org/wiki/Bhumibol_Adulyadej"},"related":[{"title":"King of Thailand","link":"//en.wikipedia.org/wiki/King_of_Thailand"}]},"locations":["Thailand"],"latlong":[[15.870032, 100.992541]],"tags":["government","person"]},{"text":"Mustafa Barzani founds the Kurdistan Democratic Party","links": {"main": {"title":"Mustafa Barzani","link":"//en.wikipedia.org/wiki/Mustafa_Barzani"},"related":[{"title":"Kurdistan Democratic Party","link":"//en.wikipedia.org/wiki/Kurdistan_Democratic_Party"}]},"locations":["Kurdistan"],"latlong":[[35.955358, 47.136213]],"tags":["government","person"]},{"text":"Treaty of Manila declares Philippines independent","links": {"main": {"title":"Treaty of Manila (1946)","link":"//en.wikipedia.org/wiki/Treaty_of_Manila_(1946)"}},"locations":["Philippines"],"latlong":[[10.517518, 123.958740]],"tags":["government","treaty"]}],"1947":[{"text":"Independence of India and Pakistan and beginning of First Indo-Pakistani War","links": {"main": {"title":"Pakistani War of 1947","link":"//en.wikipedia.org/wiki/Indo-Pakistani_War_of_1947"}},"locations":["India","Pakistan"],"latlong":[[20.593684, 78.96288], [30.375321, 69.345116]],"tags":["conflict"]},{"text":"Invention of the first practical transistor","links": {"main": {"title":"Transistor","link":"//en.wikipedia.org/wiki/Transistor"},"related":[{"title":"John Bardeen","link":"//en.wikipedia.org/wiki/John_Bardeen"},{"title":"Walter Houser Brattain","link":"//en.wikipedia.org/wiki/Walter_Houser_Brattain"},{"title":"William Shockley","link":"//en.wikipedia.org/wiki/William_Shockley"},{"title":"Bell Labs","link":"//en.wikipedia.org/wiki/Bell_Labs"}]},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["science","technology"]},{"text":"Breaking of the sound barrier","links": {"main": {"title":"Miles M.52","link":"//en.wikipedia.org/wiki/Miles_M.52"},"related":[{"title":"Bell X-1","link":"//en.wikipedia.org/wiki/Bell_X-1"},{"title":"Chuck Yeager","link":"//en.wikipedia.org/wiki/Chuck_Yeager"},{"title":"Sound barrier","link":"//en.wikipedia.org/wiki/Sound_barrier"}]},"locations":["Edwards Air Force Base","California","United States of America"],"latlong":[[34.924031, -117.891208]],"tags":["science","technology"]},{"text":"Harry Truman establishes the Truman Doctrine of containment of Communism","links": {"main": {"title":"Harry Truman","link":"//en.wikipedia.org/wiki/Harry_S._Truman"},"related":[{"title":"Truman Doctrine","link":"//en.wikipedia.org/wiki/Truman_Doctrine"}]},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["person","government"]},{"text":"Creation of the U.S. Central Intelligence Agency","links": {"main": {"title":"Central Intelligence Agency","link":"//en.wikipedia.org/wiki/Central_Intelligence_Agency"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["government"]}],"1948":[{"text":"United Nations establishes Israeli Independence and the formation of the official State of Israel","links": {"main": {"title":"Israeli Declaration of Independence","link":"//en.wikipedia.org/wiki/Israeli_Declaration_of_Independence"}},"locations":["Israel"],"latlong":[[31.046051, 34.851612]],"tags":["government"]},{"text":"Arab-Israeli War","links": {"main": {"title":"1948 Arab-Israeli War","link":"//en.wikipedia.org/wiki/1948_Arab–Israeli_War"}},"locations":["Israel","Arab League","Lebanon"],"latlong":[[31.046051, 34.851612], [33.854721, 35.862285]],"tags":["conflict"]},{"text":"Berlin Blockade begins","links": {"main": {"title":"Berlin Blockade","link":"//en.wikipedia.org/wiki/Berlin_Blockade"}},"locations":["Berlin","Germany","Soviet Union"],"latlong":[[52.520007, 13.404954]],"tags":["transport","cold war"]},{"text":"Marshall Plan; founding of the OECD and the World Health Organization","links": {"main": {"title":"Marshall Plan","link":"//en.wikipedia.org/wiki/Marshall_Plan"},"related":[{"title":"OECD","link":"//en.wikipedia.org/wiki/OECD"},{"title":"World Health Organization","link":"//en.wikipedia.org/wiki/World_Health_Organization"}]},"locations":["Europe","United States of America"],"latlong":[[48.944151, 13.403320], [39.740986, -102.128906]],"tags":["social","treaty","economy"]},{"text":"Assassination of Mahatma Gandhi","links": {"main": {"title":"Mahatma Gandhi","link":"//en.wikipedia.org/wiki/Mahatma_Gandhi"}},"locations":["India"],"latlong":[[20.593684, 78.96288]],"tags":["death","person"]},{"text":"The independence of Burma","links": {"main": {"title":"Burma","link":"//en.wikipedia.org/wiki/Burma"}},"locations":["Burma"],"latlong":[[21.913965, 95.956223]],"tags":["government"]},{"text":"Beginning of apartheid in South Africa","links": {"main": {"title":"Apartheid","link":"//en.wikipedia.org/wiki/Apartheid"}},"locations":["South Africa"],"latlong":[[-30.559482, 22.937506]],"tags":["government"]},{"text":"Division of North and South Korea","links": {"main": {"title":"North Korea","link":"//en.wikipedia.org/wiki/North_Korea"},"related":[{"title":"South Korea","link":"//en.wikipedia.org/wiki/South_Korea"}]},"locations":["North Korea","South Korea"],"latlong":[[40.339852, 127.510093], [35.907757, 127.766922]],"tags":["government"]},{"text":"First Indo-Pakistani War ends","links": {},"locations":["India","Pakistan"],"latlong":[[20.593684, 78.96288], [30.375321, 69.345116]],"tags":["conflict"]},{"text":"The Soviet Sever-2 expedition become the first party to indisputably set foot on the North Pole","links": {"main": {"title":"North Pole","link":"//en.wikipedia.org/wiki/North_Pole"}},"locations":["North Pole"],"latlong":[[90.000000, 0]],"tags":["exploration"]}],"1949":[{"text":"Creation of NATO","links": {},"locations":[""],"latlong":[],"tags":["government"]},{"text":"Berlin Blockade ends","links": {"main": {"title":"NATO","link":"//en.wikipedia.org/wiki/NATO"}},"locations":["Berlin","Germany","Soviet Union"],"latlong":[[52.520007, 13.404954], [33.889764, -117.818796]],"tags":["transport","cold war"]},{"text":"Partition of Germany into the Soviet socialist German Democratic Republic and the NATO-backed Federal Republic of Germany","links": {"main": {"title":"Berlin Blockade","link":"//en.wikipedia.org/wiki/Berlin_Blockade"},"related":[{"title":"Soviet socialism","link":"//en.wikipedia.org/wiki/Soviet_socialism"},{"title":"German Democratic Republic","link":"//en.wikipedia.org/wiki/German_Democratic_Republic"},{"title":"West Germany","link":"//en.wikipedia.org/wiki/West_Germany"}]},"locations":["German Democratic Republic","West Germany"],"latlong":[[51.165691, 10.451526], [51.256213, 7.150764]],"tags":["government"]},{"text":"COMECON founded by USSR and the Eastern Bloc","links": {"main": {"title":"COMECON","link":"//en.wikipedia.org/wiki/Comecon"},"related":[{"title":"Eastern Bloc","link":"//en.wikipedia.org/wiki/Eastern_Bloc"}]},"locations":["Eastern Bloc","Soviet Union"],"latlong":[[33.889764, -117.818796]],"tags":["government","treaty"]},{"text":"Partition of Kashmir","links": {"main": {"title":"Kashmir","link":"//en.wikipedia.org/wiki/Kashmir"}},"locations":["Kashmir","India"],"latlong":[[33.778175, 76.576171], [20.593684, 78.96288]],"tags":["government"]},{"text":"Establishment of the People's Republic of China under Mao Zedong; The Republic of China relocates to Taiwan","links": {"main": {"title":"China","link":"//en.wikipedia.org/wiki/China"},"related":[{"title":"Mao Zedong","link":"//en.wikipedia.org/wiki/Mao_Zedong"},{"title":"Republic of China","link":"//en.wikipedia.org/wiki/Republic_of_China"},{"title":"Taiwan","link":"//en.wikipedia.org/wiki/Taiwan"}]},"locations":["Taiwan","China"],"latlong":[[23.697810, 120.960515], [35.861660, 104.195397]],"tags":["government"]},{"text":"Soviet Union tests atomic bomb","links": {"main": {"title":"Atomic bomb","link":"//en.wikipedia.org/wiki/Atomic_bomb"}},"locations":["Soviet Union"],"latlong":[[33.889764, -117.818796]],"tags":["technology"]}],"1950":[{"text":"Communist victory in the Landing Operation on Hainan Island and Wanshan Archipelago Campaign end the Chinese Civil War","links": {"main": {"title":"Landing Operation on Hainan Island","link":"//en.wikipedia.org/wiki/Landing_Operation_on_Hainan_Island"},"related":[{"title":"Wanshan Archipelago Campaign","link":"//en.wikipedia.org/wiki/Wanshan_Archipelago_Campaign"},{"title":"Chinese Civil War","link":"//en.wikipedia.org/wiki/Chinese_Civil_War"}]},"locations":["China"],"latlong":[[35.861660, 104.195397]],"tags":["conflict"]},{"text":"Beginning of the Korean War","links": {"main": {"title":"Korean War","link":"//en.wikipedia.org/wiki/Korean_War"}},"locations":["Korea"],"latlong":[[38.251123, 127.199707]],"tags":["conflict"]},{"text":"Lhamo Dondrub becomes the 14th Dalai Lama of Tibet","links": {"main": {"title":"14th Dalai Lama","link":"//en.wikipedia.org/wiki/14th_Dalai_Lama"},"related":[{"title":"Tibet","link":"//en.wikipedia.org/wiki/Tibet"}]},"locations":["Tibet"],"latlong":[[29.646923, 91.117212]],"tags":["person"]}],"1951":[{"text":"Colombo Plan comes into effect","links": {"main": {"title":"Colombo Plan","link":"//en.wikipedia.org/wiki/Colombo_Plan"}},"locations":["Colombo","Sri Lanka"],"latlong":[[6.927079, 79.861243]],"tags":["treaty","government"]},{"text":"Treaty of San Francisco ends the Occupation of Japan and formally concludes hostilities between Japan and the US","links": {"main": {"title":"Treaty of San Francisco","link":"//en.wikipedia.org/wiki/Treaty_of_San_Francisco"},"related":[{"title":"Occupation of Japan","link":"//en.wikipedia.org/wiki/Occupation_of_Japan"}]},"locations":["San Francisco","United States of America"],"latlong":[[37.774929, -122.419416]],"tags":["treaty","ww2"]}],"1952":[{"text":"Egyptian Revolution under Gamal Abdel Nasser overthrows King Farouk and ends British occupation","links": {"main": {"title":"Egyptian Revolution of 1952","link":"//en.wikipedia.org/wiki/Egyptian_Revolution_of_1952"},"related":[{"title":"Gamal Abdel Nasser","link":"//en.wikipedia.org/wiki/Gamal_Abdel_Nasser"},{"title":"King Farouk","link":"//en.wikipedia.org/wiki/King_Farouk"}]},"locations":["Egypt"],"latlong":[[26.820553, 30.802498]],"tags":["conflict"]},{"text":"Death of King George VI, Queen Elizabeth II becomes Monarch of the Commonwealth realms","links": {"main": {"title":"George VI","link":"//en.wikipedia.org/wiki/George_VI"},"related":[{"title":"Elizabeth II","link":"//en.wikipedia.org/wiki/Elizabeth_II"},{"title":"Commonwealth realms","link":"//en.wikipedia.org/wiki/Commonwealth_realms"}]},"locations":["United Kingdom"],"latlong":[[51.507351, -0.127758]],"tags":["person","death","government"]},{"text":"Bonn-Paris conventions end allied occupation of West Germany","links": {"main": {"title":"Bonn–Paris conventions","link":"//en.wikipedia.org/wiki/Bonn–Paris_conventions"},"related":[{"title":"London and Paris Conferences","link":"//en.wikipedia.org/wiki/London_and_Paris_Conferences"},{"title":"NATO","link":"//en.wikipedia.org/wiki/NATO"}]},"locations":["Paris","France"],"latlong":[[48.856614, 2.352222]],"tags":["treaty"]},{"text":"Slansky Trial in Czechoslovakia","links": {"main": {"title":"SlánskÃ½ Trial","link":"//en.wikipedia.org/wiki/SlánskÃ½_trial"}},"locations":["Czechoslovakia"],"latlong":[[14.480317, 121.039062]],"tags":["government"]},{"text":"First Lady of Argentina Eva PerÃ³n dies of cancer aged 33","links": {"main": {"title":"Eva PerÃ³n","link":"//en.wikipedia.org/wiki/Eva_PerÃ³n"},"related":[{"title":"First Ladies and Gentlemen of Argentina","link":"//en.wikipedia.org/wiki/First_Ladies_and_Gentlemen_of_Argentina"}]},"locations":["Argentina"],"latlong":[[-38.416097, -63.616672]],"tags":["person","death"]},{"text":"Detonation of the hydrogen bomb","links": {"main": {"title":"History of the Teller–Ulam design","link":"//en.wikipedia.org/wiki/History_of_the_Teller–Ulam_design"},"related":[{"title":"Ivy Mike","link":"//en.wikipedia.org/wiki/Ivy_Mike"},{"title":"Hydrogen bomb","link":"//en.wikipedia.org/wiki/Hydrogen_bomb"}]},"locations":["Enewetak Atoll"],"latlong":[[11.465363, 162.189]],"tags":["science","technology"]},{"text":"First scheduled flight by commercial jet","links": {"main": {"title":"De Havilland Comet","link":"//en.wikipedia.org/wiki/De_Havilland_Comet"},"related":[{"title":"British Overseas Airways Corporation","link":"//en.wikipedia.org/wiki/British_Overseas_Airways_Corporation"}]},"locations":["London","United Kingdom","Johannesburg","South Africa"],"latlong":[[51.507351, -0.127758], [-26.204103, 28.047305]],"tags":["transport","technology"]},{"text":"Development of the first effective polio vaccine by Jonas Salk","links": {"main": {"title":"Polio vaccine","link":"//en.wikipedia.org/wiki/Polio_vaccine"},"related":[{"title":"Jonas Salk","link":"//en.wikipedia.org/wiki/Jonas_Salk"}]},"locations":["Pittsburgh","United States of America"],"latlong":[[40.440625, -79.995886]],"tags":["science","person"]},{"text":"Mau Mau Uprising begins in Kenya","links": {"main": {"title":"Mau Mau Uprising","link":"//en.wikipedia.org/wiki/Mau_Mau_Uprising"},"related":[{"title":"Kenya","link":"//en.wikipedia.org/wiki/Kenya"}]},"locations":["Kenya"],"latlong":[[-0.023559, 37.906193]],"tags":["conflict"]}],"1953":[{"text":"Independence of Cambodia","links": {"main": {"title":"Cambodia","link":"//en.wikipedia.org/wiki/Cambodia"}},"locations":["Cambodia"],"latlong":[[12.565679, 104.990963]],"tags":["government"]},{"text":"Discovery of the three-dimensional structure of DNA","links": {"main": {"title":"DNA","link":"//en.wikipedia.org/wiki/DNA"},"related":[{"title":"Francis Crick","link":"//en.wikipedia.org/wiki/Francis_Crick"},{"title":"James Watson","link":"//en.wikipedia.org/wiki/James_Watson"}]},"locations":["Cambridge","United Kingdom"],"latlong":[[52.205337, 0.121817]],"tags":["science"]},{"text":"First ascent of Mount Everest","links": {"main": {"title":"1953 British Mount Everest expedition","link":"//en.wikipedia.org/wiki/1953_British_Mount_Everest_expedition"}},"locations":["Everest","Himalayas","Nepal","China"],"latlong":[[27.987902, 86.925314]],"tags":["exploration"]},{"text":"Mohammed Mosaddegh deposed in Iran","links": {"main": {"title":"Mohammed Mosaddegh","link":"//en.wikipedia.org/wiki/Mohammad_Mosaddegh"}},"locations":["Iran"],"latlong":[[32.427908, 53.688046]],"tags":["government"]},{"text":"End of the Korean War","links": {"main": {"title":"Korean War","link":"//en.wikipedia.org/wiki/Korean_War"}},"locations":["Korea"],"latlong":[[38.251123, 127.199707]],"tags":["conflict"]},{"text":"Death of Joseph Stalin; East German Uprising leads to the arrest and execution of Lavrentiy Beria; power struggle begins between Georgy Malenkov and Nikita Khrushchev","links": {"main": {"title":"Joseph Stalin","link":"//en.wikipedia.org/wiki/Joseph_Stalin"},"related":[{"title":"Uprising of 1953 in East Germany","link":"//en.wikipedia.org/wiki/Uprising_of_1953_in_East_Germany"},{"title":"Lavrentiy Beria","link":"//en.wikipedia.org/wiki/Lavrentiy_Beria"},{"title":"Georgy Malenkov","link":"//en.wikipedia.org/wiki/Georgy_Malenkov"},{"title":"Nikita Khrushchev","link":"//en.wikipedia.org/wiki/Nikita_Khrushchev"}]},"locations":["Germany"],"latlong":[[51.165691, 10.451526]],"tags":["person","death","government"]},{"text":"Elvis Presley's musical career is launched","links": {"main": {"title":"Elvis Presley","link":"//en.wikipedia.org/wiki/Elvis_Presley"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["art"]}],"1954":[{"text":"Paris Treaty establishes Western European Union","links": {"main": {"title":"Western European Union","link":"//en.wikipedia.org/wiki/Western_European_Union"}},"locations":["Europe"],"latlong":[[48.944151, 13.403320]],"tags":["treaty"]},{"text":"Supreme Court of the United States decides Brown v Board of Education, ordering an end to racial segregation in public schools","links": {"main": {"title":"Racial segregation in the United States","link":"//en.wikipedia.org/wiki/Racial_segregation_in_the_United_States"},"related":[{"title":"Supreme Court of the United States","link":"//en.wikipedia.org/wiki/Supreme_Court_of_the_United_States"}]},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["equality","social"]},{"text":"Rock Around the Clock by Bill Haley & His Comets, brings rock and roll to the American mainstream","links": {"main": {"title":"Bill Haley & His Comets","link":"//en.wikipedia.org/wiki/Bill_Haley_%26_His_Comets"},"related":[{"title":"Rock and roll","link":"//en.wikipedia.org/wiki/Rock_and_roll"}]},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["art"]},{"text":"The Soviet Union generates first electricity by nuclear power","links": {"main": {"title":"Soviet Union","link":"//en.wikipedia.org/wiki/Soviet_Union"},"related":[{"title":"Nuclear power","link":"//en.wikipedia.org/wiki/Nuclear_power"}]},"locations":["Soviet Union"],"latlong":[[33.889764, -117.818796]],"tags":["science","technology"]},{"text":"First IndoChina War ends","links": {"main": {"title":"First Indochina War","link":"//en.wikipedia.org/wiki/First_Indochina_War"}},"locations":["French Indochina","France","Viet Minh"],"latlong":[[21.027764, 105.83416, 46.227638, 2.213749]],"tags":["conflict"]},{"text":"Algerian War begins","links": {"main": {"title":"Algerian War","link":"//en.wikipedia.org/wiki/Algerian_War"}},"locations":["Algeria"],"latlong":[[28.033886, 1.659626]],"tags":["conflict"]},{"text":"First Taiwan Strait Crisis begins","links": {"main": {"title":"First Taiwan Strait Crisis","link":"//en.wikipedia.org/wiki/First_Taiwan_Strait_Crisis"}},"locations":["China","United States of America"],"latlong":[[35.861660, 104.195397], [39.740986, -102.128906]],"tags":["conflict"]}],"1955":[{"text":"Nikita Khrushchev assumes control of the Soviet Union","links": {"main": {"title":"Nikita Khrushchev","link":"//en.wikipedia.org/wiki/Nikita_Khrushchev"},"related":[{"title":"Soviet Union","link":"//en.wikipedia.org/wiki/Soviet_Union"}]},"locations":["Soviet Union"],"latlong":[[33.889764, -117.818796]],"tags":["person","government"]},{"text":"Signing of the Warsaw Pact","links": {"main": {"title":"Warsaw Pact","link":"//en.wikipedia.org/wiki/Warsaw_Pact"}},"locations":["Warsaw","Poland","Bulgaria","Czechoslovakia","East Germany","Hungary","Romania","Soviet Union","Albania"],"latlong":[[52.229676, 21.012229], [42.733883, 25.48583], [14.480317, 121.039062], [51.165691, 10.451526], [47.162494, 19.503304], [45.943161, 24.96676], [33.889764, -117.818796], [41.153332, 20.168331]],"tags":["treaty","cold war"]},{"text":"First Sudanese Civil War begins","links": {"main": {"title":"First Sudanese Civil War","link":"//en.wikipedia.org/wiki/First_Sudanese_Civil_War"}},"locations":["Sudan"],"latlong":[[12.862807, 30.217636]],"tags":["conflict"]},{"text":"First Taiwan Strait Crisis ends","links": {"main": {"title":"First Taiwan Strait Crisis","link":"//en.wikipedia.org/wiki/First_Taiwan_Strait_Crisis"}},"locations":["China","United States of America"],"latlong":[[35.861660, 104.195397], [39.740986, -102.128906]],"tags":["conflict"]},{"text":"Antimatter first produced","links": {"main": {"title":"Antimatter","link":"//en.wikipedia.org/wiki/Antimatter"},"related":[{"title":"Bevatron","link":"//en.wikipedia.org/wiki/Bevatron"},{"title":"Emilio G. Segrè","link":"//en.wikipedia.org/wiki/Emilio_G._Segrè"},{"title":"Owen Chamberlain","link":"//en.wikipedia.org/wiki/Owen_Chamberlain"}]},"locations":["California","United States of America"],"latlong":[[36.778261, -119.417932]],"tags":["science"]},{"text":"Formation of the Central Treaty Organization","links": {"main": {"title":"Central Treaty Organization","link":"//en.wikipedia.org/wiki/Central_Treaty_Organization"}},"locations":["Iran","Iraq","Pakistan","Turkey","United Kingdom"],"latlong":[[32.427908, 53.688046], [33.223191, 43.679291], [30.375321, 69.345116], [38.963745, 35.243322], [51.507351, -0.127758]],"tags":["cold war"]}],"1956":[{"text":"Independence of Sudan","links": {"main": {"title":"Independence of Sudan","link":"//en.wikipedia.org/wiki/History_of_Sudan_(1956–69)"}},"locations":["Sudan"],"latlong":[[12.862807, 30.217636]],"tags":["government"]},{"text":"Independence of Tunisia","links": {"main": {"title":"Independence of Tunisia","link":"//en.wikipedia.org/wiki/Tunisian_independence"}},"locations":["Tunisia"],"latlong":[[33.886917, 9.537499]],"tags":["government"]},{"text":"Independence of Pakistan","links": {"main": {"title":"Constitution of Pakistan of 1956","link":"//en.wikipedia.org/wiki/Constitution_of_Pakistan_of_1956"}},"locations":["Pakistan"],"latlong":[[30.375321, 69.345116]],"tags":["government"]},{"text":"The Hungarian Uprising crushed by Soviet troops","links": {"main": {"title":"Hungarian Uprising of 1956","link":"//en.wikipedia.org/wiki/Hungarian_Revolution_of_1956"}},"locations":["Hungary"],"latlong":[[47.162494, 19.503304]],"tags":["government","internal conflict"]},{"text":"Nasser's nationalisation of the Suez Canal triggers the Suez crisis","links": {"main": {"title":"Suez crisis","link":"//en.wikipedia.org/wiki/Suez_Crisis"}},"locations":["Gaza Strip","Egypt","Sinai","Suez Canal","Israel","United Kingdom","France"],"latlong":[[31.522561, 34.453593], [26.820553, 30.802498], [44.244415, -97.040895], [30.7550180, 32.3441790], [31.046051, 34.851612], [51.507351, -0.127758], [46.227638, 2.213749]],"tags":["government","conflict"]},{"text":"Brasilia constructed","links": {"main": {"title":"Brasilia","link":"//en.wikipedia.org/wiki/BrasÃ­lia"}},"locations":["Brasilia","Brazil"],"latlong":[[-14.235004, -51.92528]],"tags":["government","social"]}],"1957":[{"text":"Launch of Sputnik 1 and the beginning of the Space Age","links": {"main": {"title":"Space Age","link":"//en.wikipedia.org/wiki/Space_Age"}},"locations":["Soviet Union"],"latlong":[[33.889764, -117.818796]],"tags":["science","technology"]},{"text":"Independence of Ghana","links": {"main": {"title":"Ghana","link":"//en.wikipedia.org/wiki/Ghana"}},"locations":["Ghana"],"latlong":[[7.946527, -1.023194]],"tags":["government"]},{"text":"Treaty of Rome, which would eventually lead to the European Union","links": {"main": {"title":"Treaty of Rome","link":"//en.wikipedia.org/wiki/Treaty_of_Rome"},"related":[{"title":"European Union","link":"//en.wikipedia.org/wiki/European_Union"}]},"locations":["Belgium","France","Italy","Luxembourg","Netherlands","West Germany"],"latlong":[[50.503887, 4.469936], [46.227638, 2.213749], [41.871940, 12.56738], [49.815273, 6.129583], [52.132633, 5.291266], [51.256213, 7.150764]],"tags":["treaty","government","economy"]},{"text":"Harold Macmillan become British Prime Minister","links": {"main": {"title":"Harold Macmillan","link":"//en.wikipedia.org/wiki/Harold_Macmillan"}},"locations":["United Kingdom"],"latlong":[[51.507351, -0.127758]],"tags":["person","government"]},{"text":"First prescription of the combined oral contraceptive pill","links": {"main": {"title":"Combined oral contraceptive pill","link":"//en.wikipedia.org/wiki/Combined_oral_contraceptive_pill"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["science","technology","equality"]}],"1958":[{"text":"Great Chinese Famine begins in China","links": {"main": {"title":"Great Chinese Famine","link":"//en.wikipedia.org/wiki/Great_Chinese_Famine"}},"locations":["China"],"latlong":[[35.861660, 104.195397]],"tags":["natural disaster","government","economy","disaster"]},{"text":"French Fifth Republic established","links": {"main": {"title":"French Fifth Republic","link":"//en.wikipedia.org/wiki/French_Fifth_Republic"}},"locations":["France"],"latlong":[[46.227638, 2.213749]],"tags":["government"]},{"text":"NASA is formed","links": {"main": {"title":"NASA","link":"//en.wikipedia.org/wiki/NASA"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["science","technology"]},{"text":"Federal Aviation Administration founded","links": {"main": {"title":"Federal Aviation Administration","link":"//en.wikipedia.org/wiki/Federal_Aviation_Administration"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["government","technology","transport"]},{"text":"Campaign for Nuclear Disarmament (CND) founded, and their symbol, the peace sign, is first used","links": {"main": {"title":"Campaign for Nuclear Disarmament","link":"//en.wikipedia.org/wiki/Campaign_for_Nuclear_Disarmament"},"related":[{"title":"Peace sign","link":"//en.wikipedia.org/wiki/Peace_sign"}]},"locations":["United Kingdom"],"latlong":[[51.507351, -0.127758]],"tags":["social"]},{"text":"Invention of the optical disc and the cassette tape","links": {"main": {"title":"Optical disc","link":"//en.wikipedia.org/wiki/Optical_disc"},"related":[{"title":"Cassette tape","link":"//en.wikipedia.org/wiki/Cassette_tape"}]},"locations":["California","New York","United States of America"],"latlong":[[36.778261, -119.417932], [40.712784, -74.005941]],"tags":["technology"]},{"text":"Second Taiwan Strait Crisis","links": {"main": {"title":"Second Taiwan Strait Crisis","link":"//en.wikipedia.org/wiki/Second_Taiwan_Strait_Crisis"}},"locations":["China"],"latlong":[[35.861660, 104.195397]],"tags":["conflict"]}],"1959":[{"text":"Cuban Revolution","links": {"main": {"title":"Cuban Revolution","link":"//en.wikipedia.org/wiki/Cuban_Revolution"}},"locations":["Cuban"],"latlong":[[21.521757, -77.781167]],"tags":["government","conflict"]},{"text":"Independence of Cyprus","links": {"main": {"title":"Cyprus","link":"//en.wikipedia.org/wiki/Cyprus"}},"locations":["Cyprus"],"latlong":[[35.126413, 33.429859]],"tags":["government"]},{"text":"Independence of Singapore","links": {"main": {"title":"Singapore","link":"//en.wikipedia.org/wiki/Singapore"}},"locations":["Singapore"],"latlong":[[1.352083, 103.819836]],"tags":["government"]},{"text":"Admission of Alaska and Hawaii into the United States","links": {"main": {"title":"Alaska","link":"//en.wikipedia.org/wiki/Alaska"},"related":[{"title":"Hawaii","link":"//en.wikipedia.org/wiki/Hawaii"}]},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["government"]},{"text":"Uprising in Tibet against China leads to the exile of the Dalai Lama","links": {"main": {"title":"1959 Tibetan uprising","link":"//en.wikipedia.org/wiki/1959_Tibetan_uprising"},"related":[{"title":"Dalai Lama","link":"//en.wikipedia.org/wiki/Dalai_Lama"}]},"locations":["Tibet","China"],"latlong":[[29.646923, 91.117212], [35.861660, 104.195397]],"tags":["conflict"]},{"text":"First documented AIDS cases","links": {"main": {"title":"History of HIV/AIDS","link":"//en.wikipedia.org/wiki/History_of_HIV/AIDS"},"related":[{"title":"Timeline of early HIV/AIDS cases","link":"//en.wikipedia.org/wiki/Timeline_of_early_HIV/AIDS_cases"},{"title":"AIDS","link":"//en.wikipedia.org/wiki/AIDS"}]},"locations":["Manchester","England","United Kingdom","Belgian Congo","St. Louis","United States of America"],"latlong":[[53.480759, -2.242631], [-4.300590, 15.311512], [38.627003, -90.199404]],"tags":["natural disaster","science"]},{"text":"Beginning of the Vietnam War","links": {"main": {"title":"Vietnam War","link":"//en.wikipedia.org/wiki/Vietnam_War"}},"locations":["Vietnam"],"latlong":[[14.058324, 108.277199]],"tags":["conflict"]},{"text":"First images of the far side of the Moon","links": {"main": {"title":"Far side of the Moon","link":"//en.wikipedia.org/wiki/Far_side_of_the_Moon"}},"locations":["Space"],"latlong":[],"tags":["science","exploration"]},{"text":"Ritchie Valens, Buddy Holly and The Big Bopper die in a plane crash","links": {"main": {"title":"Ritchie Valens","link":"//en.wikipedia.org/wiki/Ritchie_Valens"},"related":[{"title":"Buddy Holly","link":"//en.wikipedia.org/wiki/Buddy_Holly"},{"title":"The Big Bopper","link":"//en.wikipedia.org/wiki/The_Big_Bopper"},{"title":"The Day the Music Died","link":"//en.wikipedia.org/wiki/The_Day_the_Music_Died"}]},"locations":["Iowa","United States of America"],"latlong":[[41.878003, -93.097702]],"tags":["person","death","art"]},{"text":"World population reaches 3 billion","links": {},"locations":[""],"latlong":[],"tags":["world population"]}],"1960":[{"text":"European Free Trade Association formed","links": {"main": {"title":"European Free Trade Association","link":"//en.wikipedia.org/wiki/European_Free_Trade_Association"}},"locations":["Austria","Denmark","Norway","Portugal","Sweden","Switzerland","United Kingdom"],"latlong":[[47.516231, 14.550072], [56.263920, 9.501785], [60.472024, 8.468946], [39.399872, -8.224454], [60.128161, 18.643501], [46.818188, 8.227512], [51.507351, -0.127758]],"tags":["treaty","economy"]},{"text":"1960 U-2 incident sparks deterioration in relations between superpowers","links": {"main": {"title":"1960 U-2 incident","link":"//en.wikipedia.org/wiki/1960_U-2_incident"}},"locations":["Soviet Union","United States of America"],"latlong":[[33.889764, -117.818796], [39.740986, -102.128906]],"tags":["cold war"]},{"text":"Year of Africa: Independence of 17 African nations","links": {"main": {"title":"Year of Africa","link":"//en.wikipedia.org/wiki/Year_of_Africa"}},"locations":["Africa"],"latlong":[[-8.783195, 34.508523]],"tags":["social","government"]},{"text":"Congo Crisis begins","links": {"main": {"title":"Congo Crisis","link":"//en.wikipedia.org/wiki/Congo_Crisis"},"related":[]},"locations":["Katanga","Democratic Republic of the Congo","Soviet Union","Belgium","United States of America"],"latlong":[[-8.885115, 26.419389], [33.889764, -117.818796], [50.503887, 4.469936], [39.740986, -102.128906]],"tags":["person","death","conflict","cold war"]},{"text":"Khrushchev withdraws Soviet cooperation with China, initiating the Sino-Soviet split","links": {"main": {"title":"Sino-Soviet split","link":"//en.wikipedia.org/wiki/Sino-Soviet_split"}},"locations":["Soviet Union","China"],"latlong":[[33.889764, -117.818796], [35.861660, 104.195397]],"tags":["cold war","government"]},{"text":"The Birth control pill becomes commercially available","links": {"main": {"title":"Combined oral contraceptive pill","link":"//en.wikipedia.org/wiki/Combined_oral_contraceptive_pill"}},"locations":[""],"latlong":[],"tags":["technology","social","equality"]},{"text":"Sharpeville Massacre in South Africa","links": {"main": {"title":"Sharpeville Massacre","link":"//en.wikipedia.org/wiki/Sharpeville_massacre"}},"locations":["South Africa"],"latlong":[[-30.559482, 22.937506]],"tags":["disaster","social"]},{"text":"United States presidential election marks the first televised debates between presidential candidates","links": {"main": {"title":"United States presidential election, 1960","link":"//en.wikipedia.org/wiki/United_States_presidential_election,_1960"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["social","technology"]},{"text":"Mau Mau Uprising ends","links": {"main": {"title":"Mau Mau Uprising","link":"//en.wikipedia.org/wiki/Mau_Mau_Uprising"}},"locations":["Kenya"],"latlong":[[-0.023559, 37.906193]],"tags":["conflict"]},{"text":"First manned descent to the deepest point on Earth, the Mariana Trench","links": {"main": {"title":"Mariana Trench","link":"//en.wikipedia.org/wiki/Mariana_Trench"}},"locations":["Mariana Trench"],"latlong":[[11.316667, 142.25]],"tags":["exploration","technology","science"]},{"text":"Construction of the first laser","links": {"main": {"title":"Laser","link":"//en.wikipedia.org/wiki/Laser"},"related":[{"title":"Theodore Harold Maiman","link":"//en.wikipedia.org/wiki/Theodore_Harold_Maiman"},{"title":"HRL Laboratories","link":"//en.wikipedia.org/wiki/HRL_Laboratories"}]},"locations":["California","United States of America"],"latlong":[[36.778261, -119.417932]],"tags":["technology","science"]},{"text":"The Beatles form in Liverpool","links": {"main": {"title":"The Beatles","link":"//en.wikipedia.org/wiki/The_Beatles"}},"locations":["Liverpool","United Kingdom"],"latlong":[[53.408371, -2.991573], [51.507351, -0.127758]],"tags":["art"]},{"text":"Muhammad Ali wins gold in Rome","links": {"main": {"title":"Muhammad Ali","link":"//en.wikipedia.org/wiki/Muhammad_Ali"}},"locations":["Rome","Italy"],"latlong":[[41.902783, 12.496366], [41.871940, 12.56738]],"tags":["sport"]}],"1961":[{"text":"Great Leap Forward ends in China after the deaths of roughly 20 million people","links": {"main": {"title":"Great Leap Forward","link":"//en.wikipedia.org/wiki/Great_Leap_Forward"}},"locations":["China"],"latlong":[[35.861660, 104.195397]],"tags":["natural disaster","government","economy","disaster"]},{"text":"Construction of the Berlin Wall","links": {"main": {"title":"Berlin Wall","link":"//en.wikipedia.org/wiki/Berlin_Wall"}},"locations":["Berlin","Germany"],"latlong":[[52.520007, 13.404954], [51.165691, 10.451526]],"tags":["social","government"]},{"text":"First human spaceflight","links": {"main": {"title":"Human spaceflight","link":"//en.wikipedia.org/wiki/Human_spaceflight"},"related":[{"title":"Vostok 1","link":"//en.wikipedia.org/wiki/Vostok_1"},{"title":"Soviet space program","link":"//en.wikipedia.org/wiki/Soviet_space_program"},{"title":"Yuri Gagarin","link":"//en.wikipedia.org/wiki/Yuri_Gagarin"}]},"locations":["Space","Soviet Union"],"latlong":[[33.889764, -117.818796]],"tags":["science","technology"]},{"text":"Congo Crisis: Assassination of Prime Minister Patrice Lumumba","links": {"main": {"title":"Congo Crisis","link":"//en.wikipedia.org/wiki/Congo_Crisis"},"related":[{"title":"Patrice Lumumba","link":"//en.wikipedia.org/wiki/Patrice_Lumumba"}]},"locations":["Lubumbashi","Democratic Republic of the Congo"],"latlong":[[-11.664722, 27.479444]],"tags":["person","death","conflict","cold war"]},{"text":"UN Secretary General Dag HammarskjÃ¶ld dies in a plane crash","links": {"main": {"title":"Dag HammarskjÃ¶ld","link":"//en.wikipedia.org/wiki/Dag_HammarskjÃ¶ld"},"related":[{"title":"1961 Ndola United Nations DC-6 crash","link":"//en.wikipedia.org/wiki/1961_Ndola_United_Nations_DC-6_crash"}]},"locations":["Zambia"],"latlong":[[-13.133897, 27.849332]],"tags":["person","death","government"]}],"1962":[{"text":"Cuban missile crisis","links": {"main": {"title":"Cuban missile crisis","link":"//en.wikipedia.org/wiki/Cuban_Missile_Crisis"}},"locations":["Cuba","Soviet Union","United States of America","Italy","Turkey"],"latlong":[[21.521757, -77.781167], [-22.957640, 18.49041], [39.740986, -102.128906], [41.871940, 12.56738], [38.963745, 35.243322]],"tags":["cold war","treaty"]},{"text":"Algerian war ends with the independence of Algeria","links": {"main": {"title":"Algerian war","link":"//en.wikipedia.org/wiki/Algerian_War"}},"locations":["Algeria"],"latlong":[[28.033886, 1.659626]],"tags":["conflict"]},{"text":"The Beatles' first record and the beginnings of the British Invasion","links": {"main": {"title":"The Beatles","link":"//en.wikipedia.org/wiki/The_Beatles"},"related":[{"title":"British Invasion","link":"//en.wikipedia.org/wiki/British_Invasion"}]},"locations":["United Kingdom"],"latlong":[[51.507351, -0.127758]],"tags":["art"]},{"text":"Death of Marilyn Monroe","links": {"main": {"title":"Marilyn Monroe","link":"//en.wikipedia.org/wiki/Marilyn_Monroe"},"related":[{"title":"Death of Marilyn Monroe","link":"//en.wikipedia.org/wiki/Death_of_Marilyn_Monroe"}]},"locations":["Los Angeles","California","United States of America"],"latlong":[[34.052234, -118.243685]],"tags":["death","person"]},{"text":"Indonesia-Malaysia confrontation begins","links": {"main": {"title":"Indonesia–Malaysia confrontation","link":"//en.wikipedia.org/wiki/Indonesia–Malaysia_confrontation"}},"locations":["Indonesia","Malaysia","United Kingdom","Australia","New Zealand","Brunei"],"latlong":[[-0.789275, 113.921327], [4.210484, 101.975766], [51.507351, -0.127758], [-25.274398, 133.775136], [-40.900557, 174.885971], [4.535277, 114.727669]],"tags":["conflict"]},{"text":"A coup ends the Mutawakkilite Kingdom of Yemen and establishes the Yemen Arab Republic","links": {"main": {"title":"Mutawakkilite Kingdom of Yemen","link":"//en.wikipedia.org/wiki/Mutawakkilite_Kingdom_of_Yemen"},"related":[{"title":"Yemen Arab Republic","link":"//en.wikipedia.org/wiki/Yemen_Arab_Republic"}]},"locations":["Yemen Arab Republic"],"latlong":[[15.552727, 48.516388]],"tags":["government","internal conflict"]},{"text":"North Yemen Civil War begins","links": {"main": {"title":"North Yemen Civil War","link":"//en.wikipedia.org/wiki/North_Yemen_Civil_War"}},"locations":["North Yemen"],"latlong":[[15.552727, 48.516388]],"tags":["conflict"]},{"text":"Sino-Indian War","links": {"main": {"title":"Sino-Indian War","link":"//en.wikipedia.org/wiki/Sino-Indian_War"}},"locations":["China","India"],"latlong":[[35.861660, 104.195397], [20.593684, 78.96288]],"tags":["conflict"]},{"text":"Second Vatican Council is opened by Pope John XXIII","links": {"main": {"title":"Second Vatican Council","link":"//en.wikipedia.org/wiki/Second_Vatican_Council"}},"locations":["Vatican City"],"latlong":[[41.902916, 12.453389]],"tags":["religion"]}],"1963":[{"text":"Independence of Kenya","links": {"main": {"title":"Kenya","link":"//en.wikipedia.org/wiki/Kenya"}},"locations":["Kenya"],"latlong":[[-0.023559, 37.906193]],"tags":["government"]},{"text":"Independence of Malaysia","links": {"main": {"title":"Malaysia","link":"//en.wikipedia.org/wiki/Malaysia"},"related":[{"title":"Malaysia Agreement","link":"//en.wikipedia.org/wiki/Malaysia_Agreement"}]},"locations":["Malaysia"],"latlong":[[4.210484, 101.975766]],"tags":["government"]},{"text":"Birmingham campaign","links": {"main": {"title":"Birmingham campaign","link":"//en.wikipedia.org/wiki/Birmingham_campaign"}},"locations":["Alabama","United States of America"],"latlong":[[32.318231, -86.902298]],"tags":["equality"]},{"text":"Martin Luther King, Jr. delivers 'I Have a Dream' at the March on Washington","links": {"main": {"title":"Martin Luther King, Jr.","link":"//en.wikipedia.org/wiki/Martin_Luther_King,_Jr."},"related":[{"title":"I Have a Dream","link":"//en.wikipedia.org/wiki/I_Have_a_Dream"},{"title":"March on Washington for Jobs and Freedom","link":"//en.wikipedia.org/wiki/March_on_Washington_for_Jobs_and_Freedom"}]},"locations":["Washington","United States of America"],"latlong":[[38.907192, -77.036871]],"tags":["social","equality"]},{"text":"Assassination of John F. Kennedy","links": {"main": {"title":"Assassination of John F. Kennedy","link":"//en.wikipedia.org/wiki/Assassination_of_John_F._Kennedy"}},"locations":["Dealey Plaza","Dallas","Texas","United States of America"],"latlong":[[32.77903,-96.80867]],"tags":["person","death","government"]},{"text":"Launch of the first geosynchronous satellite","links": {"main": {"title":"Geosynchronous satellite","link":"//en.wikipedia.org/wiki/Geosynchronous_satellite"}},"locations":["Space"],"latlong":[],"tags":["technology"]},{"text":"Paul VI becomes Pope","links": {"main": {"title":"Paul VI","link":"//en.wikipedia.org/wiki/Pope_Paul_VI"}},"locations":["Italy","Vatican City"],"latlong":[[41.902916, 12.453389]],"tags":["person","religion"]}],"1964":[{"text":"Leonid Brezhnev ousts Khrushchev and assumes power in the Soviet Union","links": {"main": {"title":"Leonid Brezhnev","link":"//en.wikipedia.org/wiki/Leonid_Brezhnev"}},"locations":["Soviet Union"],"latlong":[[33.889764, -117.818796]],"tags":["person","government"]},{"text":"Independence of Malta","links": {"main": {"title":"Malta","link":"//en.wikipedia.org/wiki/Malta"}},"locations":["Malta"],"latlong":[[35.937496, 14.375416]],"tags":["government"]},{"text":"Independence of Malawi","links": {"main": {"title":"Malawi","link":"//en.wikipedia.org/wiki/Malawi"}},"locations":["Malawi"],"latlong":[[-13.254308, 34.301525]],"tags":["government"]},{"text":"Independence of Tanzania","links": {"main": {"title":"Tanzania","link":"//en.wikipedia.org/wiki/Tanzania"}},"locations":["Tanzania"],"latlong":[[-6.369028, 34.888822]],"tags":["government"]},{"text":"Civil Rights Act abolishes segregation in the USA","links": {"main": {"title":"Civil Rights Act of 1964","link":"//en.wikipedia.org/wiki/Civil_Rights_Act_of_1964"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["government","treaty","equality"]},{"text":"Colombian armed conflict begins","links": {"main": {"title":"Colombian armed conflict (1964–present)","link":"//en.wikipedia.org/wiki/Colombian_conflict_(1964–present)"}},"locations":["Colombia"],"latlong":[[4.570868, -74.297333]],"tags":["conflict"]},{"text":"The Beatles first visit to the United States","links": {"main": {"title":"The Beatles in the United States","link":"//en.wikipedia.org/wiki/The_Beatles_in_the_United_States"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["art"]},{"text":"Rhodesian Bush War begins","links": {"main": {"title":"Rhodesian Bush War","link":"//en.wikipedia.org/wiki/Rhodesian_Bush_War"}},"locations":["Rhodesia"],"latlong":[[-19.015438, 29.154857]],"tags":["conflict"]},{"text":"First close-up images of Mars","links": {"main": {"title":"Mars","link":"//en.wikipedia.org/wiki/Mars"}},"locations":["Space"],"latlong":[],"tags":["technology","science","exploration"]}],"1965":[{"text":"Death of Winston Churchill","links": {"main": {"title":"Winston Churchill","link":"//en.wikipedia.org/wiki/Winston_Churchill"}},"locations":["United Kingdom"],"latlong":[[51.507351, -0.127758]],"tags":["person","death"]},{"text":"Death of Malcolm X","links": {"main": {"title":"Malcolm X","link":"//en.wikipedia.org/wiki/Malcolm_X"}},"locations":["New York","United States of America"],"latlong":[[40.712784, -74.005941], [39.740986, -102.128906]],"tags":["person","death","equality"]},{"text":"Congo Crisis ends; Joseph Mobutu becomes dictator of the Congo","links": {"main": {"title":"Congo Crisis","link":"//en.wikipedia.org/wiki/Congo_Crisis"},"related":[{"title":"Joseph Mobutu","link":"//en.wikipedia.org/wiki/Joseph_Mobutu"}]},"locations":["Congo","Katanga","South Kasai","Soviet Union","Belgium","United States of America"],"latlong":[[-8.885115, 26.419389], [33.889764, -117.818796], [50.503887, 4.469936], [39.740986, -102.128906]],"tags":["person","death","conflict","cold war"]},{"text":"Anti-Communist purge in Indonesia kills up to 500,000 people","links": {"main": {"title":"Indonesian killings of 1965–1966","link":"//en.wikipedia.org/wiki/Indonesian_killings_of_1965–66"}},"locations":["Indonesia"],"latlong":[[-0.789275, 113.921327]],"tags":["conflict"]},{"text":"Second Indo-Pakistani War","links": {"main": {"title":"Indo-Pakistani War of 1965","link":"//en.wikipedia.org/wiki/Indo-Pakistani_War_of_1965"}},"locations":["India","Pakistan"],"latlong":[[20.593684, 78.96288], [30.375321, 69.345116]],"tags":["conflict"]},{"text":"Second Vatican Council is closed by Pope Paul VI","links": {"main": {"title":"Second Vatican Council","link":"//en.wikipedia.org/wiki/Second_Vatican_Council"}},"locations":["Vatican City"],"latlong":[[41.902916, 12.453389]],"tags":["religion"]}],"1966":[{"text":"Indonesia-Malaysia confrontation ends","links": {"main": {"title":"Indonesia–Malaysia confrontation","link":"//en.wikipedia.org/wiki/Indonesia–Malaysia_confrontation"}},"locations":["Indonesia","Malaysia"],"latlong":[[-0.789275, 113.921327], [4.210484, 101.975766]],"tags":["conflict"]},{"text":"China's Cultural Revolution begins","links": {"main": {"title":"Cultural Revolution","link":"//en.wikipedia.org/wiki/Cultural_Revolution"}},"locations":["China"],"latlong":[[35.861660, 104.195397]],"tags":["social","government","internal conflict"]},{"text":"Independence of Lesotho","links": {"main": {"title":"Lesotho","link":"//en.wikipedia.org/wiki/Lesotho"}},"locations":["Lesotho"],"latlong":[[-29.609988, 28.233608]],"tags":["government"]},{"text":"Independence of Botswana","links": {"main": {"title":"Botswana","link":"//en.wikipedia.org/wiki/Botswana"}},"locations":["Botswana"],"latlong":[[-22.328474, 24.684866]],"tags":["government"]},{"text":"Independence of Barbados","links": {"main": {"title":"Barbados","link":"//en.wikipedia.org/wiki/Barbados"}},"locations":["Barbados"],"latlong":[[13.193887, -59.543198]],"tags":["government"]}],"1967":[{"text":"Summer of Love","links": {"main": {"title":"Summer of Love","link":"//en.wikipedia.org/wiki/Summer_of_Love"}},"locations":["San Francisco","United States of America"],"latlong":[[37.774929, -122.419416]],"tags":["social"]},{"text":"Six Day War","links": {"main": {"title":"Six Day War","link":"//en.wikipedia.org/wiki/Six-Day_War"}},"locations":["Israel","Egypt","Syria","Jordan","Iraq","Lebanon"],"latlong":[[31.046051, 34.851612], [26.820553, 30.802498], [34.802075, 38.996815], [30.585164, 36.238414], [33.223191, 43.679291], [33.854721, 35.862285]],"tags":["conflict"]},{"text":"Attempted secession of the Republic of Biafra from Nigeria triggers the Nigerian Civil War","links": {"main": {"title":"Republic of Biafra","link":"//en.wikipedia.org/wiki/Biafra"},"related":[{"title":"Nigerian Civil War","link":"//en.wikipedia.org/wiki/Nigerian_Civil_War"}]},"locations":["Nigeria"],"latlong":[[9.081999, 8.675277]],"tags":["conflict"]},{"text":"Association of Southeast Asian Nations founded","links": {"main": {"title":"Association of Southeast Asian Nations","link":"//en.wikipedia.org/wiki/Association_of_Southeast_Asian_Nations"},"related":[{"title":"Member states of the Association of Southeast Asian Nations","link":"//en.wikipedia.org/wiki/Member_states_of_the_Association_of_Southeast_Asian_Nations"}]},"locations":["Indonesia","Malaysia","Philippines","Singapore","Thailand"],"latlong":[[-0.789275, 113.921327], [4.210484, 101.975766], [10.517518, 123.958740], [1.352083, 103.819836], [15.870032, 100.992541]],"tags":["treaty","government","economy"]},{"text":"The Beatles release their landmark album Sgt. Pepper's Lonely Hearts Club Band","links": {"main": {"title":"The Beatles","link":"//en.wikipedia.org/wiki/The_Beatles"},"related":[{"title":"Sgt. Pepper's Lonely Hearts Club Band","link":"//en.wikipedia.org/wiki/Sgt._Pepper%27s_Lonely_Hearts_Club_Band"}]},"locations":["United Kingdom"],"latlong":[[51.507351, -0.127758]],"tags":["art"]},{"text":"Australian Prime Minister Harold Holt disappears while swimming at Cheviot Beach, Victoria","links": {"main": {"title":"Harold Holt","link":"//en.wikipedia.org/wiki/Harold_Holt"},"related":[{"title":"Cheviot Beach","link":"//en.wikipedia.org/wiki/Cheviot_Beach"}]},"locations":["Cheviot Beach","Australia"],"latlong":[[-38.313019, 144.6667488], [-25.274398, 133.775136]],"tags":["person","government"]}],"1968":[{"text":"Assassination of Martin Luther King, Jr.","links": {"main": {"title":"Assassination of Martin Luther King, Jr.","link":"//en.wikipedia.org/wiki/Assassination_of_Martin_Luther_King,_Jr."}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["person","death"]},{"text":"Assassination of Robert F. Kennedy","links": {"main": {"title":"Assassination of Robert F. Kennedy","link":"//en.wikipedia.org/wiki/Assassination_of_Robert_F._Kennedy"},"related":[{"title":"Poor People's Campaign","link":"//en.wikipedia.org/wiki/Poor_People%27s_Campaign"}]},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["person","death","government"]},{"text":"Prague Spring crushed by Eastern Bloc military intervention","links": {"main": {"title":"Prague Spring","link":"//en.wikipedia.org/wiki/Prague_Spring"}},"locations":["Czechoslovakia"],"latlong":[[14.480317, 121.039062]],"tags":["government"]},{"text":"May 1968 protests in France","links": {"main": {"title":"May 1968 in France","link":"//en.wikipedia.org/wiki/May_1968_events_in_France"}},"locations":["France"],"latlong":[[46.227638, 2.213749]],"tags":["internal conflict"]},{"text":"The Troubles begin in Northern Ireland","links": {"main": {"title":"The Troubles","link":"//en.wikipedia.org/wiki/The_Troubles"},"related":[{"title":"Northern Ireland","link":"//en.wikipedia.org/wiki/Northern_Ireland"}]},"locations":["Northern Ireland"],"latlong":[[54.787715, -6.492315]],"tags":["conflict"]},{"text":"Tet Offensive occurs in South Vietnam","links": {"main": {"title":"Tet Offensive","link":"//en.wikipedia.org/wiki/Tet_Offensive"},"related":[{"title":"South Vietnam","link":"//en.wikipedia.org/wiki/South_Vietnam"}]},"locations":["South Vietnam"],"latlong":[[14.058324, 108.277199]],"tags":["conflict"]}],"1969":[{"text":"Moon landings","links": {"main": {"title":"Moon landing","link":"//en.wikipedia.org/wiki/Moon_landing"}},"locations":["Space"],"latlong":[],"tags":["science","technology","exploration"]},{"text":"Woodstock festival","links": {"main": {"title":"Woodstock festival","link":"//en.wikipedia.org/wiki/Woodstock"}},"locations":["Woodstock","United States of America"],"latlong":[[34.101487, -84.519375]],"tags":["art","social"]},{"text":"Sino-Soviet border conflict","links": {"main": {"title":"Sino-Soviet border conflict","link":"//en.wikipedia.org/wiki/Sino-Soviet_border_conflict"}},"locations":["China","Soviet Union"],"latlong":[[35.861660, 104.195397], [33.889764, -117.818796]],"tags":["conflict"]},{"text":"The Manson Family Murders","links": {"main": {"title":"Charles Manson","link":"//en.wikipedia.org/wiki/Charles_Manson"}},"locations":["California","United States of America"],"latlong":[[36.778261, -119.417932]],"tags":["death","crime"]},{"text":"Creation of ARPANET, the earliest incarnation of the Internet","links": {"main": {"title":"ARPANET","link":"//en.wikipedia.org/wiki/ARPANET"},"related":[{"title":"Internet","link":"//en.wikipedia.org/wiki/Internet"}]},"locations":["California","Utah","United States of America"],"latlong":[[36.778261, -119.417932], [39.320980, -111.093731]],"tags":["technology"]},{"text":"Muammar Gaddafi overthrows King Idris of Libya in a Coup d'état and establishes the Libyan Arab Republic","links": {"main": {"title":"Muammar Gaddafi","link":"//en.wikipedia.org/wiki/Muammar_Gaddafi"},"related":[{"title":"King Idris","link":"//en.wikipedia.org/wiki/King_Idris"},{"title":"Libyan Arab Republic","link":"//en.wikipedia.org/wiki/Libyan_Arab_Republic"}]},"locations":["Libya"],"latlong":[[26.335100, 17.228331]],"tags":["government","internal conflict"]}],"1970":[{"text":"Nigerian Civil War ends with the reintegration of the Republic of Biafra with Nigeria after ~3 million deaths","links": {"main": {"title":"Nigerian Civil War","link":"//en.wikipedia.org/wiki/Nigerian_Civil_War"},"related":[{"title":"Republic of Biafra","link":"//en.wikipedia.org/wiki/Biafra"}]},"locations":["Nigeria"],"latlong":[[9.081999, 8.675277]],"tags":["conflict"]},{"text":"Edward Heath becomes Prime Minister of the United Kingdom","links": {"main": {"title":"Edward Heath","link":"//en.wikipedia.org/wiki/Edward_Heath"},"related":[{"title":"United Kingdom general election, 1970","link":"//en.wikipedia.org/wiki/United_Kingdom_general_election,_1970"}]},"locations":["United Kingdom"],"latlong":[[51.507351, -0.127758]],"tags":["person","government"]},{"text":"Polish 1970 protests","links": {"main": {"title":"Polish 1970 protests","link":"//en.wikipedia.org/wiki/1970_Polish_protests"}},"locations":["Poland"],"latlong":[[51.919438, 19.145136]],"tags":["social"]},{"text":"Cambodian Civil War begins","links": {"main": {"title":"Cambodian Civil War","link":"//en.wikipedia.org/wiki/Cambodian_Civil_War"}},"locations":["Cambodia"],"latlong":[[12.565679, 104.990963]],"tags":["conflict"]},{"text":"Kent State massacre leaves four students dead and nine injured","links": {"main": {"title":"Kent State massacre","link":"//en.wikipedia.org/wiki/Kent_State_shootings"}},"locations":["Ohio","United States of America"],"latlong":[[40.417287, -82.907123]],"tags":["crime"]},{"text":"Yemeni Civil War ends","links": {"main": {"title":"North Yemen Civil War","link":"//en.wikipedia.org/wiki/North_Yemen_Civil_War"}},"locations":["Yemen"],"latlong":[[15.552727, 48.516388]],"tags":["conflict"]},{"text":"Ratification of the Treaty on the Non-Proliferation of Nuclear Weapons","links": {"main": {"title":"Treaty on the Non-Proliferation of Nuclear Weapons","link":"//en.wikipedia.org/wiki/Treaty_on_the_Non-Proliferation_of_Nuclear_Weapons"}},"locations":[],"latlong":[], "tags":["treaty","government"]},{"text":"Containerisation adopted globally, massively boosting global trade","links": {"main": {"title":"Containerisation","link":"//en.wikipedia.org/wiki/Containerization"}},"locations":[""],"latlong":[],"tags":["economy"]},{"text":"Maiden flight of the Boeing 747","links": {"main": {"title":"Boeing 747","link":"//en.wikipedia.org/wiki/Boeing_747"}},"locations":["New York","London","United States of America","United Kingdom"],"latlong":[[40.712784, -74.005941], [51.507351, -0.127758]],"tags":["technology","transport"]},{"text":"Bhola Cyclone kills 500,000 people in East Pakistan","links": {"main": {"title":"Bhola Cyclone","link":"//en.wikipedia.org/wiki/1970_Bhola_cyclone"},"related":[{"title":"East Pakistan","link":"//en.wikipedia.org/wiki/East_Pakistan"}]},"locations":["Pakistan"],"latlong":[[30.375321, 69.345116]],"tags":["natural disaster"]},{"text":"Black September in Jordan begins","links": {"main": {"title":"Black September in Jordan","link":"//en.wikipedia.org/wiki/Black_September_in_Jordan"}},"locations":["Jordan","Syria"],"latlong":[[30.585164, 36.238414]],"tags":["internal conflict"]},{"text":"Death of Gamal Abdel Nasser","links": {"main": {"title":"Gamal Abdel Nasser","link":"//en.wikipedia.org/wiki/Gamal_Abdel_Nasser"}},"locations":["Cairo","Egypt"],"latlong":[[30.044420, 31.235712]],"tags":["person","death"]},{"text":"Anwar Sadat becomes President of Egypt","links": {"main": {"title":"Anwar Sadat","link":"//en.wikipedia.org/wiki/Anwar_Sadat"}},"locations":["Egypt"],"latlong":[[26.820553, 30.802498]],"tags":["person","government"]},{"text":"Death of Jimi Hendrix","links": {"main": {"title":"Death of Jimi Hendrix","link":"//en.wikipedia.org/wiki/Death_of_Jimi_Hendrix"}},"locations":["London","United Kingdom"],"latlong":[[51.507351, -0.127758]],"tags":["person","death","art"]},{"text":"Death of Janis Joplin","links": {"main": {"title":"Janis Joplin","link":"//en.wikipedia.org/wiki/Janis_Joplin"}},"locations":["California","United States of America"],"latlong":[[36.778261, -119.417932]],"tags":["person","death","art"]},{"text":"FLQ seizes hostages, causing Prime Minister Pierre Elliot Trudeau of Canada to issue the War Measures Act","links": {"main": {"title":"October Crisis","link":"//en.wikipedia.org/wiki/October_Crisis"},"related":[{"title":"Pierre Elliot Trudeau","link":"//en.wikipedia.org/wiki/Pierre_Elliot_Trudeau"},{"title":"War Measures Act","link":"//en.wikipedia.org/wiki/War_Measures_Act"},{"title":"FLQ","link":"//en.wikipedia.org/wiki/FLQ"}]},"locations":["Canada","Quebec"],"latlong":[[52.939916, -73.549136]],"tags":["terrorism","crime","internal conflict"]}],"1971":[{"text":"Black September in Jordan ends","links": {"main": {"title":"Black September in Jordan","link":"//en.wikipedia.org/wiki/Black_September_in_Jordan"}},"locations":["Jordan","Syria"],"latlong":[[30.585164, 36.238414]],"tags":["internal conflict"]},{"text":"Bangladesh Liberation War ends in independence of Bangladesh from Pakistan and precipitates Third Indo-Pakistani War","links": {"main": {"title":"Bangladesh Liberation War","link":"//en.wikipedia.org/wiki/Bangladesh_Liberation_War"},"related":[{"title":"Indo-Pakistani War of 1971","link":"//en.wikipedia.org/wiki/Indo-Pakistani_War_of_1971"}]},"locations":["Bangladesh"],"latlong":[[23.684994, 90.356331]],"tags":["conflict"]},{"text":"Internment begins in Northern Ireland","links": {"main": {"title":"Operation Demetrius","link":"//en.wikipedia.org/wiki/Operation_Demetrius"}},"locations":["Northern Ireland"],"latlong":[[54.787715, -6.492315]],"tags":["internal conflict","government"]},{"text":"Invention of the LSI microchip","links": {"main": {"title":"Invention of the integrated circuit","link":"//en.wikipedia.org/wiki/Invention_of_the_integrated_circuit"},"related":[{"title":"Integrated circuit","link":"//en.wikipedia.org/wiki/Integrated_circuit"},{"title":"Intel 4004","link":"//en.wikipedia.org/wiki/Intel_4004"}]},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["technology"]},{"text":"Idi Amin seizes power in Uganda","links": {"main": {"title":"Idi Amin","link":"//en.wikipedia.org/wiki/Idi_Amin"},"related":[{"title":"Uganda","link":"//en.wikipedia.org/wiki/Uganda"}]},"locations":["Uganda"],"latlong":[[1.373333, 32.290275]],"tags":["government","person","internal conflict"]},{"text":"Mobutu Sese Seko renames The Republic of the Congo Zaire","links": {"main": {"title":"Mobutu Sese Seko","link":"//en.wikipedia.org/wiki/Mobutu_Sese_Seko"},"related":[{"title":"Republic of the Congo (Léopoldville)","link":"//en.wikipedia.org/wiki/Republic_of_the_Congo_(L%C3%A9opoldville)"},{"title":"Zaire","link":"//en.wikipedia.org/wiki/Zaire"}]},"locations":["Zaire"],"latlong":[[-4.038333, 21.758664]],"tags":["government"]},{"text":"Greenpeace founded","links": {"main": {"title":"Greenpeace","link":"//en.wikipedia.org/wiki/Greenpeace"}},"locations":[""],"latlong":[],"tags":["ecology","social"]},{"text":"COINTELPRO officially ends","links": {"main": {"title":"COINTELPRO","link":"//en.wikipedia.org/wiki/COINTELPRO"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["government"]}],"1972":[{"text":"Northern Ireland's Bloody Sunday","links": {"main": {"title":"Bloody Sunday (1972)","link":"//en.wikipedia.org/wiki/Bloody_Sunday_(1972)"}},"locations":["Belfast","Northern Ireland"],"latlong":[[54.597285, -5.93012]],"tags":["internal conflict"]},{"text":"First Sudanese Civil War ends","links": {"main": {"title":"First Sudanese Civil War","link":"//en.wikipedia.org/wiki/First_Sudanese_Civil_War"}},"locations":["Sudan"],"latlong":[[12.862807, 30.217636]],"tags":["conflict"]},{"text":"Martial law declared in the Philippines by President Ferdinand E. Marcos","links": {"main": {"title":"Ferdinand E. Marcos","link":"//en.wikipedia.org/wiki/Ferdinand_Marcos"},"related":[{"title":"Martial law","link":"//en.wikipedia.org/wiki/Martial_law"},{"title":"Philippines","link":"//en.wikipedia.org/wiki/Philippines"}]},"locations":["Philippines"],"latlong":[[10.517518, 123.958740]],"tags":["government","internal conflict"]},{"text":"Munich massacre occurs at the 1972 Summer Olympics in Munich, Germany","links": {"main": {"title":"Munich massacre","link":"//en.wikipedia.org/wiki/Munich_massacre"},"related":[{"title":"1972 Summer Olympics","link":"//en.wikipedia.org/wiki/1972_Summer_Olympics"}]},"locations":["Munich","Germany"],"latlong":[[48.135125, 11.581981]],"tags":["social","sport"]}],"1973":[{"text":"1973 Chilean coup d'état","links": {"main": {"title":"1973 Chilean coup d'état","link":"//en.wikipedia.org/wiki/1973_Chilean_coup_d%27%C3%A9tat"}},"locations":["Chile"],"latlong":[[-35.675147, -71.542969]],"tags":["government","internal conflict"]},{"text":"Yom Kippur War","links": {"main": {"title":"Yom Kippur War","link":"//en.wikipedia.org/wiki/Yom_Kippur_War"}},"locations":["Israel","Egypt","Syria"],"latlong":[[31.046051, 34.851612], [26.820553, 30.802498], [34.802075, 38.996815]],"tags":["conflict"]},{"text":"Beginning of the Watergate scandal","links": {"main": {"title":"Watergate scandal","link":"//en.wikipedia.org/wiki/Watergate_scandal"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["government","social"]},{"text":"First space station, Skylab, is launched","links": {"main": {"title":"Space station","link":"//en.wikipedia.org/wiki/Space_station"},"related":[{"title":"Skylab","link":"//en.wikipedia.org/wiki/Skylab"}]},"locations":["Space","United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["science","technology"]},{"text":"The Supreme Court of the United States decides Roe v Wade","links": {"main": {"title":"Roe v. Wade","link":"//en.wikipedia.org/wiki/Roe_v._Wade"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["equality","government"]},{"text":"Death of Pablo Picasso","links": {"main": {"title":"Pablo Picasso","link":"//en.wikipedia.org/wiki/Pablo_Picasso"}},"locations":["Mougins","France"],"latlong":[[43.602332, 7.006491]],"tags":["art","person","death"]},{"text":"First close-up images of Jupiter","links": {"main": {"title":"Jupiter","link":"//en.wikipedia.org/wiki/Jupiter"}},"locations":["Space"],"latlong":[],"tags":["science","exploration"]}],"1974":[{"text":"Turkish occupation of Cyprus","links": {"main": {"title":"1974 Cypriot coup d'état","link":"//en.wikipedia.org/wiki/1974_Cypriot_coup_d%27état"},"related":[{"title":"Turkish invasion of Cyprus","link":"//en.wikipedia.org/wiki/Turkish_invasion_of_Cyprus"}]},"locations":["Cyprus","Greece","Turkey"],"latlong":[[35.126413, 33.429859], [39.074208, 21.824312], [38.963745, 35.243322]],"tags":["conflict","internal conflict"]},{"text":"Carnation Revolution in Portugal begins transition to democracy","links": {"main": {"title":"Carnation Revolution","link":"//en.wikipedia.org/wiki/Carnation_Revolution"}},"locations":["Portugal"],"latlong":[[39.399872, -8.224454]],"tags":["internal conflict"]},{"text":"Emperor Haile Selassie I of Ethiopia is overthrown in a military coup","links": {"main": {"title":"Haile Selassie I","link":"//en.wikipedia.org/wiki/Haile_Selassie"}},"locations":["Ethiopia"],"latlong":[[9.145000, 40.489673]],"tags":["internal conflict","government"]},{"text":"First close-up images of Mercury","links": {"main": {"title":"Mercury (planet)","link":"//en.wikipedia.org/wiki/Mercury_(planet)"}},"locations":["Space"],"latlong":[],"tags":["exploration","science"]},{"text":"Discovery of 'Lucy' (Australopithecus afarensis) in Tanzania's Olduvai Gorge","links": {"main": {"title":"Lucy (Australopithecus)","link":"//en.wikipedia.org/wiki/Lucy_(Australopithecus)"},"related":[{"title":"Australopithecus afarensis","link":"//en.wikipedia.org/wiki/Australopithecus_afarensis"}]},"locations":["Tanzania"],"latlong":[[-6.369028, 34.888822]],"tags":["science","history"]},{"text":"World population reaches 4 billion","links": {},"locations":[""],"latlong":[],"tags":["world population"]},{"text":"Resignation of Richard Nixon","links": {"main": {"title":"Richard Nixon","link":"//en.wikipedia.org/wiki/Richard_Nixon"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["person","government"]}],"1975":[{"text":"End of Vietnam War and Fall of Saigon","links": {"main": {"title":"Vietnam War","link":"//en.wikipedia.org/wiki/Vietnam_War"},"related":[{"title":"Fall of Saigon","link":"//en.wikipedia.org/wiki/Fall_of_Saigon"}]},"locations":["United States of America","Vietnam"],"latlong":[[39.740986, -102.128906], [14.058324, 108.277199]],"tags":["conflict"]},{"text":"Death of Francisco Franco; Juan Carlos I becomes King of Spain","links": {"main": {"title":"Francisco Franco","link":"//en.wikipedia.org/wiki/Francisco_Franco"},"related":[{"title":"Juan Carlos I","link":"//en.wikipedia.org/wiki/Juan_Carlos_I"}]},"locations":["Spain"],"latlong":[[40.463667, -3.74922]],"tags":["government","person","death"]},{"text":"Haile Selassie I dies in mysterious circumstances","links": {"main": {"title":"Haile Selassie","link":"//en.wikipedia.org/wiki/Haile_Selassie"}},"locations":["Ethiopia"],"latlong":[[9.145000, 40.489673]],"tags":["person","death"]},{"text":"Dmitri Shostakovich dies","links": {"main": {"title":"Dmitri Shostakovich","link":"//en.wikipedia.org/wiki/Dmitri_Shostakovich"}},"locations":["Moscow","Russia"],"latlong":[[55.755826, 37.6173]],"tags":["person","death","art"]},{"text":"Cambodian Civil War ends with victory for the Khmer Rouge","links": {"main": {"title":"Cambodian Civil War","link":"//en.wikipedia.org/wiki/Cambodian_Civil_War"},"related":[{"title":"Khmer Rouge","link":"//en.wikipedia.org/wiki/Khmer_Rouge"}]},"locations":["Cambodia"],"latlong":[[12.565679, 104.990963]],"tags":["internal conflict"]},{"text":"The Killing Fields murders begin","links": {"main": {"title":"The Killing Fields","link":"//en.wikipedia.org/wiki/Killing_Fields"}},"locations":["Cambodia"],"latlong":[[12.565679, 104.990963]],"tags":["internal conflict","government"]},{"text":"First Cricket World Cup hosted","links": {"main": {"title":"1975 Cricket World Cup","link":"//en.wikipedia.org/wiki/1975_Cricket_World_Cup"}},"locations":["England","United Kingdom"],"latlong":[[51.507351, -0.127758]],"tags":["sport"]}],"1976":[{"text":"First outbreak of the Ebola virus","links": {"main": {"title":"Ebola virus","link":"//en.wikipedia.org/wiki/Ebola_virus"}},"locations":["Democratic Republic of the Congo"],"latlong":[[-0.228021, 15.827659]],"tags":["natural disaster"]},{"text":"Death of Mao Zedong","links": {"main": {"title":"Mao Zedong","link":"//en.wikipedia.org/wiki/Mao_Zedong"}},"locations":["China"],"latlong":[[35.861660, 104.195397]],"tags":["person","death","government"]},{"text":"End of Cultural Revolution","links": {"main": {"title":"Cultural Revolution","link":"//en.wikipedia.org/wiki/Cultural_Revolution"}},"locations":["China"],"latlong":[[35.861660, 104.195397]],"tags":["social","government","internal conflict"]},{"text":"Steve Wozniak invented the Apple I and Steve Jobs then convinced Wozniak to sell the system, giving birth to Apple Computer","links": {"main": {"title":"Apple Inc.","link":"//en.wikipedia.org/wiki/Apple_Inc."},"related":[{"title":"Apple I","link":"//en.wikipedia.org/wiki/Apple_I"},{"title":"Steve Wozniak","link":"//en.wikipedia.org/wiki/Steve_Wozniak"},{"title":"Steve Jobs","link":"//en.wikipedia.org/wiki/Steve_Jobs"}]},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["technology"]},{"text":"Church Committee reports","links": {"main": {"title":"Church Committee","link":"//en.wikipedia.org/wiki/Church_Committee"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["government"]}],"1977":[{"text":"Introduction of the first mass-produced personal computers","links": {"main": {"title":"Commodore PET","link":"//en.wikipedia.org/wiki/Commodore_PET"},"related":[{"title":"Personal computer","link":"//en.wikipedia.org/wiki/Personal_computer"}]},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["technology"]},{"text":"Launch of the Voyager spacecraft, currently the most distant man-made objects in the universe","links": {"main": {"title":"Voyager","link":"//en.wikipedia.org/wiki/Voyager_1"},"related":[{"title":"Voyager program","link":"//en.wikipedia.org/wiki/Voyager_program"}]},"locations":["Space","United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["science","technology","exploration"]},{"text":"Queen Alia of Jordan is killed in helicopter crash","links": {"main": {"title":"Alia al-Hussein","link":"//en.wikipedia.org/wiki/Alia_al-Hussein"},"related":[{"title":"Jordan","link":"//en.wikipedia.org/wiki/Jordan"}]},"locations":["Jordan"],"latlong":[[30.585164, 36.238414]],"tags":["person","death"]},{"text":"Elvis Presley dies","links": {"main": {"title":"Elvis Presley","link":"//en.wikipedia.org/wiki/Elvis_Presley"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["person","death"]},{"text":"Tenerife disaster marks the deadliest accident in aviation history","links": {"main": {"title":"Tenerife disaster","link":"//en.wikipedia.org/wiki/Tenerife_airport_disaster"}},"locations":["Tenerife"],"latlong":[[28.291564, -16.62913]],"tags":["disaster","transport"]},{"text":"Shaba I conflict involves Safari Club","links": {"main": {"title":"Shaba I","link":"//en.wikipedia.org/wiki/Shaba_I"},"related":[{"title":"Safari Club","link":"//en.wikipedia.org/wiki/Safari_Club"}]},"locations":["Zaire","Morocco","Egypt","France","Belgium","Angola"],"latlong":[[-4.038333, 21.758664], [31.791702, -7.09262], [26.820553, 30.802498], [46.227638, 2.213749], [50.503887, 4.469936], [-11.202692, 17.873887]],"tags":["conflict"]}],"1978":[{"text":"Invention of artificial insulin","links": {"main": {"title":"Insulin","link":"//en.wikipedia.org/wiki/Insulin"},"related":[{"title":"Arthur Riggs","link":"//en.wikipedia.org/wiki/Arthur_Riggs_(geneticist)"},{"title":"Herbert Boyer","link":"//en.wikipedia.org/wiki/Herbert_Boyer"}]},"locations":["California","United States of America"],"latlong":[[36.778261, -119.417932]],"tags":["science","technology"]},{"text":"Discovery of Pluto's moon Charon","links": {"main": {"title":"Pluto","link":"//en.wikipedia.org/wiki/Pluto"},"related":[{"title":"Charon (moon)","link":"//en.wikipedia.org/wiki/Charon_(moon)"}]},"locations":["Space"],"latlong":[],"tags":["science","exploration"]},{"text":"Independence of Tuvalu","links": {"main": {"title":"Tuvalu","link":"//en.wikipedia.org/wiki/Tuvalu"}},"locations":["Tuvalu"],"latlong":[[-7.478442, 178.679921]],"tags":["government"]},{"text":"Jim Jones's New religious movement The Peoples Temple ends in the organized mass killing and suicide of 920 people","links": {"main": {"title":"Jim Jones","link":"//en.wikipedia.org/wiki/Jim_Jones"},"related":[{"title":"New religious movement","link":"//en.wikipedia.org/wiki/New_religious_movement"},{"title":"Peoples Temple","link":"//en.wikipedia.org/wiki/Peoples_Temple"}]},"locations":["Guyana"],"latlong":[[4.860416, -58.93018]],"tags":["social","disaster","religion"]},{"text":"Birth of the first test-tube baby","links": {"main": {"title":"History of in vitro fertilisation","link":"//en.wikipedia.org/wiki/History_of_in_vitro_fertilisation"},"related":[{"title":"Test-tube baby","link":"//en.wikipedia.org/wiki/Test-tube_baby"},{"title":"Louise Brown","link":"//en.wikipedia.org/wiki/Louise_Brown"}]},"locations":["Oldham","England","United Kingdom"],"latlong":[[53.540930, -2.111366]],"tags":["technology","science"]},{"text":"Cambodian-Vietnamese War begins","links": {"main": {"title":"Cambodian-Vietnamese War","link":"//en.wikipedia.org/wiki/Cambodian–Vietnamese_War"}},"locations":["Cambodia","Vietnam"],"latlong":[[12.565679, 104.990963], [14.058324, 108.277199]],"tags":["conflict"]},{"text":"Uganda-Tanzania War begins","links": {"main": {"title":"Uganda–Tanzania War","link":"//en.wikipedia.org/wiki/Uganda–Tanzania_War"}},"locations":["Uganda","Tanzania"],"latlong":[[1.373333, 32.290275], [-6.369028, 34.888822]],"tags":["conflict"]},{"text":"War in Afghanistan (1978-present) begins","links": {"main": {"title":"War in Afghanistan (1978–present)","link":"//en.wikipedia.org/wiki/War_in_Afghanistan_(1978–present)"}},"locations":["Afghanistan","United States of America","United Kingdom"],"latlong":[[33.939110, 67.709953], [39.740986, -102.128906], [51.507351, -0.127758]],"tags":["conflict"]},{"text":"Deng Xiaoping commences Economic reform in the People's Republic of China","links": {"main": {"title":"Deng Xiaoping","link":"//en.wikipedia.org/wiki/Deng_Xiaoping"},"related":[{"title":"Economic reform in the People's Republic of China","link":"//en.wikipedia.org/wiki/Economic_reform_in_the_People%27s_Republic_of_China"}]},"locations":["China"],"latlong":[[35.861660, 104.195397]],"tags":["economy"]},{"text":"Spanish transition to democracy is completed","links": {"main": {"title":"Spanish transition to democracy","link":"//en.wikipedia.org/wiki/Spanish_transition_to_democracy"}},"locations":["Spain"],"latlong":[[40.463667, -3.74922]],"tags":["government"]},{"text":"John Paul I becomes Pope","links": {"main": {"title":"John Paul I","link":"//en.wikipedia.org/wiki/Pope_John_Paul_I"}},"locations":["Italy","Vatican City"],"latlong":[[41.902916, 12.453389]],"tags":["person","religion"]},{"text":"John Paul II becomes Pope","links": {"main": {"title":"John Paul II","link":"//en.wikipedia.org/wiki/John_Paul_II"}},"locations":["Italy","Vatican City"],"latlong":[[41.902916, 12.453389]],"tags":["person","religion"]}],"1979":[{"text":"Smallpox eradicated","links": {"main": {"title":"Smallpox","link":"//en.wikipedia.org/wiki/Smallpox"}},"locations":[""],"latlong":[],"tags":["science"]},{"text":"Soviet-Afghan War begins","links": {"main": {"title":"Soviet war in Afghanistan","link":"//en.wikipedia.org/wiki/Soviet_war_in_Afghanistan"}},"locations":["Afghanistan","Soviet Union"],"latlong":[[33.939110, 67.709953], [33.889764, -117.818796]],"tags":["conflict"]},{"text":"Rhodesian Bush War ends","links": {"main": {"title":"Rhodesian Bush War","link":"//en.wikipedia.org/wiki/Rhodesian_Bush_War"}},"locations":["Rhodesia"],"latlong":[[-19.015438, 29.154857]],"tags":["conflict"]},{"text":"Iranian Revolution and Iran hostage crisis","links": {"main": {"title":"Iranian Revolution","link":"//en.wikipedia.org/wiki/Iranian_Revolution"},"related":[{"title":"Iran hostage crisis","link":"//en.wikipedia.org/wiki/Iran_hostage_crisis"}]},"locations":["Iran"],"latlong":[[32.427908, 53.688046]],"tags":["conflict"]},{"text":"Shah Reza Pahlavi forced into exile","links": {"main": {"title":"Mohammad Reza Pahlavi","link":"//en.wikipedia.org/wiki/Mohammad_Reza_Pahlavi"}},"locations":["Assuan","Egypt"],"latlong":[[24.088938, 32.899829]],"tags":["person","government"]},{"text":"Arrival of Pope John Paul II in Poland, eventually sparking the Solidarity movement","links": {"main": {"title":"Pope John Paul II","link":"//en.wikipedia.org/wiki/Pope_John_Paul_II"},"related":[{"title":"Solidarity (Polish trade union)","link":"//en.wikipedia.org/wiki/Solidarity_(Polish_trade_union)"}]},"locations":["Poland"],"latlong":[[51.919438, 19.145136]],"tags":["equality","social","government"]},{"text":"First close-up images of Saturn","links": {"main": {"title":"Saturn","link":"//en.wikipedia.org/wiki/Saturn"}},"locations":["Space"],"latlong":[],"tags":["science","exploration"]},{"text":"Margaret Thatcher becomes Prime Minister of the United Kingdom","links": {"main": {"title":"Margaret Thatcher","link":"//en.wikipedia.org/wiki/Margaret_Thatcher"}},"locations":["United Kingdom"],"latlong":[[51.507351, -0.127758]],"tags":["government","person"]},{"text":"Implementation of China's One child policy","links": {"main": {"title":"One child policy","link":"//en.wikipedia.org/wiki/One-child_policy"}},"locations":["China"],"latlong":[[35.861660, 104.195397]],"tags":["government"]},{"text":"Uganda-Tanzania War ends with defeat for Uganda and the exile of Idi Amin","links": {"main": {"title":"Uganda–Tanzania War","link":"//en.wikipedia.org/wiki/Uganda–Tanzania_War"},"related":[{"title":"Idi Amin","link":"//en.wikipedia.org/wiki/Idi_Amin"}]},"locations":["Uganda","Tanzania"],"latlong":[[1.373333, 32.290275], [-6.369028, 34.888822]],"tags":["conflict"]},{"text":"Cambodian-Vietnamese War ends with the overthrow of Cambodia's Khmer Rouge regime","links": {"main": {"title":"Cambodian-Vietnamese War","link":"//en.wikipedia.org/wiki/Cambodian–Vietnamese_War"},"related":[{"title":"Khmer Rouge","link":"//en.wikipedia.org/wiki/Khmer_Rouge"}]},"locations":["Cambodia","Vietnam"],"latlong":[[12.565679, 104.990963], [14.058324, 108.277199]],"tags":["conflict"]},{"text":"1.7 million people known to have been murdered in The Killing Fields","links": {"main": {"title":"The Killing Fields","link":"//en.wikipedia.org/wiki/The_Killing_Fields"}},"locations":["Cambodia"],"latlong":[[12.565679, 104.990963]],"tags":["internal conflict","government"]},{"text":"Sino-Vietnamese War","links": {"main": {"title":"Sino-Vietnamese War","link":"//en.wikipedia.org/wiki/Sino-Vietnamese_War"}},"locations":["China","Vietnam"],"latlong":[[35.861660, 104.195397], [14.058324, 108.277199]],"tags":["conflict"]},{"text":"Nicaraguan Revolution","links": {"main": {"title":"Nicaraguan Revolution","link":"//en.wikipedia.org/wiki/Nicaraguan_Revolution"}},"locations":["Nicaragua"],"latlong":[[12.865416, -85.207229]],"tags":["internal conflict"]},{"text":"Central Treaty Organization dissolved","links": {"main": {"title":"Central Treaty Organization","link":"//en.wikipedia.org/wiki/Central_Treaty_Organization"}},"locations":["Iran","Iraq","Pakistan","Turkey","United Kingdom"],"latlong":[[32.427908, 53.688046], [33.223191, 43.679291], [30.375321, 69.345116], [38.963745, 35.243322], [51.507351, -0.127758]],"tags":["cold war"]}],"1980":[{"text":"Independence of Rhodesia, which becomes Zimbabwe","links": {"main": {"title":"Rhodesia","link":"//en.wikipedia.org/wiki/Rhodesia"},"related":[{"title":"Zimbabwe","link":"//en.wikipedia.org/wiki/Zimbabwe"}]},"locations":["Zimbabwe"],"latlong":[[-19.015438, 29.154857]],"tags":["government"]},{"text":"Independence of Vanuatu","links": {"main": {"title":"Vanuatu","link":"//en.wikipedia.org/wiki/Vanuatu"}},"locations":["Vanuatu"],"latlong":[[-15.376706, 166.959158]],"tags":["government"]},{"text":"Ronald Reagan is elected President of the United States","links": {"main": {"title":"Ronald Reagan","link":"//en.wikipedia.org/wiki/Ronald_Reagan"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["government","person"]},{"text":"1980 eruption of Mount St. Helens","links": {"main": {"title":"1980 eruption of Mount St. Helens","link":"//en.wikipedia.org/wiki/1980_eruption_of_Mount_St._Helens"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["natural disaster"]},{"text":"Queen Beatrix becomes monarch of the Netherlands","links": {"main": {"title":"Queen Beatrix","link":"//en.wikipedia.org/wiki/Beatrix_of_the_Netherlands"}},"locations":["Netherlands"],"latlong":[[52.132633, 5.291266]],"tags":["government","person"]},{"text":"Beginning of the Iran-Iraq War","links": {"main": {"title":"Iran-Iraq War","link":"//en.wikipedia.org/wiki/Iran–Iraq_War"}},"locations":["Iran","Iraq"],"latlong":[[32.427908, 53.688046], [33.223191, 43.679291]],"tags":["conflict"]},{"text":"Beginning of the Salvadorian Civil War","links": {"main": {"title":"Salvadorian Civil War","link":"//en.wikipedia.org/wiki/Salvadoran_Civil_War"}},"locations":["El Salvador"],"latlong":[[13.794185, -88.89653]],"tags":["conflict"]},{"text":"Beginning of the Nicaraguan Revolution","links": {"main": {"title":"Contra War","link":"//en.wikipedia.org/wiki/Nicaraguan_Revolution"}},"locations":["Nicaragua"],"latlong":[[12.865416, -85.207229]],"tags":["internal conflict"]},{"text":"Assassination of Salvadoran Archbishop Oscar Romero","links": {"main": {"title":"Ã“scar Romero","link":"//en.wikipedia.org/wiki/Ã“scar_Romero"}},"locations":["El Salvador"],"latlong":[[13.794185, -88.89653]],"tags":["death","person","religion"]},{"text":"Disappearance and death of Azaria Chamberlain","links": {"main": {"title":"Death of Azaria Chamberlain","link":"//en.wikipedia.org/wiki/Death_of_Azaria_Chamberlain"}},"locations":["Uluru","Australia"],"latlong":[[-25.352594, 131.034361]],"tags":["person","death"]},{"text":"Solidarity union forms at Poland's GdaÅ„sk Shipyard under Lech WaÅ‚Ä™sa, and begins agitation for greater personal freedoms","links": {"main": {"title":"Solidarity (Polish trade union)","link":"//en.wikipedia.org/wiki/Solidarity_(Polish_trade_union)"},"related":[{"title":"GdaÅ„sk Shipyard","link":"//en.wikipedia.org/wiki/GdaÅ„sk_Shipyard"},{"title":"Lech WaÅ‚Ä™sa","link":"//en.wikipedia.org/wiki/Lech_WaÅ‚Ä™sa"}]},"locations":["Poland"],"latlong":[[51.919438, 19.145136]],"tags":["equality","social","government"]},{"text":"Death of John Lennon","links": {"main": {"title":"Death of John Lennon","link":"//en.wikipedia.org/wiki/Death_of_John_Lennon"}},"locations":["United Kingdom"],"latlong":[[51.507351, -0.127758]],"tags":["person","death","art"]}],"1981":[{"text":"Independence of Palau","links": {"main": {"title":"Palau","link":"//en.wikipedia.org/wiki/Palau"}},"locations":["Palau"],"latlong":[[7.514980, 134.58252]],"tags":["government"]},{"text":"First orbital flight of the Space Shuttle","links": {"main": {"title":"Space Shuttle","link":"//en.wikipedia.org/wiki/Space_Shuttle"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["science","technology","exploration"]},{"text":"Wedding of Charles, Prince of Wales, and Lady Diana Spencer","links": {"main": {"title":"Wedding of Charles, Prince of Wales, and Lady Diana Spencer","link":"//en.wikipedia.org/wiki/Wedding_of_Charles,_Prince_of_Wales,_and_Lady_Diana_Spencer"}},"locations":["United Kingdom"],"latlong":[[51.507351, -0.127758]],"tags":["person","government"]},{"text":"Assassination of Anwar Sadat","links": {"main": {"title":"Anwar Sadat","link":"//en.wikipedia.org/wiki/Anwar_Sadat"},"related":[{"title":"Assassination of Anwar Sadat","link":"//en.wikipedia.org/wiki/Assassination_of_Anwar_Sadat"}]},"locations":["Cairo","Egypt"],"latlong":[[30.044420, 31.235712]],"tags":["person","death"]},{"text":"Launch of MTV","links": {"main": {"title":"MTV","link":"//en.wikipedia.org/wiki/MTV"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["art","social","technology"]}],"1982":[{"text":"Death of Leonid Brezhnev; Yuri Andropov becomes leader of the Soviet Union","links": {"main": {"title":"Death and state funeral of Leonid Brezhnev","link":"//en.wikipedia.org/wiki/Death_and_state_funeral_of_Leonid_Brezhnev"},"related":[{"title":"Yuri Andropov","link":"//en.wikipedia.org/wiki/Yuri_Andropov"}]},"locations":["Soviet Union"],"latlong":[[33.889764, -117.818796]],"tags":["person","death","government"]},{"text":"First Israeli invasion of Lebanon","links": {"main": {"title":"1982 Lebanon War","link":"//en.wikipedia.org/wiki/1982_Lebanon_War"}},"locations":["Israel","Lebanon"],"latlong":[[31.046051, 34.851612], [33.854721, 35.862285]],"tags":["conflict"]},{"text":"Falklands War","links": {"main": {"title":"Falklands War","link":"//en.wikipedia.org/wiki/Falklands_War"}},"locations":["United Kingdom","Argentina"],"latlong":[[51.507351, -0.127758], [-38.416097, -63.616672]],"tags":["conflict"]},{"text":"Hama massacre in Syria leads to more than 10,000 deaths","links": {"main": {"title":"Hama massacre","link":"//en.wikipedia.org/wiki/1982_Hama_massacre"}},"locations":["Syria"],"latlong":[[34.802075, 38.996815]],"tags":["internal conflict","government"]},{"text":"First execution by lethal injection takes place in Texas","links": {"main": {"title":"Lethal injection","link":"//en.wikipedia.org/wiki/Lethal_injection"}},"locations":["Texas","United States of America"],"latlong":[[31.968599, -99.901813]],"tags":["social","technology","government"]},{"text":"Sony releases the worlds first commercially sold CD Player, the Sony CDP-101","links": {"main": {"title":"CD Player","link":"//en.wikipedia.org/wiki/CD_player"},"related":[{"title":"Sony CDP-101","link":"//en.wikipedia.org/wiki/Sony_CDP-101"}]},"locations":["Japan"],"latlong":[[36.204824, 138.252924]],"tags":["technology","social"]},{"text":"Princess Grace of Monaco dies following a car accident","links": {"main": {"title":"Princess Grace of Monaco","link":"//en.wikipedia.org/wiki/Princess_Grace_of_Monaco"}},"locations":["Monaco"],"latlong":[[43.738418, 7.424616]],"tags":["person","death"]}],"1983":[{"text":"GPS development declassified following the downing of Korean Air Lines Flight 007","links": {"main": {"title":"GPS","link":"//en.wikipedia.org/wiki/Global_Positioning_System"},"related":[{"title":"Korean Air Lines Flight 007","link":"//en.wikipedia.org/wiki/Korean_Air_Lines_Flight_007"}]},"locations":["Moneron Island","Sea of Japan","Soviet Union","United States of America"],"latlong":[[46.252778, 141.236667]],"tags":["technology","cold war"]},{"text":"Independence of Brunei","links": {"main": {"title":"Brunei","link":"//en.wikipedia.org/wiki/Brunei"}},"locations":["Brunei"],"latlong":[[4.535277, 114.727669]],"tags":["government"]},{"text":"End of dictatorship in Argentina","links": {"main": {"title":"History of Argentina","link":"//en.wikipedia.org/wiki/History_of_Argentina"},"related":[{"title":"Dirty War","link":"//en.wikipedia.org/wiki/Dirty_War"}]},"locations":["Argentina"],"latlong":[[-38.416097, -63.616672]],"tags":["government"]},{"text":"Second Sudanese Civil War begins","links": {"main": {"title":"Second Sudanese Civil War","link":"//en.wikipedia.org/wiki/Second_Sudanese_Civil_War"}},"locations":["Sudan"],"latlong":[[12.862807, 30.217636]],"tags":["conflict"]},{"text":"Invasion of Grenada by the United States","links": {"main": {"title":"Invasion of Grenada","link":"//en.wikipedia.org/wiki/Invasion_of_Grenada"}},"locations":["Grenada","United States of America"],"latlong":[[12.1165, -61.679], [39.740986, -102.128906]],"tags":["conflict"]},{"text":"Bombing of U.S. Embassy in Beirut","links": {"main": {"title":"Bombing of U.S. Embassy in Beirut","link":"//en.wikipedia.org/wiki/1983_United_States_embassy_bombing"}},"locations":["United States of America","Beirut"],"latlong":[[33.888629, 35.495479]],"tags":["conflict"]},{"text":"Beirut barracks bombing results in the deaths of 307 people, hastening the removal of international peacekeeping forces in Lebanon","links": {"main": {"title":"1983 Beirut barracks bombing","link":"//en.wikipedia.org/wiki/1983_Beirut_barracks_bombing"}},"locations":["Beirut","Lebanon"],"latlong":[[33.888629, 35.495479]],"tags":["conflict"]}],"1984":[{"text":"The human immunodeficiency virus (HIV) is recognized as the cause of HIV/AIDS, and research on zidovudine and other treatments gets underway","links": {"main": {"title":"Human immunodeficiency virus","link":"//en.wikipedia.org/wiki/Human_immunodeficiency_virus"},"related":[{"title":"History of HIV/AIDS","link":"//en.wikipedia.org/wiki/History_of_HIV/AIDS"},{"title":"Zidovudine","link":"//en.wikipedia.org/wiki/Zidovudine"}]},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["science"]},{"text":"Death of Yuri Andropov; Konstantin Chernenko becomes Premier of the Soviet Union","links": {"main": {"title":"Yuri Andropov","link":"//en.wikipedia.org/wiki/Yuri_Andropov"},"related":[{"title":"Konstantin Chernenko","link":"//en.wikipedia.org/wiki/Konstantin_Chernenko"}]},"locations":["Soviet Union"],"latlong":[[33.889764, -117.818796]],"tags":["person","death"]},{"text":"Beginning of the 1984-1985 famine in Ethiopia","links": {"main": {"title":"1984–1985 famine in Ethiopia","link":"//en.wikipedia.org/wiki/1983–85_famine_in_Ethiopia"}},"locations":["Ethiopia"],"latlong":[[9.145000, 40.489673]],"tags":["natural disaster"]},{"text":"Beginning of the UK miners' strike","links": {"main": {"title":"UK Miners' Strike (1984-1985)","link":"//en.wikipedia.org/wiki/UK_miners%27_strike_(1984–85)"}},"locations":["United Kingdom"],"latlong":[[51.507351, -0.127758]],"tags":["social"]},{"text":"Sino-British Joint Declaration agrees to hand Hong Kong back to China by 1997","links": {"main": {"title":"Sino-British Joint Declaration","link":"//en.wikipedia.org/wiki/Sino-British_Joint_Declaration"},"related":[{"title":"Hong Kong","link":"//en.wikipedia.org/wiki/Hong_Kong"}]},"locations":["United Kingdom","China"],"latlong":[[51.507351, -0.127758], [35.861660, 104.195397]],"tags":["treaty","government"]},{"text":"Assassination of Indira Gandhi","links": {"main": {"title":"Assassination of Indira Gandhi","link":"//en.wikipedia.org/wiki/Assassination_of_Indira_Gandhi"}},"locations":["New Delhi","India"],"latlong":[[28.613939, 77.209021]],"tags":["person","death","government"]}],"1985":[{"text":"End of 1982 Lebanon War","links": {"main": {"title":"1982 Lebanon War","link":"//en.wikipedia.org/wiki/1982_Lebanon_War"}},"locations":["Israel","Syria","Lebanon"],"latlong":[[31.046051, 34.851612], [34.802075, 38.996815], [33.854721, 35.862285]],"tags":["conflict"]},{"text":"Live Aid","links": {"main": {"title":"Live Aid","link":"//en.wikipedia.org/wiki/Live_Aid"}},"locations":["London","England","United Kingdom","Philadelphia","Pennsylvania","United States of America"],"latlong":[[51.507351, -0.127758], [39.952584, -75.165222]],"tags":["social","natural disaster","economy"]},{"text":"Death of Konstantin Chernenko; Mikhail Gorbachev becomes Premier of the Soviet Union","links": {"main": {"title":"Konstantin Chernenko","link":"//en.wikipedia.org/wiki/Konstantin_Chernenko"},"related":[{"title":"Mikhail Gorbachev","link":"//en.wikipedia.org/wiki/Mikhail_Gorbachev"}]},"locations":["Soviet Union"],"latlong":[[33.889764, -117.818796]],"tags":["person","death","government"]},{"text":"First use of DNA fingerprinting","links": {"main": {"title":"Alec Jeffreys","link":"//en.wikipedia.org/wiki/Alec_Jeffreys"},"related":[{"title":"DNA fingerprinting","link":"//en.wikipedia.org/wiki/DNA_fingerprinting"}]},"locations":["Leicester","England","United Kingdom"],"latlong":[[52.636878, -1.139759]],"tags":["technology","science"]},{"text":"End of military leadership in Brazil","links": {"main": {"title":"History of Brazil since 1985","link":"//en.wikipedia.org/wiki/History_of_Brazil_since_1985"},"related":[{"title":"Brazilian military government","link":"//en.wikipedia.org/wiki/Brazilian_military_government"}]},"locations":["Brazil"],"latlong":[[-14.235004, -51.92528]],"tags":["government"]}],"1986":[{"text":"Challenger disaster","links": {"main": {"title":"Space Shuttle Challenger disaster","link":"//en.wikipedia.org/wiki/Space_Shuttle_Challenger_disaster"},"related":[{"title":"Space Shuttle Challenger disaster","link":"//en.wikipedia.org/wiki/Space_Shuttle_Challenger"}]},"locations":["Cape Canaveral","Florida","United States of America"],"latlong":[[28.615000, -80.694443]],"tags":["exploration","death","technology"]},{"text":"Chernobyl disaster","links": {"main": {"title":"Chernobyl disaster","link":"//en.wikipedia.org/wiki/Chernobyl_disaster"}},"locations":["Chernobyl","Soviet Union"],"latlong":[[51.272222, 30.224167]],"tags":["technology","disaster"]},{"text":"South Yemen Civil War","links": {"main": {"title":"South Yemen Civil War","link":"//en.wikipedia.org/wiki/South_Yemen_Civil_War"}},"locations":["South Yemen"],"latlong":[[15.552727, 48.516388]],"tags":["conflict"]},{"text":"Launch of the space station Mir","links": {"main": {"title":"Mir","link":"//en.wikipedia.org/wiki/Mir"}},"locations":["Soviet Union"],"latlong":[[33.889764, -117.818796]],"tags":["science","technology","exploration"]},{"text":"First close up images of the planet Uranus","links": {"main": {"title":"Uranus","link":"//en.wikipedia.org/wiki/Uranus"}},"locations":["Space"],"latlong":[],"tags":["science","exploration"]},{"text":"Return of Halley's Comet","links": {"main": {"title":"Halley's Comet","link":"//en.wikipedia.org/wiki/Halley%27s_Comet"}},"locations":[""],"latlong":[],"tags":["space","science"]},{"text":"End of dictatorship of Ferdinand Marcos in the Philippines","links": {"main": {"title":"Ferdinand Marcos","link":"//en.wikipedia.org/wiki/Ferdinand_Marcos"},"related":[{"title":"Philippines","link":"//en.wikipedia.org/wiki/Philippines"}]},"locations":["Philippines"],"latlong":[[10.517518, 123.958740]],"tags":["government","person"]},{"text":"Iran-Contra becomes public","links": {"main": {"title":"Iran-Contra","link":"//en.wikipedia.org/wiki/Iran–Contra_affair"}},"locations":["Iran","United States of America","Iraq"],"latlong":[[32.427908, 53.688046], [39.740986, -102.128906], [33.223191, 43.679291]],"tags":["government"]},{"text":"Assassination of Olof Palme","links": {"main": {"title":"Assassination of Olof Palme","link":"//en.wikipedia.org/wiki/Assassination_of_Olof_Palme"}},"locations":["Stockholm","Sweden"],"latlong":[[59.329323, 18.068581]],"tags":["death","person"]},{"text":"The antidepressant drug Prozac becomes commercially available","links": {"main": {"title":"Antidepressant","link":"//en.wikipedia.org/wiki/Antidepressant"},"related":[{"title":"Fluoxetine (prozac)","link":"//en.wikipedia.org/wiki/Fluoxetine"}]},"locations":["Belgium"],"latlong":[[50.503887, 4.469936]],"tags":["social","science","technology"]}],"1987":[{"text":"Stock market crash of 1987","links": {"main": {"title":"Black Monday (1987)","link":"//en.wikipedia.org/wiki/Black_Monday_(1987)"}},"locations":[],"latlong":[], "tags":["economy","social"]},{"text":"First Intifada between Israel and Palestine begins","links": {"main": {"title":"First Intifada","link":"//en.wikipedia.org/wiki/First_Intifada"}},"locations":["Israel","Palestine"],"latlong":[[31.046051, 34.851612], [31.952162, 35.233154]],"tags":["conflict"]},{"text":"World population reaches 5 billion","links": {},"locations":[""],"latlong":[],"tags":["world population"]}],"1988":[{"text":"Perestroika begins, precipitating the dissolution of the Soviet Union, the revolutions of 1989 in Eastern Europe, and the end of the Cold War","links": {"main": {"title":"Perestroika","link":"//en.wikipedia.org/wiki/Perestroika"},"related":[{"title":"Communist Party of the Soviet Union","link":"//en.wikipedia.org/wiki/Communist_Party_of_the_Soviet_Union"},{"title":"Mikhail Gorbachev","link":"//en.wikipedia.org/wiki/Mikhail_Gorbachev"}]},"locations":["Soviet Union"],"latlong":[[33.889764, -117.818796]],"tags":["government","economy"]},{"text":"End of the Iran-Iraq War","links": {"main": {"title":"Iran-Iraq War","link":"//en.wikipedia.org/wiki/Iran–Iraq_War"}},"locations":["Iran","Iraq"],"latlong":[[32.427908, 53.688046], [33.223191, 43.679291]],"tags":["conflict"]},{"text":"End of dictatorship of Augusto Pinochet in Chile","links": {"main": {"title":"Augusto Pinochet","link":"//en.wikipedia.org/wiki/Augusto_Pinochet"}},"locations":["Chile"],"latlong":[[-35.675147, -71.542969]],"tags":["government"]},{"text":"Pan Am Flight 103 falls over Lockerbie, Scotland","links": {"main": {"title":"Pan Am Flight 103","link":"//en.wikipedia.org/wiki/Pan_Am_Flight_103"}},"locations":["Lockerbie","Scotland"],"latlong":[[55.122245, -3.349008]],"tags":["terrorism"]},{"text":"Tatmadaw launch a military coup","links": {"main": {"title":"Tatmadaw","link":"//en.wikipedia.org/wiki/Tatmadaw"}},"locations":["Myanmar"],"latlong":[[21.913965, 95.956223]],"tags":["government","internal conflict"]},{"text":"Construction of the Channel Tunnel begins","links": {"main": {"title":"Channel Tunnel","link":"//en.wikipedia.org/wiki/Channel_Tunnel"}},"locations":["France","United Kingdom"],"latlong":[[46.227638, 2.213749], [51.507351, -0.127758]],"tags":["technology","transport"]},{"text":"George H. W. Bush is elected President of the United States","links": {"main": {"title":"George HW Bush","link":"//en.wikipedia.org/wiki/George_HW_Bush"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["government","person"]}],"1989":[{"text":"Fall of the Berlin Wall; 1989 revolution and collapse of the Soviet Bloc in Europe","links": {"main": {"title":"Berlin Wall","link":"//en.wikipedia.org/wiki/Berlin_Wall"},"related":[{"title":"1989 revolution","link":"//en.wikipedia.org/wiki/1989_revolution"},{"title":"Soviet Bloc","link":"//en.wikipedia.org/wiki/Soviet_Bloc"}]},"locations":["Berlin","Germany","Soviet Bloc"],"latlong":[[52.520007, 13.404954]],"tags":["social","government"]},{"text":"Tiananmen Square Massacre in China","links": {"main": {"title":"Tiananmen Square Massacre","link":"//en.wikipedia.org/wiki/Tiananmen_Square_protests_of_1989"}},"locations":["China"],"latlong":[[35.861660, 104.195397]],"tags":["internal conflict"]},{"text":"End of Soviet-Afghan War","links": {"main": {"title":"Soviet war in Afghanistan","link":"//en.wikipedia.org/wiki/Soviet–Afghan_War"}},"locations":["Soviet Union","Afghanistan"],"latlong":[[33.889764, -117.818796], [33.939110, 67.709953]],"tags":["conflict"]},{"text":"End of dictatorship in Paraguay and first direct Presidential election in Brazil since 1960","links": {"main": {"title":"Brazilian presidential election, 1989","link":"//en.wikipedia.org/wiki/Brazilian_presidential_election,_1989"}},"locations":["Paraguay"],"latlong":[[-23.442503, -58.443832]],"tags":["government"]},{"text":"Death of Emperor Hirohito, his son Akihito becomes Emperor of Japan","links": {"main": {"title":"Hirohito","link":"//en.wikipedia.org/wiki/Hirohito"},"related":[{"title":"Akihito","link":"//en.wikipedia.org/wiki/Akihito"}]},"locations":["Japan"],"latlong":[[36.204824, 138.252924]],"tags":["person","death","government"]},{"text":"Fatwa issued against Salman Rushdie","links": {"main": {"title":"Salman Rushdie","link":"//en.wikipedia.org/wiki/Salman_Rushdie"},"related":[{"title":"The Satanic Verses controversy","link":"//en.wikipedia.org/wiki/The_Satanic_Verses_controversy"}]},"locations":["Iran"],"latlong":[[32.427908, 53.688046]],"tags":["religion","person","art"]},{"text":"Exxon Valdez oil spill","links": {"main": {"title":"Exxon Valdez oil spill","link":"//en.wikipedia.org/wiki/Exxon_Valdez_oil_spill"}},"locations":["Alaska"],"latlong":[[64.200841, -149.493673]],"tags":["disaster","technology","transport","natural disaster"]},{"text":"First close up pictures of Neptune","links": {"main": {"title":"Neptune","link":"//en.wikipedia.org/wiki/Neptune"}},"locations":["Space"],"latlong":[],"tags":["science","technology","exploration"]},{"text":"First Liberian Civil War begins","links": {"main": {"title":"First Liberian Civil War","link":"//en.wikipedia.org/wiki/First_Liberian_Civil_War"}},"locations":["Liberia"],"latlong":[[6.428055, -9.429499]],"tags":["conflict"]},{"text":"Death of Salvador DalÃ­","links": {"main": {"title":"Salvador DalÃ­","link":"//en.wikipedia.org/wiki/Salvador_DalÃ­"}},"locations":["Figueres","Girona","Catalonia","Spain"],"latlong":[[42.265507, 2.958105]],"tags":["person","death"]}],"1990":[{"text":"Sir Tim Berners-Lee invents the World Wide Web","links": {"main": {"title":"Sir Tim Berners-Lee","link":"//en.wikipedia.org/wiki/Tim_Berners-Lee"},"related":[{"title":"World Wide Web","link":"//en.wikipedia.org/wiki/World_Wide_Web"},{"title":"History of the World Wide Web","link":"//en.wikipedia.org/wiki/History_of_the_World_Wide_Web"}]},"locations":["Geneva","Switzerland"],"latlong":[[46.198392, 6.142296]],"tags":["science","technology","social","economy","person"]},{"text":"German reunification","links": {"main": {"title":"German reunification","link":"//en.wikipedia.org/wiki/German_reunification"}},"locations":["Germany"],"latlong":[[51.165691, 10.451526]],"tags":["social","government"]},{"text":"Launch of the Hubble Space Telescope","links": {"main": {"title":"Hubble Space Telescope","link":"//en.wikipedia.org/wiki/Hubble_Space_Telescope"}},"locations":[""],"latlong":[],"tags":["science","technology","exploration"]},{"text":"Gulf War begins","links": {"main": {"title":"Gulf War","link":"//en.wikipedia.org/wiki/Gulf_War"}},"locations":["Iraq","United States of America","Kuwait","United Kingdom","Saudi Arabia","France"],"latlong":[[33.223191, 43.679291], [39.740986, -102.128906], [29.311660, 47.481766], [51.507351, -0.127758], [23.885942, 45.079162], [46.227638, 2.213749]],"tags":["conflict"]},{"text":"Nicaraguan Revolution ends","links": {"main": {"title":"Nicaraguan Revolution","link":"//en.wikipedia.org/wiki/Nicaraguan_Revolution"}},"locations":["Nicaragua"],"latlong":[[12.865416, -85.207229]],"tags":["internal conflict"]},{"text":"Tatmadaw place Aung San Suu Kyi under house arrest","links": {"main": {"title":"Tatmadaw","link":"//en.wikipedia.org/wiki/Tatmadaw"},"related":[{"title":"Aung San Suu Kyi","link":"//en.wikipedia.org/wiki/Aung_San_Suu_Kyi"}]},"locations":["Myanmar"],"latlong":[[21.913965, 95.956223]],"tags":["government","person"]},{"text":"North and South Yemen unify to form the Republic of Yemen","links": {"main": {"title":"Yemeni unification","link":"//en.wikipedia.org/wiki/Yemeni_unification"},"related":[{"title":"Republic of Yemen","link":"//en.wikipedia.org/wiki/Republic_of_Yemen"},{"title":"North Yemen","link":"//en.wikipedia.org/wiki/North_Yemen"},{"title":"South Yemen","link":"//en.wikipedia.org/wiki/South_Yemen"}]},"locations":["Yemen"],"latlong":[[15.552727, 48.516388]],"tags":["government"]},{"text":"The Intergovernmental Panel on Climate Change releases its first assessment report, linking increases in carbon dioxide in the Earth's atmosphere, and resultant rise in global temperature, to human activities","links": {"main": {"title":"Intergovernmental Panel on Climate Change","link":"//en.wikipedia.org/wiki/Intergovernmental_Panel_on_Climate_Change"},"related":[{"title":"IPCC First Assessment Report","link":"//en.wikipedia.org/wiki/IPCC_First_Assessment_Report"}]},"locations":[""],"latlong":[],"tags":["ecology","science"]}],"1991":[{"text":"Gulf War ends in US withdrawal and failed uprising","links": {"main": {"title":"Gulf War","link":"//en.wikipedia.org/wiki/Gulf_War"},"related":[{"title":"1991 uprisings in Iraq","link":"//en.wikipedia.org/wiki/1991_uprisings_in_Iraq"}]},"locations":["Iraq","United States of America","Kuwait","United Kingdom","Saudi Arabia","France"],"latlong":[[33.223191, 43.679291], [39.740986, -102.128906], [29.311660, 47.481766], [51.507351, -0.127758], [23.885942, 45.079162], [46.227638, 2.213749]],"tags":["conflict"]},{"text":"Dissolution of the Soviet Union and independence of 15 former Soviet republics","links": {"main": {"title":"Dissolution of the Soviet Union","link":"//en.wikipedia.org/wiki/Dissolution_of_the_Soviet_Union"}},"locations":["Soviet Union"],"latlong":[[33.889764, -117.818796]],"tags":["government"]},{"text":"Boris Yeltsin becomes the first President of the Russian Federation","links": {"main": {"title":"Boris Yeltsin","link":"//en.wikipedia.org/wiki/Boris_Yeltsin"},"related":[{"title":"Russian Federation","link":"//en.wikipedia.org/wiki/Russian_Federation"}]},"locations":["Russia"],"latlong":[[61.524010, 105.318756]],"tags":["person","government"]},{"text":"Ten-Day War in Slovenia begins the Yugoslav Wars","links": {"main": {"title":"Ten-Day War","link":"//en.wikipedia.org/wiki/Ten-Day_War"},"related":[{"title":"Slovenia","link":"//en.wikipedia.org/wiki/Slovenia"},{"title":"Yugoslav Wars","link":"//en.wikipedia.org/wiki/Yugoslav_Wars"}]},"locations":["Slovenia","Yugoslavia"],"latlong":[[46.151241, 14.995463], [-36.781019, -73.110371]],"tags":["conflict"]},{"text":"Beginning of the Somali Civil War","links": {"main": {"title":"Somali Civil War","link":"//en.wikipedia.org/wiki/Somali_Civil_War"}},"locations":["Somalia"],"latlong":[[5.152149, 46.199616]],"tags":["conflict"]},{"text":"Beginning of the Sierra Leonian Civil War","links": {"main": {"title":"Sierra Leone Civil War","link":"//en.wikipedia.org/wiki/Sierra_Leone_Civil_War"}},"locations":["Sierra Leone"],"latlong":[[8.460555, -11.779889]],"tags":["conflict"]},{"text":"Beginning of the Algerian Civil War","links": {"main": {"title":"Algerian Civil War","link":"//en.wikipedia.org/wiki/Algerian_Civil_War"}},"locations":["Algeria"],"latlong":[[28.033886, 1.659626]],"tags":["conflict"]},{"text":"The first Website is put online and made available to the public","links": {"main": {"title":"Website","link":"//en.wikipedia.org/wiki/Website"}},"locations":["Geneva","Switzerland"],"latlong":[[46.198392, 6.142296]],"tags":["science","technology","social","economy","person"]},{"text":"Final end of the Khmer Rouge in Cambodia","links": {"main": {"title":"Khmer Rouge","link":"//en.wikipedia.org/wiki/Khmer_Rouge"},"related":[{"title":"Cambodia","link":"//en.wikipedia.org/wiki/Cambodia"}]},"locations":["Cambodia"],"latlong":[[12.565679, 104.990963]],"tags":["government","internal conflict"]}],"1992":[{"text":"Maastricht Treaty creates the European Union","links": {"main": {"title":"Maastricht Treaty","link":"//en.wikipedia.org/wiki/Maastricht_Treaty"},"related":[{"title":"European Union","link":"//en.wikipedia.org/wiki/European_Union"}]},"locations":["European Union"],"latlong":[[49.117029, 14.370117]],"tags":["treaty","government"]},{"text":"Bill Clinton is elected President of the United States","links": {"main": {"title":"Bill Clinton","link":"//en.wikipedia.org/wiki/Bill_Clinton"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["government","person"]},{"text":"End of dictatorship in Albania","links": {"main": {"title":"Albania","link":"//en.wikipedia.org/wiki/Albania"}},"locations":["Albania"],"latlong":[[41.153332, 20.168331]],"tags":["government"]},{"text":"End of dictatorship in South Korea","links": {"main": {"title":"South Korea","link":"//en.wikipedia.org/wiki/South_Korea"}},"locations":["South Korea"],"latlong":[[35.907757, 127.766922]],"tags":["government"]},{"text":"End of Salvadorian Civil War","links": {"main": {"title":"Salvadorian Civil War","link":"//en.wikipedia.org/wiki/Salvadoran_Civil_War"}},"locations":["El Salvador"],"latlong":[[13.794185, -88.89653]],"tags":["conflict"]},{"text":"Bosnian War begins","links": {"main": {"title":"Bosnian War","link":"//en.wikipedia.org/wiki/Bosnian_War"}},"locations":["Bosnia"],"latlong":[[44.443313, 18.172712]],"tags":["conflict"]},{"text":"Los Angeles riots over the acquittal of those involved in the beating of Rodney King","links": {"main": {"title":"1992 Los Angeles riots","link":"//en.wikipedia.org/wiki/1992_Los_Angeles_riots"},"related":[{"title":"Rodney King","link":"//en.wikipedia.org/wiki/Rodney_King"}]},"locations":["Los Angeles","California","United States of America"],"latlong":[[34.052234, -118.243685]],"tags":["internal conflict","social"]}],"1993":[{"text":"Velvet divorce between Czech Republic and Slovakia","links": {"main": {"title":"Dissolution of Czechoslovakia","link":"//en.wikipedia.org/wiki/Dissolution_of_Czechoslovakia"}},"locations":["Czech Republic","Slovakia","Czechoslovakia "],"latlong":[[49.817492, 15.472962], [48.669026, 19.699024], [14.480317, 121.039062]], "tags":["government"]},{"text":"Independence of Eritrea","links": {"main": {"title":"Eritrea","link":"//en.wikipedia.org/wiki/Eritrea"}},"locations":["Eritrea"],"latlong":[[15.298757, 39.523315]],"tags":["government"]},{"text":"Oslo accords end First Intifada between Israel and Palestine","links": {"main": {"title":"Oslo accords","link":"//en.wikipedia.org/wiki/Oslo_Accords"},"related":[{"title":"First Intifada","link":"//en.wikipedia.org/wiki/First_Intifada"}]},"locations":["Israel","Palestine"],"latlong":[[31.046051, 34.851612], [31.952162, 35.233154]],"tags":["treaty","conflict"]},{"text":"1993 World Trade Center bombing","links": {"main": {"title":"1993 World Trade Center bombing","link":"//en.wikipedia.org/wiki/1993_World_Trade_Center_bombing"}},"locations":["New York","United States of America"],"latlong":[[40.712784, -74.005941]],"tags":["terrorism","disaster"]},{"text":"The Waco siege ends after a 51-day standoff, leaving 86 people dead","links": {"main": {"title":"Waco siege","link":"//en.wikipedia.org/wiki/Waco_siege"}},"locations":["Waco","Texas","United States of America"],"latlong":[[31.549333, -97.14667]],"tags":["religion","disaster"]}],"1994":[{"text":"End of apartheid in South Africa and election of Nelson Mandela","links": {"main": {"title":"Apartheid","link":"//en.wikipedia.org/wiki/Apartheid"},"related":[{"title":"Nelson Mandela","link":"//en.wikipedia.org/wiki/Nelson_Mandela"}]},"locations":["South Africa"],"latlong":[[-30.559482, 22.937506]],"tags":["person","government","equality"]},{"text":"Establishment of the North American Free Trade Agreement","links": {"main": {"title":"North American Free Trade Agreement","link":"//en.wikipedia.org/wiki/North_American_Free_Trade_Agreement"}},"locations":["Canada","Mexico","United States of America"],"latlong":[[56.130366, -106.346771], [23.634501, -102.552784], [39.740986, -102.128906]],"tags":["treaty","economy","government"]},{"text":"Cave of the Patriarchs massacre","links": {"main": {"title":"Cave of the Patriarchs massacre","link":"//en.wikipedia.org/wiki/Cave_of_the_Patriarchs_massacre"}},"locations":["Hebron","Palestine"],"latlong":[[31.532569, 35.099826]],"tags":["religion","terrorism"]},{"text":"First Chechen War begins","links": {"main": {"title":"First Chechen War","link":"//en.wikipedia.org/wiki/First_Chechen_War"}},"locations":["Chechnya"],"latlong":[[43.402330, 45.718747]],"tags":["conflict"]},{"text":"1994 civil war in Yemen","links": {"main": {"title":"1994 civil war in Yemen","link":"//en.wikipedia.org/wiki/Yemeni_Civil_War_(1994)"}},"locations":["Yemen"],"latlong":[[15.552727, 48.516388]],"tags":["internal conflict"]},{"text":"Assassination of Juvénal Habyarimana and Cyprien Ntaryamira triggers the Rwandan genocide","links": {"main": {"title":"Assassination of Juvénal Habyarimana and Cyprien Ntaryamira","link":"//en.wikipedia.org/wiki/Assassination_of_Juv%C3%A9nal_Habyarimana_and_Cyprien_Ntaryamira"},"related":[{"title":"Rwandan genocide","link":"//en.wikipedia.org/wiki/Rwandan_genocide"}]},"locations":["Rwanda"],"latlong":[[-1.940278, 29.873888]],"tags":["conflict"]},{"text":"Opening of the Channel Tunnel","links": {"main": {"title":"Channel Tunnel","link":"//en.wikipedia.org/wiki/Channel_Tunnel"}},"locations":["France","United Kingdom"],"latlong":[[46.227638, 2.213749], [51.507351, -0.127758]],"tags":["technology","transport"]},{"text":"Death of Kim Il-sung, Kim Jong-Il becomes Supreme Leader of North Korea","links": {"main": {"title":"Death of Kim Il-sung","link":"//en.wikipedia.org/wiki/Death_and_state_funeral_of_Kim_Il-sung"},"related":[{"title":"Kim Jong-Il","link":"//en.wikipedia.org/wiki/Kim_Jong-Il"}]},"locations":["North Korea"],"latlong":[[40.339852, 127.510093]],"tags":["person","death","government"]},{"text":"Death of Kurt Cobain","links": {"main": {"title":"Death of Kurt Cobain","link":"//en.wikipedia.org/wiki/Death_of_Kurt_Cobain"}},"locations":["Seattle","Washington","United States of America"],"latlong":[[47.606209, -122.332071]],"tags":["person","death","art"]}],"1995":[{"text":"Establishment of the World Trade Organization","links": {"main": {"title":"World Trade Organization","link":"//en.wikipedia.org/wiki/World_Trade_Organization"}},"locations":[],"latlong":[], "tags":["treaty","government"]},{"text":"American terrorist Timothy McVeigh bombs the Alfred P. Murrah Federal Building in Oklahoma City","links": {"main": {"title":"Timothy McVeigh","link":"//en.wikipedia.org/wiki/Timothy_McVeigh"},"related":[{"title":"Alfred P. Murrah Federal Building","link":"//en.wikipedia.org/wiki/Alfred_P._Murrah_Federal_Building"}]},"locations":["Oklahoma","United States of America"],"latlong":[[35.467560, -97.516428]],"tags":["terrorism"]},{"text":"Srebrenica massacre","links": {"main": {"title":"Srebrenica massacre","link":"//en.wikipedia.org/wiki/Srebrenica_massacre"}},"locations":["Srebrenica","Bosnia"],"latlong":[[44.103976, 19.299722]],"tags":["disaster","conflict"]},{"text":"NATO bombing raids in Bosnia end the Bosnian War; Dayton Accords signed","links": {"main": {"title":"Operation Deliberate Force","link":"//en.wikipedia.org/wiki/Operation_Deliberate_Force"},"related":[{"title":"Bosnian War","link":"//en.wikipedia.org/wiki/Bosnian_War"},{"title":"Dayton Accords","link":"//en.wikipedia.org/wiki/Dayton_Accords"}]},"locations":["Bosnia"],"latlong":[[44.443313, 18.172712]],"tags":["conflict"]},{"text":"Assassination of Yitzhak Rabin","links": {"main": {"title":"Assassination of Yitzhak Rabin","link":"//en.wikipedia.org/wiki/Assassination_of_Yitzhak_Rabin"}},"locations":["Tel Aviv","Israel"],"latlong":[[32.085300, 34.781768]],"tags":["death","person"]},{"text":"North Korean famine begins","links": {"main": {"title":"North Korean famine","link":"//en.wikipedia.org/wiki/North_Korean_famine"}},"locations":["North Korea"],"latlong":[[40.339852, 127.510093]],"tags":["disaster"]},{"text":"Third Taiwan Strait Crisis begins","links": {"main": {"title":"Third Taiwan Strait Crisis","link":"//en.wikipedia.org/wiki/Third_Taiwan_Strait_Crisis"}},"locations":["China","United States of America"],"latlong":[[35.861660, 104.195397], [39.740986, -102.128906]],"tags":["conflict"]},{"text":"Austria, Finland and Sweden join the European Union","links": {"main": {"title":"European Union","link":"//en.wikipedia.org/wiki/European_Union"},"related":[{"title":"Sweden","link":"//en.wikipedia.org/wiki/Sweden"},{"title":"Austria","link":"//en.wikipedia.org/wiki/Austria"},{"title":"Finland","link":"//en.wikipedia.org/wiki/Finland"}]},"locations":["European Union","Sweden","Austria","Finland"],"latlong":[[49.117029, 14.370117], [60.128161, 18.643501], [47.516231, 14.550072], [61.924110, 25.748151]],"tags":["government"]}],"1996":[{"text":"First Congo War begins","links": {"main": {"title":"First Congo War","link":"//en.wikipedia.org/wiki/First_Congo_War"}},"locations":["Zaire","Uganda","Rwanda","Burundi","Angola"],"latlong":[[-4.038333, 21.758664], [1.373333, 32.290275], [-1.940278, 29.873888], [-3.373056, 29.918886], [-11.202692, 17.873887]],"tags":["conflict"]},{"text":"Third Taiwan Strait Crisis ends","links": {"main": {"title":"Third Taiwan Strait Crisis","link":"//en.wikipedia.org/wiki/Third_Taiwan_Strait_Crisis"}},"locations":["China","United States of America"],"latlong":[[35.861660, 104.195397], [39.740986, -102.128906]],"tags":["conflict"]},{"text":"First Chechen War ends","links": {"main": {"title":"First Chechen War","link":"//en.wikipedia.org/wiki/First_Chechen_War"}},"locations":["Chechnya"],"latlong":[[43.402330, 45.718747]],"tags":["conflict"]},{"text":"First Liberian Civil War ends","links": {"main": {"title":"First Liberian Civil War","link":"//en.wikipedia.org/wiki/First_Liberian_Civil_War"}},"locations":["Liberia"],"latlong":[[6.428055, -9.429499]],"tags":["conflict"]},{"text":"End of dictatorship in Taiwan","links": {"main": {"title":"Taiwanese presidential election, 1996","link":"//en.wikipedia.org/wiki/Republic_of_China_presidential_election,_1996"},"related":[{"title":"History of Taiwan","link":"//en.wikipedia.org/wiki/History_of_Taiwan"}]},"locations":["Taiwan"],"latlong":[[23.697810, 120.960515]],"tags":["government"]},{"text":"Dolly the sheep becomes the first successful cloned mammal","links": {"main": {"title":"Dolly the sheep","link":"//en.wikipedia.org/wiki/Dolly_(sheep)"}},"locations":["Edinburgh","Scotland","United Kingdom"],"latlong":[[55.953252, -3.188267]],"tags":["technology","science"]},{"text":"The Taliban government takes control of Afghanistan","links": {"main": {"title":"Taliban","link":"//en.wikipedia.org/wiki/Taliban"}},"locations":["Afghanistan"],"latlong":[[33.939110, 67.709953]],"tags":["government"]},{"text":"Port Arthur massacre leaves 35 people dead, leading to tighter gun regulations in Australia","links": {"main": {"title":"Port Arthur massacre (Australia)","link":"//en.wikipedia.org/wiki/Port_Arthur_massacre_(Australia)"}},"locations":["Australia"],"latlong":[[-25.274398, 133.775136]],"tags":["disaster","crime"]},{"text":"Nepalese Civil War begins","links": {"main": {"title":"Nepalese Civil War","link":"//en.wikipedia.org/wiki/Nepalese_Civil_War"}},"locations":["Nepal"],"latlong":[[28.394857, 84.124008]],"tags":["internal conflict"]}],"1997":[{"text":"Tony Blair becomes Prime Minister of the United Kingdom","links": {"main": {"title":"Tony Blair","link":"//en.wikipedia.org/wiki/Tony_Blair"}},"locations":["United Kingdom"],"latlong":[[51.507351, -0.127758]],"tags":["person","government","person"]},{"text":"Transfer of sovereignty over Hong Kong from UK to China","links": {"main": {"title":"Transfer of sovereignty over Hong Kong","link":"//en.wikipedia.org/wiki/Transfer_of_sovereignty_over_Hong_Kong"}},"locations":["United Kingdom","Hong Kong","China"],"latlong":[[51.507351, -0.127758], [22.396428, 114.109497], [35.861660, 104.195397]],"tags":["government"]},{"text":"Lottery Uprising in Albania","links": {"main": {"title":"Albanian Rebellion of 1997","link":"//en.wikipedia.org/wiki/Albanian_Rebellion_of_1997"},"related":[{"title":"Pyramid schemes in Albania","link":"//en.wikipedia.org/wiki/Pyramid_schemes_in_Albania"}]},"locations":["Albania"],"latlong":[[41.153332, 20.168331]],"tags":["economy","internal conflict","government"]},{"text":"Kabila ousts Mobutu: Zaire becomes the Democratic Republic of the Congo","links": {"main": {"title":"Laurent-Désiré Kabila","link":"//en.wikipedia.org/wiki/Laurent-D%C3%A9sir%C3%A9_Kabila"},"related":[{"title":"Democratic Republic of the Congo","link":"//en.wikipedia.org/wiki/Democratic_Republic_of_the_Congo"}]},"locations":["Democratic Republic of The Congo"],"latlong":[[-0.228021, 15.827659]],"tags":["government","person"]},{"text":"Diana, Princess of Wales is killed in a car accident in Paris","links": {"main": {"title":"Death of Diana, Princess of Wales","link":"//en.wikipedia.org/wiki/Death_of_Diana,_Princess_of_Wales"}},"locations":["Paris","United Kingdom"],"latlong":[[48.856614, 2.352222]],"tags":["person","death"]},{"text":"Sound barrier broken on land by Thrust SSC","links": {"main": {"title":"ThrustSSC","link":"//en.wikipedia.org/wiki/ThrustSSC"},"related":[{"title":"Sound barrier","link":"//en.wikipedia.org/wiki/Sound_barrier"}]},"locations":["Nevada","United States of America","United Kingdom"],"latlong":[[38.802610, -116.419389], [39.740986, -102.128906], [51.507351, -0.127758]],"tags":["science","technology"]}],"1998":[{"text":"Osama bin Laden publishes a fatwa against the West","links": {"main": {"title":"Osama bin Laden","link":"//en.wikipedia.org/wiki/Osama_bin_Laden"},"related":[{"title":"FatawÄ of Osama bin_Laden","link":"//en.wikipedia.org/wiki/FatawÄ_of_Osama_bin_Laden"}]},"locations":[],"latlong":[], "tags":["person","religion"]},{"text":"Kenya and Tanzania bombings","links": {"main": {"title":"1998 United States embassy bombings","link":"//en.wikipedia.org/wiki/1998_United_States_embassy_bombings"}},"locations":["Kenya","Nairobi","Tanzania","Dar es Salaam"],"latlong":[[-0.023559, 37.906193], [-6.800000, 39.283333]],"tags":["terrorism"]},{"text":"Google is founded by Larry Page and Sergey Brin","links": {"main": {"title":"Google","link":"//en.wikipedia.org/wiki/Google"},"related":[{"title":"Larry Page","link":"//en.wikipedia.org/wiki/Larry_Page"},{"title":"Sergey Brin","link":"//en.wikipedia.org/wiki/Sergey_Brin"}]},"locations":["United States of America","California"],"latlong":[[36.778261, -119.417932]],"tags":["technology"]},{"text":"Second Congo War begins","links": {"main": {"title":"Second Congo War","link":"//en.wikipedia.org/wiki/Second_Congo_War"}},"locations":["Zaire","Uganda","Rwanda","Burundi","Angola","Chad","Namibia","Zimbabwe"],"latlong":[[-4.038333, 21.758664], [1.373333, 32.290275], [-1.940278, 29.873888], [-3.373056, 29.918886], [-11.202692, 17.873887], [15.454166, 18.732207], [-22.957640, 18.49041], [-19.015438, 29.154857]],"tags":["conflict"]},{"text":"Good Friday Agreement brings an end to The Troubles in Northern Ireland","links": {"main": {"title":"Good Friday Agreement","link":"//en.wikipedia.org/wiki/Good_Friday_Agreement"},"related":[{"title":"The Troubles","link":"//en.wikipedia.org/wiki/The_Troubles"}]},"locations":["Northern Ireland"],"latlong":[[54.787715, -6.492315]],"tags":["internal conflict"]},{"text":"North Korean famine kills an estimated 2.5 million people by this point","links": {"main": {"title":"North Korean famine","link":"//en.wikipedia.org/wiki/North_Korean_famine"}},"locations":["North Korea"],"latlong":[[40.339852, 127.510093]],"tags":["government","natural disaster"]}],"1999":[{"text":"Euro is introduced","links": {"main": {"title":"Euro","link":"//en.wikipedia.org/wiki/Euro"}},"locations":["Europe"],"latlong":[[48.944151, 13.403320]],"tags":["government","economy"]},{"text":"Kosovo War ends the Yugoslav Wars","links": {"main": {"title":"Kosovo War","link":"//en.wikipedia.org/wiki/Kosovo_War"},"related":[{"title":"Yugoslav Wars","link":"//en.wikipedia.org/wiki/Yugoslav_Wars"}]},"locations":["Kosovo","Yugoslavia"],"latlong":[[42.602636, 20.902977], [-36.781019, -73.110371]],"tags":["conflict"]},{"text":"Islamist insurgency in Nigeria begins","links": {"main": {"title":"Islamist insurgency in Nigeria","link":"//en.wikipedia.org/wiki/Boko_Haram_insurgency"}},"locations":["Nigeria"],"latlong":[[9.081999, 8.675277]],"tags":["religion","disaster","internal conflict"]},{"text":"Hugo Chavez becomes President of Venezuela","links": {"main": {"title":"Hugo Chavez","link":"//en.wikipedia.org/wiki/Hugo_Chavez"}},"locations":["Venezuela"],"latlong":[[6.423750, -66.58973]],"tags":["person","government"]},{"text":"Second Chechen War begins","links": {"main": {"title":"Second Chechen War","link":"//en.wikipedia.org/wiki/Second_Chechen_War"}},"locations":["Chechnya"],"latlong":[[43.402330, 45.718747]],"tags":["conflict"]},{"text":"Second Liberian Civil War begins","links": {"main": {"title":"Second Liberian Civil War","link":"//en.wikipedia.org/wiki/Second_Liberian_Civil_War"}},"locations":["Liberia"],"latlong":[[6.428055, -9.429499]],"tags":["conflict"]},{"text":"Fourth Indo-Pakistani War","links": {"main": {"title":"Kargil War","link":"//en.wikipedia.org/wiki/Kargil_War"}},"locations":["India","Pakistan"],"latlong":[[20.593684, 78.96288], [30.375321, 69.345116]],"tags":["conflict"]},{"text":"Crisis in East Timor leads to 1400 deaths","links": {"main": {"title":"1999 East Timorese crisis","link":"//en.wikipedia.org/wiki/1999_East_Timorese_crisis"}},"locations":["East Timor"],"latlong":[[-8.874217, 125.727539]],"tags":["internal conflict"]},{"text":"Columbine High School massacre in Colorado, USA","links": {"main": {"title":"Columbine High School massacre","link":"//en.wikipedia.org/wiki/Columbine_High_School_massacre"}},"locations":["Columbine","United States of America"],"latlong":[[39.587766, -105.06943]],"tags":["disaster","crime"]},{"text":"World population reaches 6 billion","links": {},"locations":[""],"latlong":[],"tags":["world population"]}],"2000":[{"text":"3rd millennium celebrations","links": {"main": {"title":"3rd millennium","link":"//en.wikipedia.org/wiki/3rd_millennium"}},"locations":[""],"latlong":[],"tags":["social"]},{"text":"End of Israeli occupation of Lebanon","links": {"main": {"title":"Lebanon","link":"//en.wikipedia.org/wiki/Lebanon"}},"locations":["Israel","Lebanon"],"latlong":[[31.046051, 34.851612], [33.854721, 35.862285]],"tags":["conflict"]},{"text":"Second Intifada begins","links": {"main": {"title":"Second Intifada","link":"//en.wikipedia.org/wiki/Second_Intifada"}},"locations":["Israel","Palestine"],"latlong":[[31.046051, 34.851612], [31.952162, 35.233154]],"tags":["conflict"]},{"text":"George W. Bush is elected President of the United States","links": {"main": {"title":"George W. Bush","link":"//en.wikipedia.org/wiki/George_W._Bush"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["government","person"]},{"text":"Vicente Fox becomes the first opposition President of Mexico","links": {"main": {"title":"Vicente Fox","link":"//en.wikipedia.org/wiki/Vicente_Fox"}},"locations":["Mexico"],"latlong":[[23.634501, -102.552784]],"tags":["government","person"]},{"text":"Vladimir Putin becomes President of Russia","links": {"main": {"title":"Vladimir Putin","link":"//en.wikipedia.org/wiki/Vladimir_Putin"}},"locations":["Russia"],"latlong":[[61.524010, 105.318756]],"tags":["government","person"]},{"text":"British Army launch Operation Palliser which effectively ends the Sierra Leone Civil War","links": {"main": {"title":"Operation Palliser","link":"//en.wikipedia.org/wiki/British_military_intervention_in_the_Sierra_Leone_Civil_War"},"related":[{"title":"Sierra Leone Civil War","link":"//en.wikipedia.org/wiki/Sierra_Leone_Civil_War"}]},"locations":["Sierra Leone"],"latlong":[[8.460555, -11.779889]],"tags":["conflict"]},{"text":"International Space Station begins operations","links": {"main": {"title":"International Space Station","link":"//en.wikipedia.org/wiki/International_Space_Station"}},"locations":["Space"],"latlong":[],"tags":["science","technology","exploration"]},{"text":"First Inter-Korean Summit","links": {"main": {"title":"Inter-Korean Summit","link":"//en.wikipedia.org/wiki/Inter-Korean_Summit"}},"locations":["North Korea","South Korea"],"latlong":[[40.339852, 127.510093], [35.907757, 127.766922]],"tags":["government"]},{"text":"al-Qaeda suicide bombs the USS Cole","links": {"main": {"title":"Al-Qaeda","link":"//en.wikipedia.org/wiki/Al-Qaeda"},"related":[{"title":"USS Cole (DDG-67)","link":"//en.wikipedia.org/wiki/USS_Cole_(DDG-67)"}]},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["terrorism"]}],"2001":[{"text":"September 11 attacks: Terrorists destroy the World Trade Center in New York City, damage The Pentagon in Washington, DC","links": {"main": {"title":"September 11 attacks","link":"//en.wikipedia.org/wiki/September_11_attacks"},"related":[{"title":"World Trade Center","link":"//en.wikipedia.org/wiki/World_Trade_Center"},{"title":"The Pentagon","link":"//en.wikipedia.org/wiki/The_Pentagon"}]},"locations":["Washington Dc","New York","United States of America"],"latlong":[[38.907192, -77.036871], [40.712784, -74.005941]],"tags":["terrorism"]},{"text":"War on Terror declared","links": {"main": {"title":"War on Terror","link":"//en.wikipedia.org/wiki/War_on_Terror"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["terrorism","conflict","disaster"]},{"text":"Afghan War begins","links": {"main": {"title":"War in Afghanistan (2001–present)","link":"//en.wikipedia.org/wiki/War_in_Afghanistan_(2001–present)"}},"locations":["Afghanistan","United States of America"],"latlong":[[33.939110, 67.709953], [39.740986, -102.128906]],"tags":["conflict"]},{"text":"Wikipedia founded","links": {"main": {"title":"Wikipedia","link":"//en.wikipedia.org/wiki/Wikipedia"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["technology"]},{"text":"African Union founded","links": {"main": {"title":"African Union","link":"//en.wikipedia.org/wiki/African_Union"}},"locations":["Africa"],"latlong":[[-8.783195, 34.508523]],"tags":["government","treaty"]},{"text":"During economic crisis in Argentina government effectively froze all bank accounts for twelve months which led to riots and President de la Rúa's resignation from office","links": {"main": {"title":"Argentine economic crisis (1999–2002)","link":"//en.wikipedia.org/wiki/1998–2002_Argentine_great_depression"},"related":[{"title":"Corralito","link":"//en.wikipedia.org/wiki/Corralito"},{"title":"December 2001 riots in Argentina","link":"//en.wikipedia.org/wiki/December_2001_riots_in_Argentina"},{"title":"Fernando de la Rúa","link":"//en.wikipedia.org/wiki/Fernando_de_la_R%C3%BAa"}]},"locations":["Argentina"],"latlong":[[-38.416097, -63.616672]],"tags":["economy","internal conflict"]},{"text":"President Joseph Estrada of the Philippines impeached","links": {"main": {"title":"Joseph Estrada","link":"//en.wikipedia.org/wiki/Joseph_Estrada"}},"locations":["Philippines"],"latlong":[[10.517518, 123.958740]],"tags":["government"]}],"2002":[{"text":"2002 Bali bombings","links": {"main": {"title":"2002 Bali bombings","link":"//en.wikipedia.org/wiki/2002_Bali_bombings"}},"locations":["Bali"],"latlong":[[-8.409518, 115.188916]],"tags":["terrorism"]},{"text":"Chechen rebels seize theatre in Moscow","links": {"main": {"title":"Moscow theater hostage crisis","link":"//en.wikipedia.org/wiki/Moscow_theater_hostage_crisis"}},"locations":["Chechnya","Moscow","Russia"],"latlong":[[55.755826, 37.6173]],"tags":["terrorism"]},{"text":"America demands Iraq allow unfettered access to weapons inspectors","links": {"main": {"title":"Iraq disarmament crisis","link":"//en.wikipedia.org/wiki/Iraq_disarmament_crisis"}},"locations":["United States of America","Iraq"],"latlong":[[39.740986, -102.128906], [33.223191, 43.679291]],"tags":["government"]},{"text":"Guantanamo Bay detention camp is established","links": {"main": {"title":"Guantanamo Bay detention camp","link":"//en.wikipedia.org/wiki/Guantanamo_Bay_detention_camp"}},"locations":["Guantanamo Bay","United States of America"],"latlong":[[20.019676, -75.110393]],"tags":["terrorism"]},{"text":"Algerian Civil War ends","links": {"main": {"title":"Algerian Civil War","link":"//en.wikipedia.org/wiki/Algerian_Civil_War"}},"locations":[""],"latlong":[],"tags":["conflict"]},{"text":"Beltway sniper attacks","links": {"main": {"title":"Beltway sniper attacks","link":"//en.wikipedia.org/wiki/Beltway_sniper_attacks"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["crime","terrorism","religion"]},{"text":"Rose Revolution in Georgia","links": {"main": {"title":"Rose Revolution","link":"//en.wikipedia.org/wiki/Rose_Revolution"}},"locations":["Georgia"],"latlong":[[32.165622, -82.900075]],"tags":["government","economy","internal conflict"]},{"text":"Independence of East Timor","links": {"main": {"title":"East Timor","link":"//en.wikipedia.org/wiki/East_Timor"}},"locations":["East Timor"],"latlong":[[-8.874217, 125.727539]],"tags":["government"]}],"2003":[{"text":"Iraq War begins, triggering worldwide protests","links": {"main": {"title":"Iraq War","link":"//en.wikipedia.org/wiki/Iraq_War"},"related":[{"title":"Protests against the Iraq War","link":"//en.wikipedia.org/wiki/Protests_against_the_Iraq_War"}]},"locations":["Iraq","United States of America","United Kingdom"],"latlong":[[33.223191, 43.679291], [39.740986, -102.128906], [51.507351, -0.127758]],"tags":["conflict"]},{"text":"War in Darfur begins","links": {"main": {"title":"War in Darfur","link":"//en.wikipedia.org/wiki/War_in_Darfur"}},"locations":["Darfur"],"latlong":[[14.378275, 24.904221]],"tags":["conflict"]},{"text":"The Human Genome Project is completed","links": {"main": {"title":"Human Genome Project","link":"//en.wikipedia.org/wiki/Human_Genome_Project"},"related":[{"title":"National Human Genome Research Institute","link":"//en.wikipedia.org/wiki/National_Human_Genome_Research_Institute"}]},"locations":["Bethesda","Maryland","United States of America"],"latlong":[[38.984652, -77.094709]],"tags":["science"]},{"text":"Second Congo War ends with more than 5 million dead","links": {"main": {"title":"Second Congo War","link":"//en.wikipedia.org/wiki/Second_Congo_War"}},"locations":["Zaire","Uganda","Rwanda","Burundi","Angola","Chad","Namibia","Zimbabwe"],"latlong":[[-4.038333, 21.758664], [1.373333, 32.290275], [-1.940278, 29.873888], [-3.373056, 29.918886], [-11.202692, 17.873887], [15.454166, 18.732207], [-22.957640, 18.49041], [-19.015438, 29.154857]],"tags":["conflict"]},{"text":"Second Liberian Civil War ends","links": {"main": {"title":"Second Liberian Civil War","link":"//en.wikipedia.org/wiki/Second_Liberian_Civil_War"}},"locations":["Liberia"],"latlong":[[6.428055, -9.429499]],"tags":["internal conflict"]},{"text":"Space Shuttle Columbia is destroyed on re-entry","links": {"main": {"title":"Space Shuttle Columbia","link":"//en.wikipedia.org/wiki/Space_Shuttle_Columbia"},"related":[{"title":"Space Shuttle Columbia disaster","link":"//en.wikipedia.org/wiki/Space_Shuttle_Columbia_disaster"}]},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["technology","science","exploration","disaster"]}],"2004":[{"text":"Enlargement of NATO and the European Union incorporates most of former Eastern Bloc","links": {"main": {"title":"Enlargement of NATO","link":"//en.wikipedia.org/wiki/Enlargement_of_NATO"},"related":[{"title":"2004 enlargement of the European Union","link":"//en.wikipedia.org/wiki/2004_enlargement_of_the_European_Union"}]},"locations":[""],"latlong":[],"tags":["government"]},{"text":"Union of South American Nations formed","links": {"main": {"title":"Union of South American Nations","link":"//en.wikipedia.org/wiki/Union_of_South_American_Nations"}},"locations":["Argentina","Bolivia","Brazil","Chile","Colombia","Ecuador","Guyana","Paraguay","Peru","Suriname","Uruguay","Venezuela"],"latlong":[[-38.416097, -63.616672], [-16.290154, -63.588653], [-14.235004, -51.92528], [-35.675147, -71.542969], [4.570868, -74.297333], [-1.831239, -78.183406], [4.860416, -58.93018], [-23.442503, -58.443832], [-9.189967, -75.015152], [3.919305, -56.027783], [-32.522779, -55.765835], [6.423750, -66.58973]],"tags":["government","treaty"]},{"text":"Madrid train bombings","links": {"main": {"title":"Madrid train bombings","link":"//en.wikipedia.org/wiki/2004_Madrid_train_bombings"}},"locations":["Madrid","Spain"],"latlong":[[40.416775, -3.70379], [40.463667, -3.74922]],"tags":["terrorism"]},{"text":"Orange Revolution in Ukraine","links": {"main": {"title":"Orange Revolution","link":"//en.wikipedia.org/wiki/Orange_Revolution"},"related":[{"title":"Timeline of the Orange Revolution","link":"//en.wikipedia.org/wiki/Timeline_of_the_Orange_Revolution"}]},"locations":["Ukraine"],"latlong":[[48.379433, 31.16558]],"tags":["government","internal conflict"]},{"text":"Beslan school hostage crisis","links": {"main": {"title":"Beslan school hostage crisis","link":"//en.wikipedia.org/wiki/Beslan_school_siege"}},"locations":["Beslan","North Ossetia-Alania","Russia"],"latlong":[[43.191686, 44.552938]],"tags":["disaster","crime"]},{"text":"Boxing Day Tsunami occurs in Indian Ocean, leading to the deaths of 230,000","links": {"main": {"title":"Boxing Day Tsunami","link":"//en.wikipedia.org/wiki/2004_Indian_Ocean_earthquake_and_tsunami"}},"locations":["Indonesia","Sri Lanka","India","Thailand"],"latlong":[[-0.789275, 113.921327], [7.873054, 80.771797], [20.593684, 78.96288], [15.870032, 100.992541]],"tags":["natural disaster"]},{"text":"Death of Ronald Reagan","links": {"main": {"title":"Death of Ronald Reagan","link":"//en.wikipedia.org/wiki/Death_and_state_funeral_of_Ronald_Reagan"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["person","death","government"]},{"text":"Death of Yasser Arafat","links": {"main": {"title":"Yasser Arafat","link":"//en.wikipedia.org/wiki/Yasser_Arafat"}},"locations":["Clamart","Hauts-de-Seine","France"],"latlong":[[48.799815, 2.257289]],"tags":["person","death","government"]}],"2005":[{"text":"IRA end military campaign in Northern Ireland","links": {"main": {"title":"Irish Republican Army","link":"//en.wikipedia.org/wiki/Irish_Republican_Army"}},"locations":["Northern Ireland"],"latlong":[[54.787715, -6.492315]],"tags":["government","terrorism"]},{"text":"7/7 attacks on London Underground","links": {"main": {"title":"7/7 attacks","link":"//en.wikipedia.org/wiki/7_July_2005_London_bombings"}},"locations":["United Kingdom"],"latlong":[[51.507351, -0.127758]],"tags":["terrorism"]},{"text":"Angela Merkel becomes Germany's first woman Chancellor","links": {"main": {"title":"Angela Merkel","link":"//en.wikipedia.org/wiki/Angela_Merkel"}},"locations":["Germany"],"latlong":[[51.165691, 10.451526]],"tags":["person","government"]},{"text":"Tulip Revolution in Kyrgyzstan","links": {"main": {"title":"Tulip Revolution","link":"//en.wikipedia.org/wiki/Tulip_Revolution"}},"locations":["Kyrgyzstan"],"latlong":[[41.204380, 74.766098]],"tags":["internal conflict","government"]},{"text":"Second Intifada ends","links": {"main": {"title":"Second Intifada","link":"//en.wikipedia.org/wiki/Second_Intifada"}},"locations":["Israel","Palestine"],"latlong":[[31.046051, 34.851612], [31.952162, 35.233154]],"tags":["conflict"]},{"text":"Israel withdraws from Gaza","links": {"main": {"title":"Israeli disengagement from Gaza","link":"//en.wikipedia.org/wiki/Israeli_disengagement_from_Gaza"}},"locations":["Israel","Gaza"],"latlong":[[31.046051, 34.851612], [31.522561, 34.453593]],"tags":["conflict"]},{"text":"Cedar Revolution in Lebanon triggered by the Assassination of Rafic Hariri","links": {"main": {"title":"Cedar Revolution","link":"//en.wikipedia.org/wiki/Cedar_Revolution"},"related":[{"title":"Assassination of Rafic Hariri","link":"//en.wikipedia.org/wiki/Assassination_of_Rafic_Hariri"}]},"locations":["Lebanon"],"latlong":[[33.854721, 35.862285]],"tags":["person","death","government","internal conflict"]},{"text":"Second Sudanese Civil War ends","links": {"main": {"title":"Second Sudanese Civil War","link":"//en.wikipedia.org/wiki/Second_Sudanese_Civil_War"}},"locations":["Sudan"],"latlong":[[12.862807, 30.217636]],"tags":["conflict"]},{"text":"Hurricane Katrina kills nearly 2000 people in the Gulf of Mexico","links": {"main": {"title":"Hurricane Katrina","link":"//en.wikipedia.org/wiki/Hurricane_Katrina"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["natural disaster"]},{"text":"80,000 are killed in an earthquake in Kashmir","links": {"main": {"title":"2005 Kashmir earthquake","link":"//en.wikipedia.org/wiki/2005_Kashmir_earthquake"}},"locations":["Kashmir","India"],"latlong":[[33.778175, 76.576171], [20.593684, 78.96288]],"tags":["natural disaster"]},{"text":"The Kyoto Protocol comes into effect","links": {"main": {"title":"Kyoto Protocol","link":"//en.wikipedia.org/wiki/Kyoto_Protocol"}},"locations":[""],"latlong":[],"tags":["treaty","ecology"]},{"text":"Mahmoud Ahmadinejad becomes President of Iran","links": {"main": {"title":"Mahmoud Ahmadinejad","link":"//en.wikipedia.org/wiki/Mahmoud_Ahmadinejad"}},"locations":["Iran"],"latlong":[[32.427908, 53.688046]],"tags":["person","government"]},{"text":"Death of Pope John Paul II; Benedict XVI becomes Pope","links": {"main": {"title":"Pope John Paul II","link":"//en.wikipedia.org/wiki/Pope_John_Paul_II"},"related":[{"title":"Benedict XVI","link":"//en.wikipedia.org/wiki/Benedict_XVI"}]},"locations":["Italy","Vatican City"],"latlong":[[41.902916, 12.453389]],"tags":["person","death","religion"]},{"text":"Mike Brown discovers Eris","links": {"main": {"title":"Mike Brown (astronomer)","link":"//en.wikipedia.org/wiki/Mike_Brown_(astronomer)"},"related":[{"title":"Eris (dwarf planet)","link":"//en.wikipedia.org/wiki/Eris_(dwarf_planet)"}]},"locations":["Space"],"latlong":[],"tags":["person","science","exploration"]}],"2006":[{"text":"Independence of Montenegro","links": {"main": {"title":"Montenegro","link":"//en.wikipedia.org/wiki/Montenegro"}},"locations":["Montenegro"],"latlong":[[42.708678, 19.37439]],"tags":["government"]},{"text":"2006 Lebanon War","links": {"main": {"title":"2006 Lebanon War","link":"//en.wikipedia.org/wiki/2006_Lebanon_War"}},"locations":["Lebanon"],"latlong":[[33.854721, 35.862285]],"tags":["conflict"]},{"text":"Mumbai bombings","links": {"main": {"title":"Mumbai bombings","link":"//en.wikipedia.org/wiki/2006_Mumbai_train_bombings"}},"locations":["Mumbai","India"],"latlong":[[19.075984, 72.877656]],"tags":["terrorism"]},{"text":"Comprehensive Peace Accord ends the Nepalese Civil War","links": {"main": {"title":"Comprehensive Peace Accord","link":"//en.wikipedia.org/wiki/Comprehensive_Peace_Accord"},"related":[{"title":"Nepalese Civil War","link":"//en.wikipedia.org/wiki/Nepalese_Civil_War"}]},"locations":["Nepal"],"latlong":[[28.394857, 84.124008]],"tags":["conflict"]},{"text":"Ellen Johnson Sirleaf becomes President of Liberia, and thus Africa's first elected female head of state","links": {"main": {"title":"Ellen Johnson Sirleaf","link":"//en.wikipedia.org/wiki/Ellen_Johnson_Sirleaf"}},"locations":["Liberia"],"latlong":[[6.428055, -9.429499]],"tags":["person","government"]},{"text":"The International Astronomical Union creates the the first formal definition of a planet, and excludes Pluto from the list","links": {"main": {"title":"International Astronomical Union","link":"//en.wikipedia.org/wiki/International_Astronomical_Union"},"related":[{"title":"IAU definition of planet","link":"//en.wikipedia.org/wiki/IAU_definition_of_planet"},{"title":"Pluto","link":"//en.wikipedia.org/wiki/Pluto"}]},"locations":["Space"],"latlong":[],"tags":["science"]},{"text":"Execution of Saddam Hussein","links": {"main": {"title":"Execution of Saddam Hussein","link":"//en.wikipedia.org/wiki/Execution_of_Saddam_Hussein"}},"locations":["Iraq"],"latlong":[[33.223191, 43.679291]],"tags":["person","death","government"]},{"text":"The Baiji, the Yangtze river dolphin, becomes functionally extinct","links": {"main": {"title":"Baiji","link":"//en.wikipedia.org/wiki/Baiji"},"related":[{"title":"River dolphin","link":"//en.wikipedia.org/wiki/River_dolphin"},{"title":"Functionally extinct","link":"//en.wikipedia.org/wiki/Functionally_extinct"}]},"locations":["Yangtze River","China"],"latlong":[[31.846940, 120.872861]],"tags":["ecology"]}],"2007":[{"text":"Anti-government protests in Myanmar crushed by ruling junta","links": {"main": {"title":"2007 Burmese anti-government protests","link":"//en.wikipedia.org/wiki/Saffron_Revolution"}},"locations":["Myanmar"],"latlong":[[21.913965, 95.956223]],"tags":["internal conflict"]},{"text":"Spike in food prices and subprime crisis help trigger global recession","links": {"main": {"title":"2007–2008 world food price crisis","link":"//en.wikipedia.org/wiki/2007–08_world_food_price_crisis"},"related":[{"title":"Subprime crisis","link":"//en.wikipedia.org/wiki/Subprime_crisis"},{"title":"Late-2000s recession","link":"//en.wikipedia.org/wiki/Late-2000s_recession"}]},"locations":[""],"latlong":[],"tags":["economy"]},{"text":"Assassination of Benazir Bhutto","links": {"main": {"title":"Assassination of Benazir Bhutto","link":"//en.wikipedia.org/wiki/Assassination_of_Benazir_Bhutto"}},"locations":["Rawalpindi","Pakistan"],"latlong":[[33.598394, 73.044135], [30.375321, 69.345116]],"tags":["death","person"]}],"2008":[{"text":"End of Monarchy in Nepal","links": {"main": {"title":"Nepal","link":"//en.wikipedia.org/wiki/Nepal"}},"locations":["Nepal"],"latlong":[[28.394857, 84.124008]],"tags":["government"]},{"text":"Barack Obama is elected President of the United States","links": {"main": {"title":"Barack Obama","link":"//en.wikipedia.org/wiki/Barack_Obama"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["person","government"]},{"text":"Cyclone Nargis kills 133,000 in Myanmar","links": {"main": {"title":"Cyclone Nargis","link":"//en.wikipedia.org/wiki/Cyclone_Nargis"}},"locations":["Myanmar"],"latlong":[[21.913965, 95.956223]],"tags":["natural disaster"]},{"text":"Gaza War begins","links": {"main": {"title":"Gaza War (2008–09)","link":"//en.wikipedia.org/wiki/Gaza_War_(2008–09)"}},"locations":["Gaza Strip","Israel"],"latlong":[[31.522561, 34.453593]],"tags":["conflict"]},{"text":"2008 South Ossetia war","links": {"main": {"title":"2008 South Ossetia war","link":"//en.wikipedia.org/wiki/Russo-Georgian_War"}},"locations":["Transcaucasia","Russia","Georgia","South Ossetia","Abkhazia"],"latlong":[[61.524010, 105.318756], [32.165622, -82.900075], [43.045130, 44.287097], [43.090955, 40.924072]],"tags":["conflict"]},{"text":"Kosovo declares independence, to mixed reaction","links": {"main": {"title":"2008 Kosovo declaration of independence","link":"//en.wikipedia.org/wiki/2008_Kosovo_declaration_of_independence"}},"locations":["Kosovo"],"latlong":[[42.602636, 20.902977]],"tags":["government"]},{"text":"Battle of Basra - Iraqi forces crack down on Muqtada al Sadr's Mahdi forces in Basra and Sadr City","links": {"main": {"title":"Battle of Basra (2008)","link":"//en.wikipedia.org/wiki/Battle_of_Basra_(2008)"},"related":[{"title":"Muqtada al Sadr","link":"//en.wikipedia.org/wiki/Muqtada_al_Sadr"}]},"locations":["Basra","Iraq"],"latlong":[[30.500000, 47.816667]],"tags":["conflict"]}],"2009":[{"text":"Gaza War ends; Gaza blockade continues","links": {"main": {"title":"Gaza War (2008–09)","link":"//en.wikipedia.org/wiki/Gaza_War_(2008–09)"},"related":[{"title":"Gaza blockade","link":"//en.wikipedia.org/wiki/Gaza_blockade"}]},"locations":["Gaza"],"latlong":[[31.522561, 34.453593]],"tags":["conflict"]},{"text":"Sri Lankan Civil War ends","links": {"main": {"title":"Sri Lankan Civil War","link":"//en.wikipedia.org/wiki/Sri_Lankan_Civil_War"}},"locations":["Sri Lanka"],"latlong":[[7.873054, 80.771797]],"tags":["conflict"]},{"text":"Election protests begin in Iran","links": {"main": {"title":"2009–2010 Iranian election protests","link":"//en.wikipedia.org/wiki/2009_Iranian_presidential_election_protests"}},"locations":["Iran"],"latlong":[[32.427908, 53.688046]],"tags":["internal conflict","government"]},{"text":"Second Chechen War ends","links": {"main": {"title":"Second Chechen War","link":"//en.wikipedia.org/wiki/Second_Chechen_War"}},"locations":["Chechnya"],"latlong":[[43.402330, 45.718747]],"tags":["conflict"]},{"text":"Boko Haram rebellion begins in Nigeria","links": {"main": {"title":"Boko Haram","link":"//en.wikipedia.org/wiki/Boko_Haram"}},"locations":["Nigeria"],"latlong":[[9.081999, 8.675277]],"tags":["internal conflict","religion","terrorism"]},{"text":"Death of Michael Jackson","links": {"main": {"title":"Death of Michael Jackson","link":"//en.wikipedia.org/wiki/Death_of_Michael_Jackson"}},"locations":["Los Angeles","California","United States of America"],"latlong":[[34.052234, -118.243685]],"tags":["person","death"]},{"text":"Burj Khalifa in Dubai, the world's tallest skyscraper, is completed","links": {"main": {"title":"Burj Khalifa","link":"//en.wikipedia.org/wiki/Burj_Khalifa"}},"locations":["Dubai"],"latlong":[[25.204849, 55.270783]],"tags":["technology"]},{"text":"Great Recession officially ends","links": {"main": {"title":"Great Recession","link":"//en.wikipedia.org/wiki/Great_Recession"}},"locations":[""],"latlong":[],"tags":["economy"]},{"text":"Formation of BRICS economic bloc","links": {"main": {"title":"BRICS","link":"//en.wikipedia.org/wiki/BRICS"}},"locations":["Brazil","Russia","India","China","South Africa"],"latlong":[[-14.235004, -51.92528], [61.524010, 105.318756], [20.593684, 78.96288], [35.861660, 104.195397], [-30.559482, 22.937506]],"tags":["economy"]},{"text":"Treaty of Lisbon ratified","links": {"main": {"title":"Treaty of Lisbon","link":"//en.wikipedia.org/wiki/Treaty_of_Lisbon"}},"locations":["Europe"],"latlong":[[48.944151, 13.403320]],"tags":["treaty"]}],"2010":[{"text":"A 7.0 magnitude earthquake in Haiti kills 230,000","links": {"main": {"title":"2010 Haiti earthquake","link":"//en.wikipedia.org/wiki/2010_Haiti_earthquake"}},"locations":["Haiti"],"latlong":[[18.971187, -72.285215]],"tags":["natural disaster"]},{"text":"Threat of Greece defaulting on its debts triggers the European sovereign debt crisis and Ireland's financial crisis","links": {"main": {"title":"Greek government-debt crisis","link":"//en.wikipedia.org/wiki/Greek_government-debt_crisis"},"related":[{"title":"2010 European sovereign debt crisis","link":"//en.wikipedia.org/wiki/2010_European_sovereign_debt_crisis"},{"title":"Post-2008 Irish economic downturn","link":"//en.wikipedia.org/wiki/Post-2008_Irish_economic_downturn"}]},"locations":["Greece","Ireland","Europe"],"latlong":[[39.074208, 21.824312], [53.412910, -8.24389], [48.944151, 13.403320]],"tags":["economy"]},{"text":"The largest oil spill in US history occurs in the Gulf of Mexico","links": {"main": {"title":"Deepwater Horizon oil spill","link":"//en.wikipedia.org/wiki/Deepwater_Horizon_oil_spill"}},"locations":["Gulf of Mexico"],"latlong":[[25.304304, -90.065918]],"tags":["disaster"]},{"text":"North Korea shells the island of Yeonpyeong","links": {"main": {"title":"Bombardment of Yeonpyeong","link":"//en.wikipedia.org/wiki/Bombardment_of_Yeonpyeong"}},"locations":["North Korea","Yeonpyeong"],"latlong":[[40.339852, 127.510093], [41.500663, 128.825491]],"tags":["conflict"]},{"text":"Aung San Suu Kyi released from house arrest","links": {"main": {"title":"Aung San Suu Kyi","link":"//en.wikipedia.org/wiki/Aung_San_Suu_Kyi"}},"locations":["Myanmar"],"latlong":[[21.913965, 95.956223]],"tags":["government","person"]},{"text":"2010 Moscow Metro bombings","links": {"main": {"title":"2010 Moscow Metro bombings","link":"//en.wikipedia.org/wiki/2010_Moscow_Metro_bombings"}},"locations":["Moscow","Russia"],"latlong":[[55.755826, 37.6173]],"tags":["terrorism"]},{"text":"The website WikiLeaks releases thousands of classified US documents","links": {"main": {"title":"WikiLeaks","link":"//en.wikipedia.org/wiki/WikiLeaks"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["technology"]},{"text":"Arab Spring triggered by self-immolation of Mohamed Bouazizi on December 17, 2010 in Tunisia","links": {"main": {"title":"Arab Spring","link":"//en.wikipedia.org/wiki/Arab_Spring"},"related":[{"title":"Mohamed Bouazizi","link":"//en.wikipedia.org/wiki/Mohamed_Bouazizi"}]},"locations":["Middle East","Tunisia"],"latlong":[[29.298528, 42.55096], [33.886917, 9.537499]],"tags":["person","government","internal conflict"]},{"text":"2010 Kyrgyzstani revolution","links": {"main": {"title":"2010 Kyrgyzstani revolution","link":"//en.wikipedia.org/wiki/Kyrgyz_Revolution_of_2010"}},"locations":["Kyrgyzstan"],"latlong":[[41.204380, 74.766098]],"tags":["internal conflict"]},{"text":"2010 Nigerien coup d'état","links": {"main": {"title":"2010 Nigerien coup d'état","link":"//en.wikipedia.org/wiki/2010_Nigerien_coup_d%27%C3%A9tat"}},"locations":["Nigeria"],"latlong":[[9.081999, 8.675277]],"tags":["internal conflict","government"]},{"text":"10 April the President of Poland, Lech KaczyÅ„ski, is among 96 killed when their airplane crashes in Smolensk","links": {"main": {"title":"Lech KaczyÅ„ski","link":"//en.wikipedia.org/wiki/Lech_Kaczy%C5%84ski"},"related":[{"title":"2010 Polish Air Force Tu-154 crash","link":"//en.wikipedia.org/wiki/2010_Polish_Air_Force_Tu-154_crash"}]},"locations":["Poland","Russia","Smolensk"],"latlong":[[51.919438, 19.145136], [54.790311, 32.050366]],"tags":["disaster"]}],"2011":[{"text":"Death of Steve Jobs","links": {"main": {"title":"Steve Jobs","link":"//en.wikipedia.org/wiki/Steve_Jobs"}},"locations":["Palo Alto","California","United States of America"],"latlong":[[37.441883, -122.143019]],"tags":["person","death","technology"]},{"text":"Independence of South Sudan","links": {"main": {"title":"South Sudan","link":"//en.wikipedia.org/wiki/South_Sudan"}},"locations":["South Sudan"],"latlong":[[6.876992, 31.306979]],"tags":["government"]},{"text":"Arab Spring: revolutions in Tunisia, Egypt and Libya follow, as well as uprisings in Yemen and Bahrain, and protests in several other Arab countries","links": {"main": {"title":"Arab Spring","link":"//en.wikipedia.org/wiki/Arab_Spring"},"related":[{"title":"Tunisian revolution","link":"//en.wikipedia.org/wiki/Tunisian_revolution"},{"title":"2011 Egyptian revolution","link":"//en.wikipedia.org/wiki/2011_Egyptian_revolution"},{"title":"2011 Libyan civil war","link":"//en.wikipedia.org/wiki/2011_Libyan_civil_war"},{"title":"2011 Yemeni uprising","link":"//en.wikipedia.org/wiki/2011_Yemeni_uprising"},{"title":"2011 Bahraini uprising","link":"//en.wikipedia.org/wiki/2011_Bahraini_uprising"}]},"locations":["Tunisia","Egypt","Libya","Yemen","Bahrain"],"latlong":[[33.886917, 9.537499], [26.820553, 30.802498], [26.335100, 17.228331], [15.552727, 48.516388], [26.066700, 50.5577]],"tags":["internal conflict"]},{"text":"Syrian civil war begins","links": {"main": {"title":"Syrian civil war","link":"//en.wikipedia.org/wiki/Syrian_Civil_War"}},"locations":["Syria"],"latlong":[[34.802075, 38.996815]],"tags":["internal conflict"]},{"text":"Occupy movement inspires worldwide protests","links": {"main": {"title":"Occupy movement","link":"//en.wikipedia.org/wiki/Occupy_movement"}},"locations":[""],"latlong":[],"tags":["economy"]},{"text":"News International phone hacking scandal","links": {"main": {"title":"News International phone hacking scandal","link":"//en.wikipedia.org/wiki/News_International_phone_hacking_scandal"}},"locations":["United Kingdom"],"latlong":[[51.507351, -0.127758]],"tags":["technology","crime","social"]},{"text":"A 9.0 earthquake in Japan triggers a tsunami and the meltdown of the Fukushima Nuclear Power Plant","links": {"main": {"title":"2011 TÅhoku earthquake and tsunami","link":"//en.wikipedia.org/wiki/2011_T%C5%8Dhoku_earthquake_and_tsunami"},"related":[{"title":"Fukushima Daiichi nuclear disaster","link":"//en.wikipedia.org/wiki/Fukushima_Daiichi_nuclear_disaster"}]},"locations":["Japan","Fukushima"],"latlong":[[37.760834, 140.474728]],"tags":["natural disaster","technology"]},{"text":"Second Ivorian Civil War ends with the arrest of former president Laurent Gbagbo","links": {"main": {"title":"Second Ivorian Civil War","link":"//en.wikipedia.org/wiki/Second_Ivorian_Civil_War"},"related":[{"title":"Laurent Gbagbo","link":"//en.wikipedia.org/wiki/Laurent_Gbagbo"}]},"locations":["Ivory Coast","France"],"latlong":[[7.539989, -5.54708], [46.227638, 2.213749]],"tags":["internal conflict"]},{"text":"Death of Osama bin Laden","links": {"main": {"title":"Death of Osama bin Laden","link":"//en.wikipedia.org/wiki/Death_of_Osama_bin_Laden"}},"locations":["Pakistan","United States of America"],"latlong":[[30.375321, 69.345116], [39.740986, -102.128906]],"tags":["person","death","terrorism"]},{"text":"Death of Muammar Gaddafi","links": {"main": {"title":"Death of Muammar Gaddafi","link":"//en.wikipedia.org/wiki/Death_of_Muammar_Gaddafi"}},"locations":["Libya"],"latlong":[[26.335100, 17.228331]],"tags":["person","death","government"]},{"text":"Death of and Kim Jong-Il","links": {"main": {"title":"Death and state funeral of Kim Jong-il","link":"//en.wikipedia.org/wiki/Death_and_state_funeral_of_Kim_Jong-il"}},"locations":["North Korea"],"latlong":[[40.339852, 127.510093]],"tags":["person","death","government"]},{"text":"Iraq War ends","links": {"main": {"title":"Withdrawal of U.S. troops from Iraq","link":"//en.wikipedia.org/wiki/Withdrawal_of_U.S._troops_from_Iraq"}},"locations":["Iraq","United States of America","United Kingdom"],"latlong":[[33.223191, 43.679291], [39.740986, -102.128906], [51.507351, -0.127758]],"tags":["conflict"]},{"text":"Riots flare across England","links": {"main": {"title":"2011 England riots","link":"//en.wikipedia.org/wiki/2011_England_riots"}},"locations":["England","United Kingdom"],"latlong":[[51.507351, -0.127758]],"tags":["internal conflict"]},{"text":"Domodedovo International Airport bombing in Russia","links": {"main": {"title":"2011 Domodedovo International Airport bombing","link":"//en.wikipedia.org/wiki/Domodedovo_International_Airport_bombing"}},"locations":["Russia","Domodedovo"],"latlong":[[55.443023, 37.747817]],"tags":["terrorism"]},{"text":"Bombings occur In Somalia","links": {"main": {"title":"2011 Mogadishu bombing","link":"//en.wikipedia.org/wiki/2011_Mogadishu_bombing"}},"locations":["Somalia","Mogadishu"],"latlong":[[2.033333, 45.35]],"tags":["terrorism"]},{"text":"World population reaches 7 billion","links": {"main": {"title":"Day of 7 Billion","link":"//en.wikipedia.org/wiki/Day_of_7_Billion"}},"locations":[""],"latlong":[],"tags":["world population"]}],"2012":[{"text":"2012 Northern Mali conflict, the MNLA declares Azawad an independent state","links": {"main": {"title":"2012 Northern Mali conflict","link":"//en.wikipedia.org/wiki/Northern_Mali_conflict"},"related":[{"title":"National Movement for the Liberation of Azawad","link":"//en.wikipedia.org/wiki/National_Movement_for_the_Liberation_of_Azawad"},{"title":"Azawad","link":"//en.wikipedia.org/wiki/Azawad"}]},"locations":["Mali","Azawad"],"latlong":[[13.495669, 7.109935]],"tags":["internal conflict"]},{"text":"Yemeni President Ali Abdullah Saleh steps down","links": {"main": {"title":"Ali Abdullah Saleh","link":"//en.wikipedia.org/wiki/Ali_Abdullah_Saleh"}},"locations":["Yemen"],"latlong":[[15.552727, 48.516388]],"tags":["government","person"]},{"text":"2012 Benghazi attack leads to the death of US ambassador J. Christopher Stevens","links": {"main": {"title":"2012 Benghazi attack","link":"//en.wikipedia.org/wiki/2012_Benghazi_attack"},"related":[{"title":"J. Christopher Stevens","link":"//en.wikipedia.org/wiki/J._Christopher_Stevens"}]},"locations":["Benghazi","Iraq"],"latlong":[[32.116667, 20.066667]],"tags":["person","death","internal conflict"]},{"text":"The Higgs boson is discovered","links": {"main": {"title":"Higgs boson","link":"//en.wikipedia.org/wiki/Higgs_boson"}},"locations":["Cern","Switzerland"],"latlong":[[46.232991, 6.055279], [46.818188, 8.227512]],"tags":["science"]},{"text":"Hurricane Sandy kills 209 people in North America","links": {"main": {"title":"Hurricane Sandy","link":"//en.wikipedia.org/wiki/Hurricane_Sandy"}},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["natural disaster"]},{"text":"Typhoon Bopha kills over 1,600 in the Philippines","links": {"main": {"title":"Typhoon Bopha","link":"//en.wikipedia.org/wiki/Typhoon_Bopha"}},"locations":["Philippines"],"latlong":[[10.517518, 123.958740]],"tags":["natural disaster"]},{"text":"Skydiver Felix Baumgartner becomes the first person to break the sound barrier without a vehicle","links": {"main": {"title":"Red Bull Stratos","link":"//en.wikipedia.org/wiki/Red_Bull_Stratos"},"related":[{"title":"Felix Baumgartner","link":"//en.wikipedia.org/wiki/Felix_Baumgartner"},{"title":"Sound barrier","link":"//en.wikipedia.org/wiki/Sound_barrier"}]},"locations":["New Mexico","United States of America"],"latlong":[[34.519940, -105.87009], [39.740986, -102.128906]],"tags":["technology","person"]},{"text":"Conflict begins in the Central African Republic","links": {"main": {"title":"Central African Republic conflict (2012–13)","link":"//en.wikipedia.org/wiki/Central_African_Republic_conflict_(2012–present)"}},"locations":["Central African Republic"],"latlong":[[6.611111, 20.939444]],"tags":["internal conflict"]},{"text":"UN Climate Change Conference agrees to extend the Kyoto Protocol until 2020","links": {"main": {"title":"2012 United Nations Climate Change Conference","link":"//en.wikipedia.org/wiki/2012_United_Nations_Climate_Change_Conference"},"related":[{"title":"Kyoto Protocol","link":"//en.wikipedia.org/wiki/Kyoto_Protocol"}]},"locations":["Doha","Qatar"],"latlong":[[25.291610, 51.530437]],"tags":["ecology"]},{"text":"Israel launches Operation Pillar of Defense against the Palestinian-governed Gaza Strip","links": {"main": {"title":"Operation Pillar of Defense","link":"//en.wikipedia.org/wiki/Operation_Pillar_of_Defense"}},"locations":["Israel","Palestinian","Gaza Strip"],"latlong":[[31.046051, 34.851612], [31.952162, 35.233154], [31.522561, 34.453593]],"tags":["conflict"]},{"text":"2012 Guinea-Bissau coup d'état","links": {"main": {"title":"2012 Guinea-Bissau coup d'état","link":"//en.wikipedia.org/wiki/2012_Guinea-Bissau_coup_d%27état"}},"locations":["Guinea-Bissau"],"latlong":[[11.803749, -15.180413]],"tags":["internal conflict","government"]}],"2013":[{"text":"The French military intervenes in the Northern Mali conflict","links": {"main": {"title":"Northern Mali conflict","link":"//en.wikipedia.org/wiki/Northern_Mali_conflict"}},"locations":["Mali","France"],"latlong":[[17.570692, -3.996166], [46.227638, 2.213749]],"tags":["conflict"]},{"text":"Chelyabinsk meteor","links": {"main": {"title":"Chelyabinsk meteor","link":"//en.wikipedia.org/wiki/Chelyabinsk_meteor"}},"locations":["Chelyabinsk","Russia","space"],"latlong":[[55.164442, 61.436843]],"tags":["natural disaster"]},{"text":"Resignation of Pope Benedict XVI, Pope Francis becomes Pope","links": {"main": {"title":"Resignation of Pope Benedict XVI","link":"//en.wikipedia.org/wiki/Resignation_of_Pope_Benedict_XVI"},"related":[{"title":"Pope Francis","link":"//en.wikipedia.org/wiki/Pope_Francis"}]},"locations":["Italy","Vatican City"],"latlong":[[41.902916, 12.453389]],"tags":["person","religion"]},{"text":"Terrorist attack in Boston","links": {"main": {"title":"Boston Marathon bombings","link":"//en.wikipedia.org/wiki/Boston_Marathon_bombing"}},"locations":["Boston","United States of America"],"latlong":[[42.360082, -71.05888]],"tags":["terrorism"]},{"text":"Terrorist attack in Nairobi","links": {"main": {"title":"Westgate shopping mall attack","link":"//en.wikipedia.org/wiki/Westgate_shopping_mall_attack"}},"locations":["Nairobi"],"latlong":[[-1.292066, 36.821946]],"tags":["terrorism"]},{"text":"2013 Savar building collapse in Bangladesh","links": {"main": {"title":"2013 Savar building collapse","link":"//en.wikipedia.org/wiki/2013_Savar_building_collapse"}},"locations":["Bangladesh","India"],"latlong":[[23.684994, 90.356331]],"tags":["disaster","crime"]},{"text":"Edward Snowden releases classified documents concerning mass surveillance by the NSA","links": {"main": {"title":"Edward Snowden","link":"//en.wikipedia.org/wiki/Edward_Snowden"},"related":[{"title":"Global surveillance disclosure","link":"//en.wikipedia.org/wiki/Global_surveillance_disclosure"}]},"locations":["United States of America"],"latlong":[[39.740986, -102.128906]],"tags":["technology","person","terrorism"]},{"text":"President of Egypt Mohamed Morsi is deposed by the military in a coup d'état","links": {"main": {"title":"Mohamed Morsi","link":"//en.wikipedia.org/wiki/Mohamed_Morsi"},"related":[{"title":"2013 Egyptian coup d'état","link":"//en.wikipedia.org/wiki/2013_Egyptian_coup_d%27%C3%A9tat"}]},"locations":["Egypt"],"latlong":[[26.820553, 30.802498]],"tags":["internal conflict","person","government"]},{"text":"Croatia becomes a member of the European Union","links": {"main": {"title":"2013 enlargement of the European Union","link":"//en.wikipedia.org/wiki/2013_enlargement_of_the_European_Union"}},"locations":["Croatia","Europe"],"latlong":[[45.100000, 15.2], [48.944151, 13.403320]],"tags":["government"]},{"text":"The Euromaidan protest begins in Ukraine","links": {"main": {"title":"Timeline of the Euromaidan","link":"//en.wikipedia.org/wiki/Timeline_of_the_Euromaidan"},"related":[{"title":"Euromaidan","link":"//en.wikipedia.org/wiki/Euromaidan"}]},"locations":["Ukraine"],"latlong":[[48.379433, 31.16558]],"tags":["internal conflict","government"]},{"text":"A chemical attack in Ghouta, Syria is blamed on President Bashar al-Assad","links": {"main": {"title":"Ghouta chemical attack","link":"//en.wikipedia.org/wiki/Ghouta_chemical_attack"},"related":[{"title":"Bashar al-Assad","link":"//en.wikipedia.org/wiki/Bashar_al-Assad"}]},"locations":["Syria","Ghouta"],"latlong":[[33.526944, 36.388889]],"tags":["conflict"]},{"text":"Typhoon Haiyan kills nearly 6150 people in the Philippines and Vietnam","links": {"main": {"title":"Typhoon Haiyan","link":"//en.wikipedia.org/wiki/Typhoon_Haiyan"}},"locations":["Philippines","Vietnam"],"latlong":[[10.517518, 123.958740], [14.058324, 108.277199]],"tags":["natural disaster"]},{"text":"Death of Hugo Chávez","links": {"main": {"title":"Death and state funeral of Hugo Chávez","link":"//en.wikipedia.org/wiki/Death_and_state_funeral_of_Hugo_Chávez"}},"locations":["Caracas","Venezuela"],"latlong":[[10.469640, -66.803719], [6.423750, -66.58973]],"tags":["person","death"]},{"text":"Death of Nelson Mandela","links": {"main": {"title":"Nelson Mandela","link":"//en.wikipedia.org/wiki/Nelson_Mandela"}},"locations":["South Africa"],"latlong":[[-30.559482, 22.937506]],"tags":["person","death","government"]},{"text":"Death of Margaret Thatcher","links": {"main": {"title":"Margaret Thatcher","link":"//en.wikipedia.org/wiki/Margaret_Thatcher"}},"locations":["United Kingdom"],"latlong":[[51.507351, -0.127758]],"tags":["person","death","government"]},{"text":"Conflict begins in South Sudan","links": {"main": {"title":"South Sudanese conflict (2013–present)","link":"//en.wikipedia.org/wiki/South_Sudanese_Civil_War"}},"locations":["Sudan","Uganda"],"latlong":[[12.862807, 30.217636], [1.373333, 32.290275]],"tags":["internal conflict"]},{"text":"Uruguay becomes the first country to fully legalise cannabis","links": {"main": {"title":"Legality of cannabis by country","link":"//en.wikipedia.org/wiki/Legality_of_cannabis_by_country"}},"locations":["Uruguay"],"latlong":[[-32.522779, -55.765835]],"tags":["government"]},{"text":"End of 2012-2013 Cypriot financial crisis","links": {"main": {"title":"2012–2013 Cypriot financial crisis","link":"//en.wikipedia.org/wiki/2012–2013_Cypriot_financial_crisis"}},"locations":["Cyprus"],"latlong":[[35.126413, 33.429859]],"tags":["economy"]}],"2014":[{"text":"The worst Ebola virus epidemic in recorded history begins in West Africa, to date infecting more than 20,000 people and killing more than 7,000","links": {"main": {"title":"Ebola virus epidemic in West Africa","link":"//en.wikipedia.org/wiki/Ebola_virus_epidemic_in_West_Africa"}},"locations":["West Africa"],"latlong":[[13.531665, -2.460415]],"tags":["natural disaster"]},{"text":"Euromaidan protest in Ukraine sparks a revolution and the overthrow of Viktor Yanukovych, leading to Russia's annexation of Crimea and the War in Donbass","links": {"main": {"title":"Euromaidan","link":"//en.wikipedia.org/wiki/Euromaidan"},"related":[{"title":"2014 Ukrainian Revolution","link":"//en.wikipedia.org/wiki/2014_Ukrainian_Revolution"},{"title":"Viktor Yanukovych","link":"//en.wikipedia.org/wiki/Viktor_Yanukovych"},{"title":"Annexation of Crimea by the Russian Federation","link":"//en.wikipedia.org/wiki/Annexation_of_Crimea_by_the_Russian_Federation"},{"title":"War in Donbass","link":"//en.wikipedia.org/wiki/War_in_Donbass"}]},"locations":["Ukraine","Russia"],"latlong":[[48.379433, 31.16558], [61.524010, 105.318756]],"tags":["conflict","internal conflict"]},{"text":"Malaysia Airlines Flight 370 disappears mid-flight","links": {"main": {"title":"Malaysia Airlines Flight 370","link":"//en.wikipedia.org/wiki/Malaysia_Airlines_Flight_370"}},"locations":[""],"latlong":[],"tags":["disaster"]},{"text":"Indonesia AirAsia Flight 8501 disappears mid-flight","links": {"main": {"title":"Indonesia AirAsia Flight 8501","link":"//en.wikipedia.org/wiki/Indonesia_AirAsia_Flight_8501"}},"locations":[""],"latlong":[],"tags":["disaster"]},{"text":"Malaysia Airlines Flight 17 is shot down over Ukraine","links": {"main": {"title":"Malaysia Airlines Flight 17","link":"//en.wikipedia.org/wiki/Malaysia_Airlines_Flight_17"}},"locations":[""],"latlong":[],"tags":["disaster"]},{"text":"Air Algérie Flight 5017 crashes in Mali","links": {"main": {"title":"Air Algérie Flight 5017","link":"//en.wikipedia.org/wiki/Air_Alg%C3%A9rie_Flight_5017"}},"locations":[""],"latlong":[],"tags":["disaster"]},{"text":"A coup d'état in Thailand overthrows the caretaker government","links": {"main": {"title":"2014 Thai coup d'état","link":"//en.wikipedia.org/wiki/2014_Thai_coup_d%27%C3%A9tat"}},"locations":["Thailand"],"latlong":[[15.870032, 100.992541]],"tags":["internal conflict","government"]},{"text":"King Juan Carlos I of Spain abdicates; his son becomes King Felipe VI","links": {"main": {"title":"Juan Carlos I","link":"//en.wikipedia.org/wiki/Juan_Carlos_I_of_Spain"},"related":[{"title":"King Felipe VI","link":"//en.wikipedia.org/wiki/King_Felipe_VI"}]},"locations":["Spain"],"latlong":[[40.463667, -3.74922]],"tags":["government"]},{"text":"Israel launches an assault on the Gaza Strip in response to tit-for-tat murder-kidnappings, leading to the deaths of 71 Israelis and 2100 Palestinians","links": {"main": {"title":"Operation Protective Edge","link":"//en.wikipedia.org/wiki/2014_Israel–Gaza_conflict"},"related":[{"title":"2014 kidnapping and murder of Israeli teenagers","link":"//en.wikipedia.org/wiki/2014_kidnapping_and_murder_of_Israeli_teenagers"},{"title":"Kidnapping and murder of Mohammed Abu Khdeir","link":"//en.wikipedia.org/wiki/Kidnapping_and_murder_of_Mohammed_Abu_Khdeir"}]},"locations":["Israel","Gaza Strip","Palestine"],"latlong":[[31.046051, 34.851612], [31.522561, 34.453593], [31.952162, 35.233154]],"tags":["conflict"]},{"text":"ISIS begins its offensive in northern Iraq, leading to intervention in Iraq and Syria by a US-led coalition","links": {"main": {"title":"Islamic State in Iraq and the Levant","link":"//en.wikipedia.org/wiki/Islamic_State_of_Iraq_and_the_Levant"},"related":[{"title":"Northern Iraq offensive (June 2014)","link":"//en.wikipedia.org/wiki/Northern_Iraq_offensive_(June_2014)"},{"title":"2014 American-led intervention in Iraq","link":"//en.wikipedia.org/wiki/2014_American-led_intervention_in_Iraq"},{"title":"American-led intervention in Syria","link":"//en.wikipedia.org/wiki/American-led_intervention_in_Syria"}]},"locations":["Iraq","Syria"],"latlong":[[33.223191, 43.679291], [34.802075, 38.996815]],"tags":["conflict"]},{"text":"Second Libyan Civil War begins","links": {"main": {"title":"Second Libyan Civil War","link":"//en.wikipedia.org/wiki/Libyan_Civil_War_(2014–present)"}},"locations":["Libya"],"latlong":[[26.335100, 17.228331]],"tags":["conflict"]}],"2015":[{"text":"The Rosetta spacecraft's Philae probe becomes the first to successfully land on a comet","links": {"main": {"title":"Rosetta spacecraft","link":"//en.wikipedia.org/wiki/Rosetta_spacecraft"},"related":[{"title":"67P/Churyumov-Gerasimenko","link":"//en.wikipedia.org/wiki/67P/Churyumov-Gerasimenko"}]},"locations":["Space"],"latlong":[],"tags":["science","technology","exploration"]},{"text":"The New Horizons spacecraft becomes the first spacecraft to explore Pluto","links": {"main": {"title":"New Horizons","link":"//en.wikipedia.org/wiki/New_Horizons"},"related":[{"title":"Pluto","link":"//en.wikipedia.org/wiki/Pluto"},{"title":"Charon","link":"//en.wikipedia.org/wiki/Charon_(moon)"},{"title":"New Frontiers program","link":"//en.wikipedia.org/wiki/New_Frontiers_program"}]},"locations":["Space"],"latlong":[],"tags":["science","technology","exploration"]}]}
},{}],2:[function(require,module,exports){
function isset (obj) { return typeof obj !== 'undefined'; }

var React = require('react'),
	ReactCSSTransitionGroup = require('react-addons-css-transition-group'),
	axios = require('axios'),
	Social = require('./react-social.js'),
	Controls = require('./react-controls.js'),
	GMap = require('./react-gmaps.js'),
	ItemList = require('./react-itemlist.js'),
	ItemDetail = require('./react-itemdetail.js'),
	Pagination = require('./react-pagination.js');

var HoH = React.createClass({
	displayName: "HoH",

	getInitialState: function (props) {
		props = props || this.props;

		var pointer = (isset(props.initparams.pointer)) ? parseInt(props.initparams.pointer) : 0;

		return {
			startDate: 0,
			endDate: 0,
			nRows: 25,
			nPages: 0,
			pointer: pointer,
			tag: false,
			selectedItems: [],
			highlightLatLong: false,
			itemDetail: false,
			wikiData: false,
			wikiImages: false
		}
	},

	componentWillMount: function () { this.updateItems(false, false, false) },

	componentDidMount: function () {
		var self = this;

		if (isset(this.props.initparams) && this.props.initparams.year !== false)
			this.setItemDetail({"target": {"dataset": { "year": this.props.initparams.year, position: this.props.initparams.position }}});

		if (typeof window !== 'undefined')
			History.Adapter.bind(window, 'statechange', function() { self.historyUpdate() })
	},

	handlePaginatorClicked: function(n) {
		var i = parseInt(n);
		var page = i + 1;
		this.setState({ pointer: i });


		if (i > 0)
			History.pushState(null, 'Page ' + page + ' | History of Modern Humanity | Builtvisible', '/history-of-humanity/p/' + page);
		else
			History.pushState(null, 'History of Modern Humanity | Builtvisible', '/history-of-humanity/');
	},

	updateItems: function (dateType, newDate, newTag) {
		var newState = {};
		var items = [];
		var n = 0;

		if (dateType === false) {
			var sDate = 1750;
			var eDate = 2015;

			newState.startDate = sDate;
			newState.endDate = eDate;
		}
		else {
			var sDate = (dateType === 'startDate') ? parseInt(newDate) : parseInt(this.state.startDate);
			var eDate = (dateType === 'endDate') ? parseInt(newDate) : parseInt(this.state.endDate);
		}

		for (var i = sDate; i <= eDate; i++) {
			var loopEnd = (isset(this.props.timeline[i])) ? this.props.timeline[i].length : 0;

			for (var j = 0; j < loopEnd; j++) {
				if ((newTag !== false && this.props.timeline[i][j].tags.indexOf(newTag) > -1) || newTag === false) {
					items[n] = this.props.timeline[i][j];
					items[n].year = i;
					items[n].position = j;
					n++;
				}
			}
		}

		if (this.state.pointer >= Math.floor(items.length / this.state.nRows))
			newState.pointer = Math.floor(items.length / this.state.nRows);

		newState.tag = newTag;

		newState.selectedItems = items;
		newState.nPages = Math.ceil(items.length / this.state.nRows);

		if (dateType !== false)
			newState[dateType] = newDate;

		this.setState(newState);
	},

	historyUpdate: function () {
		var parts = window.location.pathname.replace('/history-of-humanity/', '').split('/');

		if (String(window.location.pathname).match(/\/history-of-humanity\/\d+\/\d+\/.+/i) !== null) {
			this.setItemDetail({"target": {"dataset": { "year": parts[0], "position": parts[1] }}}, false);
		}
		else {
			this.hideItemDetail({"target": {"id": "hohContainer"}}, false);
		}
	},

	setItemDetail: function (e, updateHistory) {
		if (typeof e.preventDefault === 'function')
			e.preventDefault();

		if (isset(e.target.dataset.year))
			var year = e.target.dataset.year;
		else if (isset(e.target.parentNode.dataset.year))
			var year = e.target.parentNode.dataset.year;
		else if (isset(e.target.parentNode.parentNode.dataset.year))
			var year = e.target.parentNode.parentNode.dataset.year;

		if (isset(e.target.dataset.position))
			var position = e.target.dataset.position;
		else if (isset(e.target.parentNode.dataset.position))
			var position = e.target.parentNode.dataset.position;
		else if (isset(e.target.parentNode.parentNode.dataset.position))
			var position = e.target.parentNode.parentNode.dataset.position;

		var itemData = this.props.timeline[year][position];

		if (isset(itemData.links.main))
		{
			var wikiTitle = itemData.links.main.link.replace('//en.wikipedia.org/wiki/', '');
			this.setWikiData(wikiTitle);
		}
		else {
			this.setState({ wikiData: false, wikiImages: false })
		}

		this.setState({ itemDetail: itemData });

		if (!isset(updateHistory) || updateHistory !== false)
			History.pushState(null, itemData.text + ' | History of Modern Humanity | Builtvisible', '/history-of-humanity/' + year + '/' + position + '/' + wikiTitle);
	},

	hideItemDetail: function (e, updateHistory) {
		if (e.target.id === 'hohContainer' || e.target.id === 'hideItemDetail' || e.target.parentNode.id === 'hideItemDetail') {
			this.setState({ itemDetail: false });

			var n = parseInt(this.state.pointer) + 1;

			if (!isset(updateHistory) || updateHistory !== false) {
				if (this.state.pointer === 0)
					History.pushState(null, 'History of Modern Humanity | Builtvisible', '/history-of-humanity/');
				else
					History.pushState(null, 'Page ' + n + ' | History of Modern Humanity | Builtvisible', '/history-of-humanity/p/' + n);
			}
		}
	},

	setWikiData: function (wikiTitle) {
		var self = this;
		var wikiApiLink = 'https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts|images&exintro=&explaintext=&titles=' + wikiTitle;
		var wikidata = axios.get('https://apis.builtvisible.com/history_of_humanity/?url=' + encodeURIComponent(wikiApiLink.replace(/&amp;/g, "&")))

		wikidata.then(function (res) {
			var newState = { wikiData: false, wikiImages: false };

			if (isset(res.data.query.pages)) {
				var pageId = Object.keys(res.data.query.pages);

				newState.wikiData = res.data.query.pages[pageId],
				newState.wikiImages = [];

				if (isset(newState.wikiData.images)) {
					for (var i = newState.wikiData.images.length - 1; i >= 0; i--) {
						var title = newState.wikiData.images[i].title.replace('File:', '').replace(/\s+/g,"_");

						if (title.indexOf('.jpg') === -1 && title.indexOf('.png') === -1 && i === 0)
							newState.wikiData.images.splice(i, 1);
						else if (title.indexOf('.jpg') === -1 && title.indexOf('.png') === -1) {
							newState.wikiData.images.splice(i, 1);
							continue;
						}

						var imgLink = 'https://en.wikipedia.org/w/api.php?action=query&titles=Image:' + title + '&prop=imageinfo&iiprop=url&format=json';
						var wikiImgs = axios.get('https://apis.builtvisible.com/history_of_humanity/?url=' + encodeURIComponent(imgLink.replace(/&amp;/g, "&")));

						if (i === 0) {
							wikiImgs.then(function (imgRes) {
								if (isset(imgRes.data.query.pages['-1']) && isset(imgRes.data.query.pages['-1'].imageinfo))
									newState.wikiImages.push(imgRes.data.query.pages['-1'].imageinfo[0].url);

								self.setState(newState);
							})
							.catch(function (e) {
								console.log('error in xhr 2');
								console.log(e);
							});
						}
						else {
							wikiImgs.then(function (imgRes) {
								if (isset(imgRes.data.query.pages['-1']) && isset(imgRes.data.query.pages['-1'].imageinfo))
									newState.wikiImages.push(imgRes.data.query.pages['-1'].imageinfo[0].url);
							})
							.catch(function (e) {
								console.log('error in xhr 3');
								console.log(e);
							});
						}
					}
				}
				else
					self.setState(newState);
			}
		})
		.catch(function (e) {
			console.log('error in xhr 1');
			console.log(e);
		});
	},

	updateDate: function (e) {
		if (!isNaN(e.x)) {
			var year = Math.floor(e.x);

			if (e.name === 'startDate' && year !== this.state.startDate)
				this.updateItems('startDate', year, this.state.tag);
			else if (e.name === 'endDate' && year !== this.state.endDate)
				this.updateItems('endDate', year, this.state.tag);
		}
	},

	updatePointer: function (e) {
		var update = true;

		if (isset(e.target.parentNode.dataset.pointer))
			var pointer = e.target.parentNode.dataset.pointer;
		else if (isset(e.target.dataset.pointer))
			var pointer = e.target.dataset.pointer;

		if (pointer === '1' && (this.state.pointer + 1 < Math.floor(this.state.selectedItems.length / this.state.nRows)))
			var newPointer = this.state.pointer + 1
		else if (pointer === '1' && (this.state.pointer + 1 >= Math.floor(this.state.selectedItems.length / this.state.nRows)))
			update = false;
		else if (pointer === '0' && this.state.pointer > 0)
			var newPointer = this.state.pointer - 1;
		else
			var newPointer = 0;

		if (update) {
			this.setState({ pointer: newPointer });

			if (newPointer === 0)
				History.pushState(null, 'History of Modern Humanity | Builtvisible', '/history-of-humanity/');
			else
				History.pushState(null, 'History of Modern Humanity | Builtvisible', '/history-of-humanity/p/' + newPointer);
		}
	},

	handleMarkerClick: function (e) { this.setState({ highlightLatLong: e }) },

	updateTag: function (e) {
		e.preventDefault();

		var newVal = e.target.dataset.value;

		if (newVal === '')
			newVal = false;

		this.updateItems('endDate', this.state.endDate, newVal);
	},

	renderItemDetail: function () {
		var checkPropsAgainstUrl = true;

		if (typeof window !== 'undefined') {
			var parts = window.location.pathname.replace('/history-of-humanity/', '').split('/');

			checkPropsAgainstUrl = (isset(this.props.initparams)
				&& this.props.initparams.year === parts[0]
				&& this.props.initparams.position === parts[1]
				&& this.props.initparams.name === parts[2]);
		}

		var itemDetail = false,
			wikiData = false,
			wikiImages = false;

		if (this.state.itemDetail !== false)
			var itemDetail = this.state.itemDetail;
		else if (isset(this.props.initwikidata) && isset(this.props.initwikidata.itemDetail) && checkPropsAgainstUrl)
			var itemDetail = this.props.initwikidata.itemDetail;

		if (this.state.wikiData !== false)
			var wikiData = this.state.wikiData;
		else if (isset(this.props.initwikidata) && isset(this.props.initwikidata.wikiData) && checkPropsAgainstUrl)
			var wikiData = this.props.initwikidata.wikiData;

		if (this.state.wikiImages !== false)
			var wikiImages = this.state.wikiImages;
		else if (isset(this.props.initwikidata) && isset(this.props.initwikidata.wikiImages) && checkPropsAgainstUrl)
			var wikiImages = this.props.initwikidata.wikiImages;

		if (itemDetail !== false) {
			return (
				React.createElement("div", { key: "itemDetailContainer" },
					React.createElement(ReactCSSTransitionGroup, { id: 'hideItemDetail', transitionName: 'itemDetailTransition', transitionAppear: true, transitionAppearTimeout: 500, transitionEnterTimeout: 500, transitionLeaveTimeout: 500, onClick: this.hideItemDetail },
						React.createElement("i", { className: 'fa fa-times' })
					),
					React.createElement(ItemDetail, {
						itemDetail: itemDetail,
						wikiData: wikiData,
						wikiImages: wikiImages
					})
				)
			)
		}
		else
			return [];
	},

	render: function () {
		var highchartKey = this.state.startDate.toString() + this.state.endDate.toString();
		var mapsKey = this.state.startDate.toString() + this.state.endDate.toString() + this.state.tag + this.state.pointer;

		var itemDetail = (this.state.itemDetail !== false || isset(this.props.initwikidata))
			? this.renderItemDetail()
			: [];

		return (
			React.createElement("div", { id: "hohContainer", onClick: this.hideItemDetail },
				React.createElement(Social, null),
				React.createElement("div", { id: "mapAndControls" },
					React.createElement(GMap, {
						initialZoom: 3,
						centerLat: 30,
						centerLng: 30,
						mapsKey: mapsKey,
						items: this.state.selectedItems,
						pointer: this.state.pointer,
						handleMarkerClick: this.handleMarkerClick,
						show: this.state.nRows
					}),
					React.createElement(Controls, {
						startDate: this.state.startDate,
						endDate: this.state.endDate,
						tag: this.state.tag,
						inputHandler: this.updateDate,
						tagHandler: this.updateTag,
						buttonHandler: this.updatePointer
					})
				),
				React.createElement(ItemList, {
					items: this.state.selectedItems,
					highlightLatLong: this.state.highlightLatLong,
					pointer: this.state.pointer,
					show: this.state.nRows,
					itemHandler: this.setItemDetail
				}),
				itemDetail,
				React.createElement(Pagination, {
					nPages: this.state.nPages,
					maxBlocks: "11",
					clickHandler: this.handlePaginatorClicked,
					pointer: this.state.pointer
				})
			)
		);
	}
});

module.exports = HoH;
},{"./react-controls.js":3,"./react-gmaps.js":4,"./react-itemdetail.js":6,"./react-itemlist.js":7,"./react-pagination.js":8,"./react-social.js":9,"axios":11,"react":190,"react-addons-css-transition-group":27}],3:[function(require,module,exports){
var React = require('react'),
	InputSlider = require('./react-inputslider.js');

var Controls = React.createClass({
	displayName: "Controls",
	tags: [
		{ value: '', title: 'All' },
		{ value: 'art', title: 'Art' },
		{ value: 'cold war', title: 'Cold War' },
		{ value: 'conflict', title: 'Conflict' },
		{ value: 'crime', title: 'Crime' },
		{ value: 'death', title: 'Death' },
		{ value: 'disaster', title: 'Disaster' },
		{ value: 'ecology', title: 'Ecology' },
		{ value: 'economy', title: 'Economy' },
		{ value: 'equality', title: 'Equality' },
		{ value: 'exploration', title: 'Exploration' },
		{ value: 'government', title: 'Government' },
		{ value: 'history', title: 'History' },
		{ value: 'internal conflict', title:  'Internal Conflict' },
		{ value: 'natural disaster', title: 'Natural Disaster' },
		{ value: 'person', title: 'Person' },
		{ value: 'religion', title: 'Religion' },
		{ value: 'science', title: 'Science' },
		{ value: 'social', title: 'Social' },
		{ value: 'space', title: 'Space' },
		{ value: 'sport', title: 'Sport' },
		{ value: 'technology', title: 'Technology' },
		{ value: 'terrorism', title: 'Terrorism' },
		{ value: 'toys', title: 'Toys' },
		{ value: 'transport', title: 'Transport' },
		{ value: 'treaty', title: 'Treaty' },
		{ value: 'world population', title: 'World Population' },
		{ value: 'ww1', title: 'WW1' },
		{ value: 'ww2', title: 'WW2' }
	],

	getInitialState: function () { return { showTags: false } },

	toggleTags: function () { this.setState({ showTags: !this.state.showTags }) },
	hideTags: function () { this.setState({ showTags: false }) },

	tagHandler: function (e) {
		this.hideTags();
		this.props.tagHandler(e);
	},

	renderTag: function (tag) { return React.createElement("li", { key: tag.value, 'data-value': tag.value, onClick: this.tagHandler }, tag.title) },

	render: function () {
		var tags = [];
		var currentTag = 'All';

		for (var i = this.tags.length - 1; i >= 0; i--) {
			if (this.state.showTags)
				tags[i] = this.renderTag(this.tags[i]);

			if (this.props.tag === this.tags[i].value)
				currentTag = this.tags[i].title;
		}

		var listClass = 'dropdown';

		if (this.state.showTags)
			listClass += ' active';

		return (
			React.createElement("div", { id: "controls" },
				React.createElement("div", { className: "panel" },
					React.createElement("label", { htmlFor: 'startDate' }, 'Start Date'),
					React.createElement("div", { className: 'yearPanel' }, this.props.startDate),
					React.createElement(InputSlider, { axis: 'x', x: this.props.startDate, xMin: 1750, xMax: 2014, name: 'startDate', onChange: this.props.inputHandler })
				),
				React.createElement("div", { className: "panel" },
					React.createElement("label", { htmlFor: 'endDate' }, 'End Date'),
					React.createElement("div", { className: 'yearPanel' }, this.props.endDate),
					React.createElement(InputSlider, { axis: 'x', x: this.props.endDate, xMin: 1751, xMax: 2015, name: 'endDate', onChange: this.props.inputHandler })
				),
				React.createElement("div", { className: "panel" },
					React.createElement("label", null, 'Tag'),
					React.createElement("p", { id: 'tagHandler', onClick: this.toggleTags }, currentTag),
					React.createElement("ul", { id: 'tags', className: listClass }, tags)
				),
				React.createElement("span", { className: 'fa_button', id: 'backButton', 'data-pointer': 0, onClick: this.props.buttonHandler },
					React.createElement("i", { className: 'fa fa-angle-double-left' })
				),
				React.createElement("span", { className: 'fa_button', id: 'forwardButton', 'data-pointer': 1,  onClick: this.props.buttonHandler },
					React.createElement("i", { className: 'fa fa-angle-double-right' })
				)
			)
		)
	}
});

module.exports = Controls;
},{"./react-inputslider.js":5,"react":190}],4:[function(require,module,exports){
function isset (obj) { return typeof obj !== 'undefined'; }

var React = require('react');

var GMap = React.createClass({
	displayName: "GMap",

	map: null,
	markers: null,
	infoWindow: null,
	style: [{
		"featureType": "landscape",
		"elementType": "geometry.fill",
		"stylers": [{
			"visibility": "on"
		}, {
			"color": "#DDD4CB"
		}]
	}, {
		"featureType": "poi",
		"stylers": [{
			"visibility": "off"
		}]
	}, {
		"featureType": "road",
		"stylers": [{
			"visibility": "off"
		}]
	}, {
		"featureType": "transit",
		"stylers": [{
			"visibility": "off"
		}]
	}, {
		"featureType": "administrative",
		"elementType": "labels",
		"stylers": [{
			"color": "#808080"
		}, {
			"visibility": "on"
		}, {
			"weight": 0.2
		}]
	}, {
		"featureType": "administrative.locality",
		"stylers": [{
			"visibility": "off"
		}]
	}, {
		"featureType": "administrative.neighborhood",
		"stylers": [{
			"visibility": "off"
		}]
	}, {
		"featureType": "administrative.land_parcel",
		"stylers": [{
			"visibility": "off"
		}]
	}, {
		"featureType": "administrative.country",
		"elementType": "labels.text.fill",
		"stylers": [{
			"invert_lightness": true
		}, {
			"visibility": "simplified"
		}]
	}, {
		"featureType": "administrative.country",
		"elementType": "geometry.stroke",
		"stylers": [{
			"color": "#F7F5F2"
		}, {
			"visibility": "on"
		}, {
			"weight": 1.0
		}]
	}, {
		"featureType": "administrative.province",
		"stylers": [{
			"visibility": "off"
		}]
	}, {
		"featureType": "water",
		"elementType": "geometry.fill",
		"stylers": [{
			"color": "#F7F5F2"
		}, {
			"visibility": "on"
		}]
	}, {
		"featureType": "water",
		"elementType": "labels.text.fill",
		"stylers": [{
			"visibility": "simplified"
		}, {
			"invert_lightness": true
		}]
	}, {
		"elementType": "labels.text.fill",
		"stylers": [{
			"color": "#808080"
		}]
	}],

	componentWillMount: function() {
		// load initial map
		this.markers = [];
		this.latlongs = [];
	},

	componentDidMount: function(props) {
		var self = this;

		if (typeof google === 'object') {
			this.map = this.createMap();

			google.maps.event.addListener(this.map, 'center_changed', function() {
				self.checkBounds(self.map);
			});

			google.maps.event.addDomListener(window, "resize", function() {
				var center = self.map.getCenter();
				google.maps.event.trigger(self.map, "resize");
				self.map.setCenter(center);
			});

			if (this.props.items.length > 0)
				this.createMarkers();

			window.addEventListener("resize", this.updateDimensions);
		}

		this.updateDimensions();
	},

	componentWillUnmount: function() { if (typeof window !== 'undefined') window.removeEventListener("resize", this.updateDimensions) },
	shouldComponentUpdate: function (newProps, newState) { return newProps.mapsKey !== this.props.mapsKey || (this.state !== null && isset(this.state.width) && isset(newState.width) && newState.width !== this.state.width) },

	componentDidUpdate: function () {
		if (typeof google === 'object') {
			this.clearMarkers();
			this.createMarkers();
		}
	},

	updateDimensions: function (returnStyles) {
		if (typeof window !== 'undefined') {
			var dims = getViewportSize();

			var styles = {
				height: '600px',
				width: '1300px'
			}

			if (dims.width < 640) {
				styles.height = '250px';
				styles.width = '285px';
			}
			else if (dims.width > 640 && dims.width < 800) {
				styles.height = '325px';
				styles.width = '425px';
			}
			else if (dims.width > 800 && dims.width < 1024) {
				styles.height = '455px';
				styles.width = '625px';
			}
			else if (dims.width > 1024 && dims.width < 1376) {
				styles.width = '900px';
			}
			else if (dims.width > 1376 && dims.width < 1840) {
				styles.width = '1200px';
			}

			this.setState(styles);
		}
	},

	clearMarkers: function () {
		this.setMapOnAll(null);
		this.markers = [];
		this.latlongs = [];
	},

	createMarkers: function () {
		var x = this.props.pointer * this.props.show;
		var y = this.props.pointer * this.props.show + this.props.show;
		var year = this.props.items[x].year;

		for (var i = x; i < y; i++) {
			var currentItem = this.props.items[i];

			if (isset(currentItem.latlong) && currentItem.latlong.length > 0)
			{
				for (var j = currentItem.latlong.length - 1; j >= 0; j--) {
					var marker = new MarkerWithLabel({
						icon: {
							path: google.maps.SymbolPath.CIRCLE,
							scale: 0,
						},
						labelAnchor: new google.maps.Point(10, 10),
						labelClass: "label",
						position: new google.maps.LatLng(currentItem.latlong[j][0], currentItem.latlong[j][1]),
						map: this.map
					});
					
					this.markers.push(marker);
					this.latlongs.push(currentItem.latlong[j]);
				}
			}
		}

		this.setMapOnAll(this.map);
	},

	setMapOnAll: function (map) {
		var self = this;

		for (var i = 0; i < this.markers.length; i++) {
			this.markers[i].setMap(map);
			google.maps.event.addListener(this.markers[i], "click", function (e) {
				var latLong = {};

				latLong.lat = this.position.G.toFixed(1);
				latLong.long = this.position.K.toFixed(1);
				self.props.handleMarkerClick(latLong);
			});
		}
	},

	createMap: function() {
		var mapOptions = {
			//disableDefaultUI: true,
			maxZoom: 10,
			minZoom: 2,
			scrollwheel: false,
			mapTypeId: google.maps.MapTypeId.ROADMAP,
			styles: this.style,
			streetViewControl: !1,
			mapTypeControl: !1,
			zoom: this.props.initialZoom,
			center: new google.maps.LatLng(this.props.centerLat, this.props.centerLng)
		};

		return new google.maps.Map(this.refs.mapCanvas, mapOptions);
	},

	// If the map position is out of range, move it back
	checkBounds: function (map) {
		var latNorth = map.getBounds().getNorthEast().lat();
		var latSouth = map.getBounds().getSouthWest().lat();
		var newLat;

		var pi = Math.PI;

		var t1 = Math.pow(Math.E, pi);
		var t2 = Math.pow(Math.E, 0 - pi);
		var sinh = (t1 - t2) / 2;

		var atan = Math.atan(sinh);

		var pos = atan * 180 / pi;
		var neg = 0 - pos;

		if (latNorth < pos && latSouth > neg) /* in both side -> it's ok */
			return;
		else {
			if (latNorth > pos && latSouth < neg) /* out both side -> it's ok */
				return;
			else {
				if (latNorth > pos)
					newLat = map.getCenter().lat() - (latNorth - pos); /* too north, centering */
				if (latSouth < neg)
					newLat = map.getCenter().lat() - (latSouth + 85); /* too south, centering */
			}
		}

		if (newLat) {
			var newCenter = new google.maps.LatLng(newLat, map.getCenter().lng());
			map.setCenter(newCenter);
		}
	},

	render: function () {
		return (
			React.createElement("div", { id: "gmap" },
				React.createElement("div", { ref: "mapCanvas", id: "mapCanvas" })
			)
		)
	}
});

module.exports = GMap;
},{"react":190}],5:[function(require,module,exports){
// based on //raw.githubusercontent.com/wangzuo/react-input-slider/gh-pages/dist/input-slider.js
var React = require('react');

var InputSlider = React.createClass({
	displayName: 'InputSlider',

	getInitialState: function () { return { mobile: (typeof window !== 'undefined') ? mobileCheck() : false } },

	getDefaultProps: function () {
		return {
			axis: 'x',
			xMin: 0,
			yMin: 0
		}
	},

	getPosition: function () {
		var top = (this.props.y - this.props.yMin) / (this.props.yMax - this.props.yMin) * 100;
		var left = (this.props.x - this.props.xMin) / (this.props.xMax - this.props.xMin) * 100;

		if (top > 100) top = 100;
		if (top < 0) top = 0;
		if (this.props.axis === 'x') top = 0;
		top += '%';

		if (left > 100) left = 100;
		if (left < 0) left = 0;
		if (this.props.axis === 'y') left = 0;
		left += '%';

		return { top: top, left: left };
	},

	handleSliderClick: function (e) {
		e.stopPropagation();
		e.nativeEvent.stopImmediatePropagation();
	},

	handleMoveStart: function (e) {
		e.preventDefault();
		var dom = this.refs.handle.getDOMNode();

		this.start = {
			x: dom.offsetLeft,
			y: dom.offsetTop
		};

		this.offset = {
			x: e.clientX,
			y: e.clientY
		};

		if (!this.state.mobile) {
			document.addEventListener('mousemove', this.handleDrag);
			document.addEventListener('mouseup', this.handleDragEnd);
		}
		else {
			document.addEventListener('touchmove', this.handleDrag);
			document.addEventListener('touchend', this.handleDragEnd);
		}
	},

	handleDrag: function (e) {
		e.preventDefault();
		this.changeValue(this.getPos(e));
	},

	handleDragEnd: function (e) {
		e.preventDefault();
		
		if (!this.state.mobile) {
			document.removeEventListener('mousemove', this.handleDrag);
			document.removeEventListener('mouseup', this.handleDragEnd);
		}
		else {
			document.removeEventListener('touchmove', this.handleDrag);
			document.removeEventListener('touchend', this.handleDragEnd);
		}

		if (this.props.onDragEnd) this.changeValue(this.getPos(e), true);
	},

	handleClick: function (e) {
		var rect = this.getDOMNode().getBoundingClientRect();

		this.changeValue({
			left: e.clientX - rect.left,
			top: e.clientY - rect.top
		}, true);
	},

	getPos: function (e) {
		if (!this.state.mobile) {
			var posX = e.clientX + this.start.x - this.offset.x;
			var posY = e.clientY + this.start.y - this.offset.y;
		}
		else {
			var posX = e.changedTouches[0].screenX - e.changedTouches[0].radiusX;
			var posY = e.changedTouches[0].screenY - e.changedTouches[0].radiusY;
		}

		return {
			left: posX,
			top: posY
		};
	},

	changeValue: function (pos, dragEnd) {
		if (!this.props.onChange) return;

		var rect = this.getDOMNode().getBoundingClientRect();
		var width = rect.width;
		var height = rect.height;
		var left = pos.left;
		var top = pos.top;
		var axis = this.props.axis;

		if (left < 0) left = 0;
		if (left > width) left = width;
		if (top < 0) top = 0;
		if (top > height) top = height;

		var x = 0;
		var y = 0;
		if (axis === 'x' || axis === 'xy') {
			x = left / width * (this.props.xMax - this.props.xMin) + this.props.xMin;
		}
		if (axis === 'y' || axis === 'xy') {
			y = top / height * (this.props.yMax - this.props.yMin) + this.props.yMin;
		}

		this.props.onChange({ x: x, y: y, name: this.props.name });

		if (this.props.onDragEnd && dragEnd) this.props.onDragEnd({ x: x, y: y, name: this.props.name });
	},

	render: function () {
		var pos = this.getPosition();
		var axis = this.props.axis;
		var valueStyle = {};

		if (axis === 'x') valueStyle.width = pos.left;
		if (axis === 'y') valueStyle.height = pos.top;

		return (
			React.createElement("div", { className: 'slider slider_' + axis, id: this.props.name, onClick: this.handleClick, onTouchStart: this.handleClick },
				React.createElement('div', { className: 'value', style: valueStyle }),
				React.createElement('div', { className: 'handle', ref: 'handle', onMouseDown: this.handleMoveStart, onTouchStart: this.handleMoveStart, onClick: this.handleSliderClick, style: pos })
			)
		)
	}
});

module.exports = InputSlider;
},{"react":190}],6:[function(require,module,exports){
function isset (obj) { return typeof obj !== 'undefined'; }

var React = require('react'),
	ReactCSSTransitionGroup = require('react-addons-css-transition-group');

var ItemDetail = React.createClass({
	displayName: "ItemDetail",

	getInitialState: function () { return { galleryPointer: 0 } },
	componentWillReceiveProps: function () { this.setState({ galleryPointer: 0 }); },

	renderRelatedLink: function (link) {
		return (
			React.createElement("li", { key: 'relatedLink' + link.link },
				React.createElement("a", { href: link.link, target: '_blank' }, link.title)
			)
		)
	},

	noRelatedLinks: function () { return React.createElement("li", { key: 'relatedLink' }, 'No related links') },

	renderItemLocation: function (location) { return React.createElement("li", { key: 'loc' + location }, location) },
	noLocations: function () { return React.createElement("li", { key: 'locations' }, 'No locations to show') },

	renderGalleryImg: function (imgUrl) { return React.createElement("img", { key: 'img' + imgUrl, className: 'galleryImg', src: imgUrl }) },
	noImages: function () { return React.createElement("p", { key: 'gallery' }, 'No images') },

	renderMainLink: function () {
		if (isset(this.props.itemDetail.links.main)) {
			return (
				React.createElement("p", { key: 'mainLink', id: 'mainLink' },
					React.createElement("span", null, 'Full article: '),
					React.createElement("a", { href: this.props.itemDetail.links.main.link, target: '_blank' }, this.props.itemDetail.links.main.title)
				)
			)
		}
		else
			return []
	},

	renderControls: function () {
		return (
			React.createElement("div", { key: 'galleryControls' },
				React.createElement("span", { className: 'fa_button', id: 'galleryBack', onClick: this.buttonHandler },
					React.createElement("i", { className: 'fa fa-angle-double-left' })
				),
				React.createElement("span", { className: 'fa_button', id: 'galleryForward',  onClick: this.buttonHandler },
					React.createElement("i", { className: 'fa fa-angle-double-right' })
				)
			)
		)
	},

	buttonHandler: function (e) {
		var id = (isset(e.target.id) && (e.target.id === 'galleryBack' || e.target.id === 'galleryForward')) ? e.target.id : e.target.parentNode.id;

		if (id === 'galleryForward')
			var newPointerPosition = (this.state.galleryPointer + 3 < this.props.wikiImages.length) ? this.state.galleryPointer + 1 : false;
		else
			var newPointerPosition = (this.state.galleryPointer - 1 < 0) ? false : this.state.galleryPointer - 1;

		if (newPointerPosition)
			this.setState({ galleryPointer: newPointerPosition });
	},

	renderExtract: function (extract, i) { return React.createElement("p", { key: 'extracts_' + i }, extract) },

	render: function () {
		if (typeof window !== 'undefined')
			var windowDims = getViewportSize();

		if (this.props.itemDetail !== false) {
			if (isset(this.props.itemDetail.links.related))
				var itemLinks = this.props.itemDetail.links.related.map(this.renderRelatedLink);
			else
				var itemLinks = this.noRelatedLinks();

			if (isset(this.props.itemDetail.locations[0]))
				var itemLocations = this.props.itemDetail.locations.map(this.renderItemLocation);
			else
				var itemLocations = this.noLocations();

			var mainLink = this.renderMainLink();

			if (this.props.wikiImages !== false && this.props.wikiImages.length > 0) {
				var gallery = [];
				var n = (this.state.galleryPointer + 3 <= this.props.wikiImages.length) ? this.state.galleryPointer + 3 : this.props.wikiImages.length;

				for (var i = this.state.galleryPointer; i < n; i++) {
					var img = this.renderGalleryImg(this.props.wikiImages[i]);
					gallery.push(img);
				}
			}
			else
				var gallery = this.noImages();

			if (this.props.wikiData !== false && this.props.wikiData.extract !== false && this.props.wikiData.extract !== '') {
				var paragraphs = this.props.wikiData.extract.split("\n");
				var extract = paragraphs.map(this.renderExtract);
			}
			else
				extract = [];

			var controls = (gallery.length > 0) ? this.renderControls() : [];

			return (
				React.createElement(ReactCSSTransitionGroup, { id: "itemDetail", transitionName: 'itemDetailTransition', transitionAppear: true, transitionAppearTimeout: 500, transitionEnterTimeout: 500, transitionLeaveTimeout: 500, style: { maxHeight: (typeof window !== 'undefined') ? windowDims.height - 20 : 600 } },
					React.createElement("h3", null, this.props.itemDetail.text),
					React.createElement("div", null,
						extract,
						mainLink
					),
					React.createElement("h4", null, 'Locations'),
					React.createElement("ul", null, itemLocations),
					React.createElement("h4", null, 'Related Links'),
					React.createElement("ul", null, itemLinks),
					React.createElement("div", { id: 'galleryTitle' },
						React.createElement("h4", null, 'Images'),
						controls
					),
					React.createElement("div", { id: 'gallery' }, gallery)
				)
			)
		}
	}
});

module.exports = ItemDetail;
},{"react":190,"react-addons-css-transition-group":27}],7:[function(require,module,exports){
function isset (obj) { return typeof obj !== 'undefined'; }

var React = require('react');

var ItemList = React.createClass({
	displayName: "ItemList",
	jumping: false,

	getInitialState: function () { return { jumpTo: false } },

	componentWillReceiveProps: function (nextProps) {
		if (this.props.highlightLatLong === false && nextProps.highlightLatLong !== false || this.props.highlightLatLong.lat !== nextProps.highlightLatLong.lat)
			this.setState({ jumpTo: false });
	},

	//gist.github.com/dezinezync/5487119
	scrollAnimate: function (Y, duration) {
		var start = Date.now(),
			elem = document.documentElement.scrollTop ? document.documentElement : document.body,
			from = elem.scrollTop;

		if (from === Y)
			return; // Prevent scrolling to the Y point if already there

		function min (a,b) { return a < b ? a : b; }

		function scroll(timestamp) {
			var currentTime = Date.now(),
				t = min(1, ((currentTime - start) / duration)),
				easedT = t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t;

			elem.scrollTop = (easedT * (Y - from)) + from;

			if (t < 1)
				requestAnimationFrame(scroll);
		}

		requestAnimationFrame(scroll)
	},

	renderYear: function (x, y, year) { return React.createElement("li", { key: 'year' + x + y + year, className: 'yearTitle' }, year) },

	renderItemThumbnail: function (item, key) {
		var picKey = 'thumb' + key;

		return (isset(item.thumbnail) && item.thumbnail !== '')
			? React.createElement("img", { key: picKey, className: 'thumbnail', src: item.thumbnail })
			: [];
	},

	renderItem: function (item, i) {
		var key = 0, i, chr, len;

		for (i = 0, len = item.text.length; i < len; i++) {
			chr	 = item.text.charCodeAt(i);
			key	= ((key << 5) - key) + chr;
			key |= 0; // Convert to 32bit integer
		}

		var itemThumbnail = this.renderItemThumbnail(item, key);
		var className = 'itemPanel';

		var testPropLatLongSet = isset(this.props.highlightLatLong) && isset(this.props.highlightLatLong.lat) && isset(this.props.highlightLatLong.long);
		var testItemLatLongSet = isset(item.latlong) && isset(item.latlong[0]) && isset(item.latlong[0][0]);

		if (testPropLatLongSet && testItemLatLongSet) {
			var latFixed = item.latlong[0][0].toFixed(1);
			var longFixed = item.latlong[0][1].toFixed(1);

			if (latFixed === this.props.highlightLatLong.lat && longFixed === this.props.highlightLatLong.long) {
				className += ' highlightMap';

				if (this.state.jumpTo === false && this.jumping === false) {
					this.jumping = true;
					this.scrollAnimate($(key).offsetTop, 1000);
				}
			}
		}

		if (parseInt(this.state.jumpTo) === parseInt(key))
			className += ' highlightClick';


		var title = (isset(item.links) && isset(item.links.main) && isset(item.links.main.link)) ? item.links.main.link.replace('//en.wikipedia.org/wiki/', '') : '';

		return (
			React.createElement("li", { key: key, id: key, 'data-year': item.year, 'data-position': item.position, className: className, onClick: this.itemHandler },
				itemThumbnail,
				React.createElement("p", null,
					React.createElement("a", { href: '/history-of-humanity/' + item.year + '/' + item.position + '/' + title }, item.text)
				),
				React.createElement("div", { className: 'readmore' },
					React.createElement("span", { 'data-year': item.year, 'data-position': item.position }, 'Read more...')
				)
			)
		)
	},

	itemHandler: function (e) {
		if (isset(e.target.id) && e.target.id !== '')
			var newJumpTo = e.target.id;
		else if (isset(e.target.parentNode.id) && e.target.parentNode.id !== '')
			var newJumpTo = e.target.parentNode.id;
		else if (isset(e.target.parentNode.parentNode.id) && e.target.parentNode.parentNode.id !== '')
			var newJumpTo = e.target.parentNode.parentNode.id;

		if (this.state.jumpTo === false || parseInt(this.state.jumpTo) !== parseInt(newJumpTo)) {
			this.scrollAnimate($(newJumpTo).offsetTop, 1000);
			this.setState({ jumpTo: newJumpTo });
		}

		this.props.itemHandler(e);
	},

	renderItems: function (item) {
		var relevantItems = [];

		if (this.props.items.length > 0)
		{
			var x = this.props.pointer * this.props.show;
			var y = this.props.pointer * this.props.show + this.props.show;
			var year = this.props.items[x].year;

			relevantItems.push(this.renderYear(x, y, this.props.items[x].year));

			for (var i = x; i < y; i++) {
				if (isset(this.props.items[i])) {
					if (this.props.items[i].year !== year) {
						relevantItems.push(this.renderYear(i, y, this.props.items[i].year));
						year = this.props.items[i].year;
					}

					relevantItems.push(this.renderItem(this.props.items[i], i));
				}
			}
		}
		this.jumping = false;

		return relevantItems;
	},

	loadingItems: function () {
		return React.createElement("li", { className: 'yearTitle' }, 'Loading data')
	},

	noItems: function () {
		return React.createElement("li", { className: 'yearTitle' }, 'No data for your selection')
	},

	render: function () {
		if (this.props.items === false)
			var itemsList = this.loadingItems()
		else if (this.props.items.length > 0)
			var itemsList = this.renderItems();
		else
			var itemsList = this.noItems();

		return (
			React.createElement("div", { id: "items" },
				React.createElement("ul", null,
					itemsList
				)
			)
		)
	}
});

module.exports = ItemList;
},{"react":190}],8:[function(require,module,exports){
function isset (obj) { return typeof obj !== 'undefined'; }

var React = require('react');

Pagination = React.createClass({
	displayName: "Pagination",

	clickHandler: function (e) {
		e.preventDefault();

		if (isset(e.target.dataset.pointer))
			this.props.clickHandler(parseInt(e.target.dataset.pointer));
		else
			this.props.clickHandler(parseInt(e.target.parentNode.dataset.pointer));
	},

	updateArr: function () {
		var arr = [];

		if (this.props.maxBlocks - this.props.nPages < 2) {
			maxPivotPages = Math.round((this.props.maxBlocks - 5) / 2);
			minPage = Math.max(0, this.props.pointer - maxPivotPages);
			maxPage = Math.min(this.props.nPages - 1, this.props.pointer + maxPivotPages * 2 - (this.props.pointer - minPage));
			minPage = Math.max(0, minPage - (maxPivotPages * 2 - (maxPage - minPage)));

			var elipses = true;
		}
		else {
			minPage = 0;
			maxPage = this.props.nPages - 1;

			var elipses = false;
		}

		if (elipses && minPage !== 0) {
			arr[0] = 'prev';
			arr[1] = 'hellip1';
		}

		for (var i = minPage; i <= maxPage; i++) {
			arr.push(i);
		}

		if (elipses && this.props.nPages !== maxPage + 1) {
			arr.push('hellip2');
			arr.push('next');
		}

		return arr;
	},

	renderPaginationItems: function (i) {
		var selectedClass = (this.props.pointer === i) ? "selected clickable" : "clickable";

		if (i === 'prev') {
			return (
				React.createElement("li", { key: i, className: selectedClass, 'data-pointer': 0, onClick: this.clickHandler },
					React.createElement("a", { href: '/history-of-humanity/' }, '1')
				)
			)
		}
		else if (i === 'next') {
			return (
				React.createElement("li", { key: i, className: selectedClass, 'data-pointer': this.props.nPages - 1, onClick: this.clickHandler },
					React.createElement("a", { href: '/history-of-humanity/p/' + this.props.nPages }, this.props.nPages)
				)
			)
		}
		else if (i === 'hellip1' || i === 'hellip2')
			return React.createElement("li", { key: i, className: "more" }, "...")
		else {
			var n =  i + 1;
			return React.createElement("li", { key: i, className: selectedClass, 'data-pointer': i, onClick: this.clickHandler },
				React.createElement("a", { href: '/history-of-humanity/p/' + n }, n)
			);
		}
	},

	renderNoPagination: function () { return  React.createElement("li", { className: 'no_more' }, "No other pages") },

	render: function () {
		var className = 'paginator on';

		if (this.props.nPages > 1) {
			var arr = this.updateArr();
			var pagination = arr.map(this.renderPaginationItems)
		}
		else if (this.props.nPages = 0)
			var pagination = this.renderNoPagination();
		else {
			var pagination = [];
			className = 'paginator';
		}

		return React.createElement("ul", { className: className }, pagination)
	}
});

module.exports = Pagination;
},{"react":190}],9:[function(require,module,exports){
function isset (obj) { return typeof obj !== 'undefined'; }

var React = require('react'),
	ReactCSSTransitionGroup = require('react-addons-css-transition-group'),
	axios = require('axios');

var Social = React.createClass({
	displayName: 'Social',
	socialSites: {
		"facebook": {
			"url": 'http://www.facebook.com/sharer/sharer.php?u={encUrl}&t={encTitle}',
			"spec": 'toolbar=0, status=0, width=900, height=500',
		},
		"twitter": {
			"url": 'https://twitter.com/intent/tweet?text={encTitle}&url={encUrl}',
			"spec": 'toolbar=0, status=0, width=650, height=360',
		},
		"googleplus": {
			"url": 'https://plus.google.com/share?url={shareUrl}',
			"spec": 'toolbar=0, status=0, width=900, height=500',
		},
		"linkedin": {
			"url": 'https://www.linkedin.com/cws/share?url={shareUrl}&token=&isFramed=true',
			"spec": 'toolbar=no, width=550, height=550',
		},
		"stumbleupon": {
			"url": 'http://www.stumbleupon.com/submit?url={shareUrl}&title={shareTitle}',
			"spec": 'toolbar=no, width=700, height=300'
		}
	},

	getDefaultProps: function () {
		return {
			domain: '',
			img: '',
			share: { // the networks available
				Facebook: true,
				Twitter: true,
				GooglePlusOne: true,
				LinkedIn: true,
				StumbleUpon: true,
				Pinterest: true,
				BufferApp: true
			},
			counts: {}, // the data
			atName: false
		}
	},

	getInitialState: function () {
		return {
			active: false,
			topPosition: 0
		}
	},

	componentDidMount: function() {
		var self = this;
		var reqUrl = 'https://zorg.builtvisible.com/tools/scrs/json';
		var api_key = '65b608cf38b638ea71cf4c9baad182ae';

		axios.get(reqUrl + '?api_key=' + api_key + '&url=' + window.location.href)
		.then(function (res) {
			self.updateCounts(res.data);
		});

		this.updateDimensions();

		window.addEventListener("resize", this.updateDimensions);
	},

	componentWillUnmount: function() {
		window.removeEventListener("resize", this.updateDimensions);
	},

	shouldComponentUpdate: function (newProps, newState) {
		return newState.topPosition !== this.state.topPosition || newState.active !== this.state.active;
	},

	updateDimensions: function () {
		if (typeof window !== 'undefined') {
			var dims = getViewportSize();

			var topPosition = 600;

			if (topPosition > dims.height)
				topPosition = dims.height;

			topPosition -= 15;

			this.setState({ topPosition: topPosition });
		}
	},

	updateCounts: function (data) {
		this.setState({ counts: data });
	},

	formatShareValue: function (value) {
		value = parseInt(value);

		if (value > 1000000)
			formatted = (Math.ceil(value / 10000) / 100) + 'm';
		else if (value > 1000)
			formatted = (Math.ceil(value / 100) / 10) + 'k';
		else
			formatted = value;

		return formatted;
	},

	toggleButtons: function () {
		this.setState({ active: !this.state.active })
	},

	openWin: function (e) {
		var site = (isset(e.target.dataset.site)) ? e.target.dataset.site : e.target.parentNode.dataset.site;

		/* Feel free to add to these as you wish */
		var shareUrl = document.location.href;
		var shareTitle = document.title;
		var encUrl = encodeURIComponent(shareUrl);
		var encTitle = encodeURIComponent(shareTitle);

		if (this.props.atName !== false) {
			shareTitle = shareTitle + ' ' + '@' + this.props.atName;
		}

		var newWinUrl = this.socialSites[site]['url'].replace(new RegExp(escapeRegExp("{encUrl}"), 'g'), encUrl);
		newWinUrl = newWinUrl.replace(new RegExp(escapeRegExp("{encTitle}"), 'g'), encTitle);
		newWinUrl = newWinUrl.replace(new RegExp(escapeRegExp("{shareUrl}"), 'g'), shareUrl);
		newWinUrl = newWinUrl.replace(new RegExp(escapeRegExp("{shareTitle}"), 'g'), shareTitle);

		window.open(newWinUrl, "", this.socialSites[site]['spec']);
	},

	renderSocialIcons: function () {
		return (
			React.createElement(ReactCSSTransitionGroup, { key: 'socialIcons', id: 'socialIcons', transitionName: "socialTransition", transitionAppear: true, transitionAppearTimeout: 500, transitionEnterTimeout: 500, transitionLeaveTimeout: 500 },
				React.createElement("div", { id: 'facebook', className: 'socialBox' },
					React.createElement("span", { className: 'count' }, this.formatShareValue(this.state.counts.Facebook.total_count)),
					React.createElement("span", { className: 'share', 'data-site': 'facebook', onClick: this.openWin },
						React.createElement("i", { className: 'fa fa-facebook' })
					)
				),
				React.createElement("div", { id: 'twitter', className: 'socialBox' },
					React.createElement("span", { className: 'count' }, this.formatShareValue(this.state.counts.Twitter)),
					React.createElement("span", { className: 'share', 'data-site': 'twitter', onClick: this.openWin },
						React.createElement("i", { className: 'fa fa-twitter' })
					)
				),
				React.createElement("div", { id: 'googleplus', className: 'socialBox' },
					React.createElement("span", { className: 'count' }, this.formatShareValue(this.state.counts.GooglePlusOne)),
					React.createElement("span", { className: 'share', 'data-site': 'googleplus', onClick: this.openWin },
						React.createElement("i", { className: 'fa fa-google' })
					)
				),
				React.createElement("div", { id: 'linkedin', className: 'socialBox' },
					React.createElement("span", { className: 'count' }, this.formatShareValue(this.state.counts.LinkedIn)),
					React.createElement("span", { className: 'share', 'data-site': 'linkedin', onClick: this.openWin },
						React.createElement("i", { className: 'fa fa-linkedin' })
					)
				),
				React.createElement("div", { id: 'stumbleupon', className: 'socialBox' },
					React.createElement("span", { className: 'count' }, this.formatShareValue(this.state.counts.StumbleUpon)),
					React.createElement("span", { className: 'share', 'data-site': 'stumbleupon', onClick: this.openWin },
						React.createElement("i", { className: 'fa fa-stumbleupon' })
					)
				)
			)
		)
	},

	render: function () {
		var className = (this.state.active) ? 'active' : '';
		var socialIcons = (this.state.active) ? this.renderSocialIcons() : [];

		return (
			React.createElement("div", { className: className, id: 'socialButtons', style: { top: this.state.topPosition + 'px' } },
				React.createElement("span", { id: 'circleBg' },
					React.createElement("i", { className: 'fa fa-share-alt-square', onClick: this.toggleButtons })
				),
				socialIcons
			)
		)
	}
});

module.exports = Social;
},{"axios":11,"react":190,"react-addons-css-transition-group":27}],10:[function(require,module,exports){
var React = require('react'),
	ReactDOM = require('react-dom'),
	axios = require('axios'),
	timelineJsonData = require('./data/timeline.json'),
	HoH = require('./js/dispatcher.js');

window.app = (function() {
	var requiredFeatures = {
		"JSON decoding": window.JSON,
		"the selectors API": document.querySelector,
		"DOM level 2 events": window.addEventListener,
		"the HTML5 history API": window.history.pushState
	};

	for (var i = requiredFeatures.length - 1; i >= 0; i--) {
		if (!requiredFeatures[i])
			return alert("Sorry, but your browser does not support " + feature + " so this app won't work properly.");
	};

	if (String(window.location.pathname).match(/\/history-of-humanity\/\d+\/\d+\/.+/i) !== null) {
		var parts = window.location.pathname.replace('/history-of-humanity/', '').split('/');
		var params = { pointer: 0, year: parts[0], position: parts[1], name: parts[2] };

    var initData = {
      itemDetail: timelineJsonData[params.year][params.position],
      wikiData: false,
      wikiImages: []
    };

		var wikiApiLink = 'https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts|images&exintro=&explaintext=&titles=' + params.name;

		axios.get('https://apis.builtvisible.com/history_of_humanity/?url=' + encodeURIComponent(wikiApiLink.replace(/&amp;/g, "&"))).then(function (output) {
			if (isset(output.data.query.pages)) {
				var pageId = Object.keys(output.data.query.pages);
				initData.wikiData = output.data.query.pages[pageId];

				// React.renderToString takes your component and generates rendered markup. SEO friendliness all the way
				return ReactDOM.render(React.createElement(HoH, { timeline: timelineJsonData, initparams: params, initwikidata: initData }), document.getElementById('hoh'));
			}
		})
		.catch(function (e) {
			console.log('error in xhr');
			console.log(e);
		});
	}
	else if (String(window.location.pathname).match(/\/history-of-humanity\/p\/\d+/i) !== null) {
		var parts = window.location.pathname.replace('/history-of-humanity/', '').split('/');

		if (parseInt(parts[1]) > 0)
			return ReactDOM.render(React.createElement(HoH, { timeline: timelineJsonData, initparams: { pointer: parseInt(parts[1]) - 1, year: false, position: false, name: false } }), document.getElementById('hoh'));
		else
			window.location.replace("https://labs.builtvisible.com/history-of-humanity/");
	}
	else {
		return ReactDOM.render(React.createElement(HoH, { timeline: timelineJsonData, initparams: { pointer: 0, year: false, position: false, name: false } }), document.getElementById('hoh'));
	}

})();
},{"./data/timeline.json":1,"./js/dispatcher.js":2,"axios":11,"react":190,"react-dom":28}],11:[function(require,module,exports){
module.exports = require('./lib/axios');
},{"./lib/axios":13}],12:[function(require,module,exports){
'use strict';

/*global ActiveXObject:true*/

var defaults = require('./../defaults');
var utils = require('./../utils');
var buildUrl = require('./../helpers/buildUrl');
var cookies = require('./../helpers/cookies');
var parseHeaders = require('./../helpers/parseHeaders');
var transformData = require('./../helpers/transformData');
var urlIsSameOrigin = require('./../helpers/urlIsSameOrigin');

module.exports = function xhrAdapter(resolve, reject, config) {
  // Transform request data
  var data = transformData(
    config.data,
    config.headers,
    config.transformRequest
  );

  // Merge headers
  var requestHeaders = utils.merge(
    defaults.headers.common,
    defaults.headers[config.method] || {},
    config.headers || {}
  );

  if (utils.isFormData(data)) {
    delete requestHeaders['Content-Type']; // Let the browser set it
  }

  // Create the request
  var request = new (XMLHttpRequest || ActiveXObject)('Microsoft.XMLHTTP');
  request.open(config.method.toUpperCase(), buildUrl(config.url, config.params), true);

  // Listen for ready state
  request.onreadystatechange = function () {
    if (request && request.readyState === 4) {
      // Prepare the response
      var responseHeaders = parseHeaders(request.getAllResponseHeaders());
      var responseData = ['text', ''].indexOf(config.responseType || '') !== -1 ? request.responseText : request.response;
      var response = {
        data: transformData(
          responseData,
          responseHeaders,
          config.transformResponse
        ),
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config
      };

      // Resolve or reject the Promise based on the status
      (request.status >= 200 && request.status < 300 ?
        resolve :
        reject)(response);

      // Clean up request
      request = null;
    }
  };

  // Add xsrf header
  var xsrfValue = urlIsSameOrigin(config.url) ?
      cookies.read(config.xsrfCookieName || defaults.xsrfCookieName) :
      undefined;
  if (xsrfValue) {
    requestHeaders[config.xsrfHeaderName || defaults.xsrfHeaderName] = xsrfValue;
  }

  // Add headers to the request
  utils.forEach(requestHeaders, function (val, key) {
    // Remove Content-Type if data is undefined
    if (!data && key.toLowerCase() === 'content-type') {
      delete requestHeaders[key];
    }
    // Otherwise add header to the request
    else {
      request.setRequestHeader(key, val);
    }
  });

  // Add withCredentials to request if needed
  if (config.withCredentials) {
    request.withCredentials = true;
  }

  // Add responseType to request if needed
  if (config.responseType) {
    try {
      request.responseType = config.responseType;
    } catch (e) {
      if (request.responseType !== 'json') {
        throw e;
      }
    }
  }

  if (utils.isArrayBuffer(data)) {
    data = new DataView(data);
  }

  // Send the request
  request.send(data);
};

},{"./../defaults":16,"./../helpers/buildUrl":17,"./../helpers/cookies":18,"./../helpers/parseHeaders":20,"./../helpers/transformData":22,"./../helpers/urlIsSameOrigin":23,"./../utils":24}],13:[function(require,module,exports){
'use strict';

var defaults = require('./defaults');
var utils = require('./utils');
var deprecatedMethod = require('./helpers/deprecatedMethod');
var dispatchRequest = require('./core/dispatchRequest');
var InterceptorManager = require('./core/InterceptorManager');

// Polyfill ES6 Promise if needed
(function () {
  // webpack is being used to set es6-promise to the native Promise
  // for the standalone build. It's necessary to make sure polyfill exists.
  var P = require('es6-promise');
  if (P && typeof P.polyfill === 'function') {
    P.polyfill();
  }
})();

var axios = module.exports = function axios(config) {
  config = utils.merge({
    method: 'get',
    headers: {},
    transformRequest: defaults.transformRequest,
    transformResponse: defaults.transformResponse
  }, config);

  // Don't allow overriding defaults.withCredentials
  config.withCredentials = config.withCredentials || defaults.withCredentials;

  // Hook up interceptors middleware
  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);

  axios.interceptors.request.forEach(function (interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  axios.interceptors.response.forEach(function (interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  // Provide alias for success
  promise.success = function success(fn) {
    deprecatedMethod('success', 'then', 'https://github.com/mzabriskie/axios/blob/master/README.md#response-api');

    promise.then(function(response) {
      fn(response.data, response.status, response.headers, response.config);
    });
    return promise;
  };

  // Provide alias for error
  promise.error = function error(fn) {
    deprecatedMethod('error', 'catch', 'https://github.com/mzabriskie/axios/blob/master/README.md#response-api');

    promise.then(null, function(response) {
      fn(response.data, response.status, response.headers, response.config);
    });
    return promise;
  };

  return promise;
};

// Expose defaults
axios.defaults = defaults;

// Expose all/spread
axios.all = function (promises) {
  return Promise.all(promises);
};
axios.spread = require('./helpers/spread');

// Expose interceptors
axios.interceptors = {
  request: new InterceptorManager(),
  response: new InterceptorManager()
};

// Provide aliases for supported request methods
(function () {
  function createShortMethods() {
    utils.forEach(arguments, function (method) {
      axios[method] = function (url, config) {
        return axios(utils.merge(config || {}, {
          method: method,
          url: url
        }));
      };
    });
  }

  function createShortMethodsWithData() {
    utils.forEach(arguments, function (method) {
      axios[method] = function (url, data, config) {
        return axios(utils.merge(config || {}, {
          method: method,
          url: url,
          data: data
        }));
      };
    });
  }

  createShortMethods('delete', 'get', 'head');
  createShortMethodsWithData('post', 'put', 'patch');
})();

},{"./core/InterceptorManager":14,"./core/dispatchRequest":15,"./defaults":16,"./helpers/deprecatedMethod":19,"./helpers/spread":21,"./utils":24,"es6-promise":25}],14:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function (fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function (id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `remove`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function (fn) {
  utils.forEach(this.handlers, function (h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;

},{"./../utils":24}],15:[function(require,module,exports){
(function (process){
'use strict';

/**
 * Dispatch a request to the server using whichever adapter
 * is supported by the current environment.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  return new Promise(function (resolve, reject) {
    try {
      // For browsers use XHR adapter
      if (typeof window !== 'undefined') {
        require('../adapters/xhr')(resolve, reject, config);
      }
      // For node use HTTP adapter
      else if (typeof process !== 'undefined') {
        require('../adapters/http')(resolve, reject, config);
      }
    } catch (e) {
      reject(e);
    }
  });
};


}).call(this,require('_process'))

},{"../adapters/http":12,"../adapters/xhr":12,"_process":26}],16:[function(require,module,exports){
'use strict';

var utils = require('./utils');

var PROTECTION_PREFIX = /^\)\]\}',?\n/;
var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

module.exports = {
  transformRequest: [function (data, headers) {
    if(utils.isFormData(data)) {
      return data;
    }
    if (utils.isArrayBuffer(data)) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isObject(data) && !utils.isFile(data) && !utils.isBlob(data)) {
      // Set application/json if no Content-Type has been specified
      if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
        headers['Content-Type'] = 'application/json;charset=utf-8';
      }
      return JSON.stringify(data);
    }
    return data;
  }],

  transformResponse: [function (data) {
    if (typeof data === 'string') {
      data = data.replace(PROTECTION_PREFIX, '');
      try {
        data = JSON.parse(data);
      } catch (e) {}
    }
    return data;
  }],

  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*'
    },
    patch: utils.merge(DEFAULT_CONTENT_TYPE),
    post: utils.merge(DEFAULT_CONTENT_TYPE),
    put: utils.merge(DEFAULT_CONTENT_TYPE)
  },

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN'
};

},{"./utils":24}],17:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

function encode(val) {
  return encodeURIComponent(val).
    replace(/%40/gi, '@').
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildUrl(url, params) {
  if (!params) {
    return url;
  }

  var parts = [];

  utils.forEach(params, function (val, key) {
    if (val === null || typeof val === 'undefined') {
      return;
    }
    if (!utils.isArray(val)) {
      val = [val];
    }

    utils.forEach(val, function (v) {
      if (utils.isDate(v)) {
        v = v.toISOString();
      }
      else if (utils.isObject(v)) {
        v = JSON.stringify(v);
      }
      parts.push(encode(key) + '=' + encode(v));
    });
  });

  if (parts.length > 0) {
    url += (url.indexOf('?') === -1 ? '?' : '&') + parts.join('&');
  }

  return url;
};

},{"./../utils":24}],18:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

module.exports = {
  write: function write(name, value, expires, path, domain, secure) {
    var cookie = [];
    cookie.push(name + '=' + encodeURIComponent(value));

    if (utils.isNumber(expires)) {
      cookie.push('expires=' + new Date(expires).toGMTString());
    }

    if (utils.isString(path)) {
      cookie.push('path=' + path);
    }

    if (utils.isString(domain)) {
      cookie.push('domain=' + domain);
    }

    if (secure === true) {
      cookie.push('secure');
    }

    document.cookie = cookie.join('; ');
  },

  read: function read(name) {
    var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
    return (match ? decodeURIComponent(match[3]) : null);
  },

  remove: function remove(name) {
    this.write(name, '', Date.now() - 86400000);
  }
};

},{"./../utils":24}],19:[function(require,module,exports){
'use strict';

/**
 * Supply a warning to the developer that a method they are using
 * has been deprecated.
 *
 * @param {string} method The name of the deprecated method
 * @param {string} [instead] The alternate method to use if applicable
 * @param {string} [docs] The documentation URL to get further details
 */
module.exports = function deprecatedMethod(method, instead, docs) {
  try {
    console.warn(
      'DEPRECATED method `' + method + '`.' +
      (instead ? ' Use `' + instead + '` instead.' : '') +
      ' This method will be removed in a future release.');

    if (docs) {
      console.warn('For more information about usage see ' + docs);
    }
  } catch (e) {}
};

},{}],20:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {}, key, val, i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
    }
  });

  return parsed;
};

},{"./../utils":24}],21:[function(require,module,exports){
'use strict';

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function (arr) {
    callback.apply(null, arr);
  };
};

},{}],22:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  utils.forEach(fns, function (fn) {
    data = fn(data, headers);
  });

  return data;
};

},{"./../utils":24}],23:[function(require,module,exports){
'use strict';

var utils = require('./../utils');
var msie = /(msie|trident)/i.test(navigator.userAgent);
var urlParsingNode = document.createElement('a');
var originUrl;

/**
 * Parse a URL to discover it's components
 *
 * @param {String} url The URL to be parsed
 * @returns {Object}
 */
function urlResolve(url) {
  var href = url;

  if (msie) {
    // IE needs attribute set twice to normalize properties
    urlParsingNode.setAttribute('href', href);
    href = urlParsingNode.href;
  }

  urlParsingNode.setAttribute('href', href);

  // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
  return {
    href: urlParsingNode.href,
    protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
    host: urlParsingNode.host,
    search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
    hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
    hostname: urlParsingNode.hostname,
    port: urlParsingNode.port,
    pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
              urlParsingNode.pathname :
              '/' + urlParsingNode.pathname
  };
}

originUrl = urlResolve(window.location.href);

/**
 * Determine if a URL shares the same origin as the current location
 *
 * @param {String} requestUrl The URL to test
 * @returns {boolean} True if URL shares the same origin, otherwise false
 */
module.exports = function urlIsSameOrigin(requestUrl) {
  var parsed = (utils.isString(requestUrl)) ? urlResolve(requestUrl) : requestUrl;
  return (parsed.protocol === originUrl.protocol &&
        parsed.host === originUrl.host);
};

},{"./../utils":24}],24:[function(require,module,exports){
'use strict';

/*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return toString.call(val) === '[object FormData]';
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    return ArrayBuffer.isView(val);
  } else {
    return (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array or arguments callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Check if obj is array-like
  var isArrayLike = isArray(obj) || (typeof obj === 'object' && !isNaN(obj.length));

  // Force an array if not already something iterable
  if (typeof obj !== 'object' && !isArrayLike) {
    obj = [obj];
  }

  // Iterate over array values
  if (isArrayLike) {
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  }
  // Iterate over object keys
  else {
    for (var key in obj) {
      if (obj.hasOwnProperty(key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/*obj1, obj2, obj3, ...*/) {
  var result = {};
  forEach(arguments, function (obj) {
    forEach(obj, function (val, key) {
      result[key] = val;
    });
  });
  return result;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  forEach: forEach,
  merge: merge,
  trim: trim
};

},{}],25:[function(require,module,exports){
(function (process,global){
/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/jakearchibald/es6-promise/master/LICENSE
 * @version   2.3.0
 */

(function() {
    "use strict";
    function lib$es6$promise$utils$$objectOrFunction(x) {
      return typeof x === 'function' || (typeof x === 'object' && x !== null);
    }

    function lib$es6$promise$utils$$isFunction(x) {
      return typeof x === 'function';
    }

    function lib$es6$promise$utils$$isMaybeThenable(x) {
      return typeof x === 'object' && x !== null;
    }

    var lib$es6$promise$utils$$_isArray;
    if (!Array.isArray) {
      lib$es6$promise$utils$$_isArray = function (x) {
        return Object.prototype.toString.call(x) === '[object Array]';
      };
    } else {
      lib$es6$promise$utils$$_isArray = Array.isArray;
    }

    var lib$es6$promise$utils$$isArray = lib$es6$promise$utils$$_isArray;
    var lib$es6$promise$asap$$len = 0;
    var lib$es6$promise$asap$$toString = {}.toString;
    var lib$es6$promise$asap$$vertxNext;
    var lib$es6$promise$asap$$customSchedulerFn;

    var lib$es6$promise$asap$$asap = function asap(callback, arg) {
      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len] = callback;
      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len + 1] = arg;
      lib$es6$promise$asap$$len += 2;
      if (lib$es6$promise$asap$$len === 2) {
        // If len is 2, that means that we need to schedule an async flush.
        // If additional callbacks are queued before the queue is flushed, they
        // will be processed by this flush that we are scheduling.
        if (lib$es6$promise$asap$$customSchedulerFn) {
          lib$es6$promise$asap$$customSchedulerFn(lib$es6$promise$asap$$flush);
        } else {
          lib$es6$promise$asap$$scheduleFlush();
        }
      }
    }

    function lib$es6$promise$asap$$setScheduler(scheduleFn) {
      lib$es6$promise$asap$$customSchedulerFn = scheduleFn;
    }

    function lib$es6$promise$asap$$setAsap(asapFn) {
      lib$es6$promise$asap$$asap = asapFn;
    }

    var lib$es6$promise$asap$$browserWindow = (typeof window !== 'undefined') ? window : undefined;
    var lib$es6$promise$asap$$browserGlobal = lib$es6$promise$asap$$browserWindow || {};
    var lib$es6$promise$asap$$BrowserMutationObserver = lib$es6$promise$asap$$browserGlobal.MutationObserver || lib$es6$promise$asap$$browserGlobal.WebKitMutationObserver;
    var lib$es6$promise$asap$$isNode = typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';

    // test for web worker but not in IE10
    var lib$es6$promise$asap$$isWorker = typeof Uint8ClampedArray !== 'undefined' &&
      typeof importScripts !== 'undefined' &&
      typeof MessageChannel !== 'undefined';

    // node
    function lib$es6$promise$asap$$useNextTick() {
      var nextTick = process.nextTick;
      // node version 0.10.x displays a deprecation warning when nextTick is used recursively
      // setImmediate should be used instead instead
      var version = process.versions.node.match(/^(?:(\d+)\.)?(?:(\d+)\.)?(\*|\d+)$/);
      if (Array.isArray(version) && version[1] === '0' && version[2] === '10') {
        nextTick = setImmediate;
      }
      return function() {
        nextTick(lib$es6$promise$asap$$flush);
      };
    }

    // vertx
    function lib$es6$promise$asap$$useVertxTimer() {
      return function() {
        lib$es6$promise$asap$$vertxNext(lib$es6$promise$asap$$flush);
      };
    }

    function lib$es6$promise$asap$$useMutationObserver() {
      var iterations = 0;
      var observer = new lib$es6$promise$asap$$BrowserMutationObserver(lib$es6$promise$asap$$flush);
      var node = document.createTextNode('');
      observer.observe(node, { characterData: true });

      return function() {
        node.data = (iterations = ++iterations % 2);
      };
    }

    // web worker
    function lib$es6$promise$asap$$useMessageChannel() {
      var channel = new MessageChannel();
      channel.port1.onmessage = lib$es6$promise$asap$$flush;
      return function () {
        channel.port2.postMessage(0);
      };
    }

    function lib$es6$promise$asap$$useSetTimeout() {
      return function() {
        setTimeout(lib$es6$promise$asap$$flush, 1);
      };
    }

    var lib$es6$promise$asap$$queue = new Array(1000);
    function lib$es6$promise$asap$$flush() {
      for (var i = 0; i < lib$es6$promise$asap$$len; i+=2) {
        var callback = lib$es6$promise$asap$$queue[i];
        var arg = lib$es6$promise$asap$$queue[i+1];

        callback(arg);

        lib$es6$promise$asap$$queue[i] = undefined;
        lib$es6$promise$asap$$queue[i+1] = undefined;
      }

      lib$es6$promise$asap$$len = 0;
    }

    function lib$es6$promise$asap$$attemptVertex() {
      try {
        var r = require;
        var vertx = r('vertx');
        lib$es6$promise$asap$$vertxNext = vertx.runOnLoop || vertx.runOnContext;
        return lib$es6$promise$asap$$useVertxTimer();
      } catch(e) {
        return lib$es6$promise$asap$$useSetTimeout();
      }
    }

    var lib$es6$promise$asap$$scheduleFlush;
    // Decide what async method to use to triggering processing of queued callbacks:
    if (lib$es6$promise$asap$$isNode) {
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useNextTick();
    } else if (lib$es6$promise$asap$$BrowserMutationObserver) {
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMutationObserver();
    } else if (lib$es6$promise$asap$$isWorker) {
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMessageChannel();
    } else if (lib$es6$promise$asap$$browserWindow === undefined && typeof require === 'function') {
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$attemptVertex();
    } else {
      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useSetTimeout();
    }

    function lib$es6$promise$$internal$$noop() {}

    var lib$es6$promise$$internal$$PENDING   = void 0;
    var lib$es6$promise$$internal$$FULFILLED = 1;
    var lib$es6$promise$$internal$$REJECTED  = 2;

    var lib$es6$promise$$internal$$GET_THEN_ERROR = new lib$es6$promise$$internal$$ErrorObject();

    function lib$es6$promise$$internal$$selfFullfillment() {
      return new TypeError("You cannot resolve a promise with itself");
    }

    function lib$es6$promise$$internal$$cannotReturnOwn() {
      return new TypeError('A promises callback cannot return that same promise.');
    }

    function lib$es6$promise$$internal$$getThen(promise) {
      try {
        return promise.then;
      } catch(error) {
        lib$es6$promise$$internal$$GET_THEN_ERROR.error = error;
        return lib$es6$promise$$internal$$GET_THEN_ERROR;
      }
    }

    function lib$es6$promise$$internal$$tryThen(then, value, fulfillmentHandler, rejectionHandler) {
      try {
        then.call(value, fulfillmentHandler, rejectionHandler);
      } catch(e) {
        return e;
      }
    }

    function lib$es6$promise$$internal$$handleForeignThenable(promise, thenable, then) {
       lib$es6$promise$asap$$asap(function(promise) {
        var sealed = false;
        var error = lib$es6$promise$$internal$$tryThen(then, thenable, function(value) {
          if (sealed) { return; }
          sealed = true;
          if (thenable !== value) {
            lib$es6$promise$$internal$$resolve(promise, value);
          } else {
            lib$es6$promise$$internal$$fulfill(promise, value);
          }
        }, function(reason) {
          if (sealed) { return; }
          sealed = true;

          lib$es6$promise$$internal$$reject(promise, reason);
        }, 'Settle: ' + (promise._label || ' unknown promise'));

        if (!sealed && error) {
          sealed = true;
          lib$es6$promise$$internal$$reject(promise, error);
        }
      }, promise);
    }

    function lib$es6$promise$$internal$$handleOwnThenable(promise, thenable) {
      if (thenable._state === lib$es6$promise$$internal$$FULFILLED) {
        lib$es6$promise$$internal$$fulfill(promise, thenable._result);
      } else if (thenable._state === lib$es6$promise$$internal$$REJECTED) {
        lib$es6$promise$$internal$$reject(promise, thenable._result);
      } else {
        lib$es6$promise$$internal$$subscribe(thenable, undefined, function(value) {
          lib$es6$promise$$internal$$resolve(promise, value);
        }, function(reason) {
          lib$es6$promise$$internal$$reject(promise, reason);
        });
      }
    }

    function lib$es6$promise$$internal$$handleMaybeThenable(promise, maybeThenable) {
      if (maybeThenable.constructor === promise.constructor) {
        lib$es6$promise$$internal$$handleOwnThenable(promise, maybeThenable);
      } else {
        var then = lib$es6$promise$$internal$$getThen(maybeThenable);

        if (then === lib$es6$promise$$internal$$GET_THEN_ERROR) {
          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$GET_THEN_ERROR.error);
        } else if (then === undefined) {
          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
        } else if (lib$es6$promise$utils$$isFunction(then)) {
          lib$es6$promise$$internal$$handleForeignThenable(promise, maybeThenable, then);
        } else {
          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
        }
      }
    }

    function lib$es6$promise$$internal$$resolve(promise, value) {
      if (promise === value) {
        lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$selfFullfillment());
      } else if (lib$es6$promise$utils$$objectOrFunction(value)) {
        lib$es6$promise$$internal$$handleMaybeThenable(promise, value);
      } else {
        lib$es6$promise$$internal$$fulfill(promise, value);
      }
    }

    function lib$es6$promise$$internal$$publishRejection(promise) {
      if (promise._onerror) {
        promise._onerror(promise._result);
      }

      lib$es6$promise$$internal$$publish(promise);
    }

    function lib$es6$promise$$internal$$fulfill(promise, value) {
      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }

      promise._result = value;
      promise._state = lib$es6$promise$$internal$$FULFILLED;

      if (promise._subscribers.length !== 0) {
        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, promise);
      }
    }

    function lib$es6$promise$$internal$$reject(promise, reason) {
      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }
      promise._state = lib$es6$promise$$internal$$REJECTED;
      promise._result = reason;

      lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publishRejection, promise);
    }

    function lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection) {
      var subscribers = parent._subscribers;
      var length = subscribers.length;

      parent._onerror = null;

      subscribers[length] = child;
      subscribers[length + lib$es6$promise$$internal$$FULFILLED] = onFulfillment;
      subscribers[length + lib$es6$promise$$internal$$REJECTED]  = onRejection;

      if (length === 0 && parent._state) {
        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, parent);
      }
    }

    function lib$es6$promise$$internal$$publish(promise) {
      var subscribers = promise._subscribers;
      var settled = promise._state;

      if (subscribers.length === 0) { return; }

      var child, callback, detail = promise._result;

      for (var i = 0; i < subscribers.length; i += 3) {
        child = subscribers[i];
        callback = subscribers[i + settled];

        if (child) {
          lib$es6$promise$$internal$$invokeCallback(settled, child, callback, detail);
        } else {
          callback(detail);
        }
      }

      promise._subscribers.length = 0;
    }

    function lib$es6$promise$$internal$$ErrorObject() {
      this.error = null;
    }

    var lib$es6$promise$$internal$$TRY_CATCH_ERROR = new lib$es6$promise$$internal$$ErrorObject();

    function lib$es6$promise$$internal$$tryCatch(callback, detail) {
      try {
        return callback(detail);
      } catch(e) {
        lib$es6$promise$$internal$$TRY_CATCH_ERROR.error = e;
        return lib$es6$promise$$internal$$TRY_CATCH_ERROR;
      }
    }

    function lib$es6$promise$$internal$$invokeCallback(settled, promise, callback, detail) {
      var hasCallback = lib$es6$promise$utils$$isFunction(callback),
          value, error, succeeded, failed;

      if (hasCallback) {
        value = lib$es6$promise$$internal$$tryCatch(callback, detail);

        if (value === lib$es6$promise$$internal$$TRY_CATCH_ERROR) {
          failed = true;
          error = value.error;
          value = null;
        } else {
          succeeded = true;
        }

        if (promise === value) {
          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$cannotReturnOwn());
          return;
        }

      } else {
        value = detail;
        succeeded = true;
      }

      if (promise._state !== lib$es6$promise$$internal$$PENDING) {
        // noop
      } else if (hasCallback && succeeded) {
        lib$es6$promise$$internal$$resolve(promise, value);
      } else if (failed) {
        lib$es6$promise$$internal$$reject(promise, error);
      } else if (settled === lib$es6$promise$$internal$$FULFILLED) {
        lib$es6$promise$$internal$$fulfill(promise, value);
      } else if (settled === lib$es6$promise$$internal$$REJECTED) {
        lib$es6$promise$$internal$$reject(promise, value);
      }
    }

    function lib$es6$promise$$internal$$initializePromise(promise, resolver) {
      try {
        resolver(function resolvePromise(value){
          lib$es6$promise$$internal$$resolve(promise, value);
        }, function rejectPromise(reason) {
          lib$es6$promise$$internal$$reject(promise, reason);
        });
      } catch(e) {
        lib$es6$promise$$internal$$reject(promise, e);
      }
    }

    function lib$es6$promise$enumerator$$Enumerator(Constructor, input) {
      var enumerator = this;

      enumerator._instanceConstructor = Constructor;
      enumerator.promise = new Constructor(lib$es6$promise$$internal$$noop);

      if (enumerator._validateInput(input)) {
        enumerator._input     = input;
        enumerator.length     = input.length;
        enumerator._remaining = input.length;

        enumerator._init();

        if (enumerator.length === 0) {
          lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);
        } else {
          enumerator.length = enumerator.length || 0;
          enumerator._enumerate();
          if (enumerator._remaining === 0) {
            lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);
          }
        }
      } else {
        lib$es6$promise$$internal$$reject(enumerator.promise, enumerator._validationError());
      }
    }

    lib$es6$promise$enumerator$$Enumerator.prototype._validateInput = function(input) {
      return lib$es6$promise$utils$$isArray(input);
    };

    lib$es6$promise$enumerator$$Enumerator.prototype._validationError = function() {
      return new Error('Array Methods must be provided an Array');
    };

    lib$es6$promise$enumerator$$Enumerator.prototype._init = function() {
      this._result = new Array(this.length);
    };

    var lib$es6$promise$enumerator$$default = lib$es6$promise$enumerator$$Enumerator;

    lib$es6$promise$enumerator$$Enumerator.prototype._enumerate = function() {
      var enumerator = this;

      var length  = enumerator.length;
      var promise = enumerator.promise;
      var input   = enumerator._input;

      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {
        enumerator._eachEntry(input[i], i);
      }
    };

    lib$es6$promise$enumerator$$Enumerator.prototype._eachEntry = function(entry, i) {
      var enumerator = this;
      var c = enumerator._instanceConstructor;

      if (lib$es6$promise$utils$$isMaybeThenable(entry)) {
        if (entry.constructor === c && entry._state !== lib$es6$promise$$internal$$PENDING) {
          entry._onerror = null;
          enumerator._settledAt(entry._state, i, entry._result);
        } else {
          enumerator._willSettleAt(c.resolve(entry), i);
        }
      } else {
        enumerator._remaining--;
        enumerator._result[i] = entry;
      }
    };

    lib$es6$promise$enumerator$$Enumerator.prototype._settledAt = function(state, i, value) {
      var enumerator = this;
      var promise = enumerator.promise;

      if (promise._state === lib$es6$promise$$internal$$PENDING) {
        enumerator._remaining--;

        if (state === lib$es6$promise$$internal$$REJECTED) {
          lib$es6$promise$$internal$$reject(promise, value);
        } else {
          enumerator._result[i] = value;
        }
      }

      if (enumerator._remaining === 0) {
        lib$es6$promise$$internal$$fulfill(promise, enumerator._result);
      }
    };

    lib$es6$promise$enumerator$$Enumerator.prototype._willSettleAt = function(promise, i) {
      var enumerator = this;

      lib$es6$promise$$internal$$subscribe(promise, undefined, function(value) {
        enumerator._settledAt(lib$es6$promise$$internal$$FULFILLED, i, value);
      }, function(reason) {
        enumerator._settledAt(lib$es6$promise$$internal$$REJECTED, i, reason);
      });
    };
    function lib$es6$promise$promise$all$$all(entries) {
      return new lib$es6$promise$enumerator$$default(this, entries).promise;
    }
    var lib$es6$promise$promise$all$$default = lib$es6$promise$promise$all$$all;
    function lib$es6$promise$promise$race$$race(entries) {
      /*jshint validthis:true */
      var Constructor = this;

      var promise = new Constructor(lib$es6$promise$$internal$$noop);

      if (!lib$es6$promise$utils$$isArray(entries)) {
        lib$es6$promise$$internal$$reject(promise, new TypeError('You must pass an array to race.'));
        return promise;
      }

      var length = entries.length;

      function onFulfillment(value) {
        lib$es6$promise$$internal$$resolve(promise, value);
      }

      function onRejection(reason) {
        lib$es6$promise$$internal$$reject(promise, reason);
      }

      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {
        lib$es6$promise$$internal$$subscribe(Constructor.resolve(entries[i]), undefined, onFulfillment, onRejection);
      }

      return promise;
    }
    var lib$es6$promise$promise$race$$default = lib$es6$promise$promise$race$$race;
    function lib$es6$promise$promise$resolve$$resolve(object) {
      /*jshint validthis:true */
      var Constructor = this;

      if (object && typeof object === 'object' && object.constructor === Constructor) {
        return object;
      }

      var promise = new Constructor(lib$es6$promise$$internal$$noop);
      lib$es6$promise$$internal$$resolve(promise, object);
      return promise;
    }
    var lib$es6$promise$promise$resolve$$default = lib$es6$promise$promise$resolve$$resolve;
    function lib$es6$promise$promise$reject$$reject(reason) {
      /*jshint validthis:true */
      var Constructor = this;
      var promise = new Constructor(lib$es6$promise$$internal$$noop);
      lib$es6$promise$$internal$$reject(promise, reason);
      return promise;
    }
    var lib$es6$promise$promise$reject$$default = lib$es6$promise$promise$reject$$reject;

    var lib$es6$promise$promise$$counter = 0;

    function lib$es6$promise$promise$$needsResolver() {
      throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
    }

    function lib$es6$promise$promise$$needsNew() {
      throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
    }

    var lib$es6$promise$promise$$default = lib$es6$promise$promise$$Promise;
    /**
      Promise objects represent the eventual result of an asynchronous operation. The
      primary way of interacting with a promise is through its `then` method, which
      registers callbacks to receive either a promise's eventual value or the reason
      why the promise cannot be fulfilled.

      Terminology
      -----------

      - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
      - `thenable` is an object or function that defines a `then` method.
      - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
      - `exception` is a value that is thrown using the throw statement.
      - `reason` is a value that indicates why a promise was rejected.
      - `settled` the final resting state of a promise, fulfilled or rejected.

      A promise can be in one of three states: pending, fulfilled, or rejected.

      Promises that are fulfilled have a fulfillment value and are in the fulfilled
      state.  Promises that are rejected have a rejection reason and are in the
      rejected state.  A fulfillment value is never a thenable.

      Promises can also be said to *resolve* a value.  If this value is also a
      promise, then the original promise's settled state will match the value's
      settled state.  So a promise that *resolves* a promise that rejects will
      itself reject, and a promise that *resolves* a promise that fulfills will
      itself fulfill.


      Basic Usage:
      ------------

      ```js
      var promise = new Promise(function(resolve, reject) {
        // on success
        resolve(value);

        // on failure
        reject(reason);
      });

      promise.then(function(value) {
        // on fulfillment
      }, function(reason) {
        // on rejection
      });
      ```

      Advanced Usage:
      ---------------

      Promises shine when abstracting away asynchronous interactions such as
      `XMLHttpRequest`s.

      ```js
      function getJSON(url) {
        return new Promise(function(resolve, reject){
          var xhr = new XMLHttpRequest();

          xhr.open('GET', url);
          xhr.onreadystatechange = handler;
          xhr.responseType = 'json';
          xhr.setRequestHeader('Accept', 'application/json');
          xhr.send();

          function handler() {
            if (this.readyState === this.DONE) {
              if (this.status === 200) {
                resolve(this.response);
              } else {
                reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
              }
            }
          };
        });
      }

      getJSON('/posts.json').then(function(json) {
        // on fulfillment
      }, function(reason) {
        // on rejection
      });
      ```

      Unlike callbacks, promises are great composable primitives.

      ```js
      Promise.all([
        getJSON('/posts'),
        getJSON('/comments')
      ]).then(function(values){
        values[0] // => postsJSON
        values[1] // => commentsJSON

        return values;
      });
      ```

      @class Promise
      @param {function} resolver
      Useful for tooling.
      @constructor
    */
    function lib$es6$promise$promise$$Promise(resolver) {
      this._id = lib$es6$promise$promise$$counter++;
      this._state = undefined;
      this._result = undefined;
      this._subscribers = [];

      if (lib$es6$promise$$internal$$noop !== resolver) {
        if (!lib$es6$promise$utils$$isFunction(resolver)) {
          lib$es6$promise$promise$$needsResolver();
        }

        if (!(this instanceof lib$es6$promise$promise$$Promise)) {
          lib$es6$promise$promise$$needsNew();
        }

        lib$es6$promise$$internal$$initializePromise(this, resolver);
      }
    }

    lib$es6$promise$promise$$Promise.all = lib$es6$promise$promise$all$$default;
    lib$es6$promise$promise$$Promise.race = lib$es6$promise$promise$race$$default;
    lib$es6$promise$promise$$Promise.resolve = lib$es6$promise$promise$resolve$$default;
    lib$es6$promise$promise$$Promise.reject = lib$es6$promise$promise$reject$$default;
    lib$es6$promise$promise$$Promise._setScheduler = lib$es6$promise$asap$$setScheduler;
    lib$es6$promise$promise$$Promise._setAsap = lib$es6$promise$asap$$setAsap;
    lib$es6$promise$promise$$Promise._asap = lib$es6$promise$asap$$asap;

    lib$es6$promise$promise$$Promise.prototype = {
      constructor: lib$es6$promise$promise$$Promise,

    /**
      The primary way of interacting with a promise is through its `then` method,
      which registers callbacks to receive either a promise's eventual value or the
      reason why the promise cannot be fulfilled.

      ```js
      findUser().then(function(user){
        // user is available
      }, function(reason){
        // user is unavailable, and you are given the reason why
      });
      ```

      Chaining
      --------

      The return value of `then` is itself a promise.  This second, 'downstream'
      promise is resolved with the return value of the first promise's fulfillment
      or rejection handler, or rejected if the handler throws an exception.

      ```js
      findUser().then(function (user) {
        return user.name;
      }, function (reason) {
        return 'default name';
      }).then(function (userName) {
        // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
        // will be `'default name'`
      });

      findUser().then(function (user) {
        throw new Error('Found user, but still unhappy');
      }, function (reason) {
        throw new Error('`findUser` rejected and we're unhappy');
      }).then(function (value) {
        // never reached
      }, function (reason) {
        // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
        // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
      });
      ```
      If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.

      ```js
      findUser().then(function (user) {
        throw new PedagogicalException('Upstream error');
      }).then(function (value) {
        // never reached
      }).then(function (value) {
        // never reached
      }, function (reason) {
        // The `PedgagocialException` is propagated all the way down to here
      });
      ```

      Assimilation
      ------------

      Sometimes the value you want to propagate to a downstream promise can only be
      retrieved asynchronously. This can be achieved by returning a promise in the
      fulfillment or rejection handler. The downstream promise will then be pending
      until the returned promise is settled. This is called *assimilation*.

      ```js
      findUser().then(function (user) {
        return findCommentsByAuthor(user);
      }).then(function (comments) {
        // The user's comments are now available
      });
      ```

      If the assimliated promise rejects, then the downstream promise will also reject.

      ```js
      findUser().then(function (user) {
        return findCommentsByAuthor(user);
      }).then(function (comments) {
        // If `findCommentsByAuthor` fulfills, we'll have the value here
      }, function (reason) {
        // If `findCommentsByAuthor` rejects, we'll have the reason here
      });
      ```

      Simple Example
      --------------

      Synchronous Example

      ```javascript
      var result;

      try {
        result = findResult();
        // success
      } catch(reason) {
        // failure
      }
      ```

      Errback Example

      ```js
      findResult(function(result, err){
        if (err) {
          // failure
        } else {
          // success
        }
      });
      ```

      Promise Example;

      ```javascript
      findResult().then(function(result){
        // success
      }, function(reason){
        // failure
      });
      ```

      Advanced Example
      --------------

      Synchronous Example

      ```javascript
      var author, books;

      try {
        author = findAuthor();
        books  = findBooksByAuthor(author);
        // success
      } catch(reason) {
        // failure
      }
      ```

      Errback Example

      ```js

      function foundBooks(books) {

      }

      function failure(reason) {

      }

      findAuthor(function(author, err){
        if (err) {
          failure(err);
          // failure
        } else {
          try {
            findBoooksByAuthor(author, function(books, err) {
              if (err) {
                failure(err);
              } else {
                try {
                  foundBooks(books);
                } catch(reason) {
                  failure(reason);
                }
              }
            });
          } catch(error) {
            failure(err);
          }
          // success
        }
      });
      ```

      Promise Example;

      ```javascript
      findAuthor().
        then(findBooksByAuthor).
        then(function(books){
          // found books
      }).catch(function(reason){
        // something went wrong
      });
      ```

      @method then
      @param {Function} onFulfilled
      @param {Function} onRejected
      Useful for tooling.
      @return {Promise}
    */
      then: function(onFulfillment, onRejection) {
        var parent = this;
        var state = parent._state;

        if (state === lib$es6$promise$$internal$$FULFILLED && !onFulfillment || state === lib$es6$promise$$internal$$REJECTED && !onRejection) {
          return this;
        }

        var child = new this.constructor(lib$es6$promise$$internal$$noop);
        var result = parent._result;

        if (state) {
          var callback = arguments[state - 1];
          lib$es6$promise$asap$$asap(function(){
            lib$es6$promise$$internal$$invokeCallback(state, child, callback, result);
          });
        } else {
          lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection);
        }

        return child;
      },

    /**
      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
      as the catch block of a try/catch statement.

      ```js
      function findAuthor(){
        throw new Error('couldn't find that author');
      }

      // synchronous
      try {
        findAuthor();
      } catch(reason) {
        // something went wrong
      }

      // async with promises
      findAuthor().catch(function(reason){
        // something went wrong
      });
      ```

      @method catch
      @param {Function} onRejection
      Useful for tooling.
      @return {Promise}
    */
      'catch': function(onRejection) {
        return this.then(null, onRejection);
      }
    };
    function lib$es6$promise$polyfill$$polyfill() {
      var local;

      if (typeof global !== 'undefined') {
          local = global;
      } else if (typeof self !== 'undefined') {
          local = self;
      } else {
          try {
              local = Function('return this')();
          } catch (e) {
              throw new Error('polyfill failed because global object is unavailable in this environment');
          }
      }

      var P = local.Promise;

      if (P && Object.prototype.toString.call(P.resolve()) === '[object Promise]' && !P.cast) {
        return;
      }

      local.Promise = lib$es6$promise$promise$$default;
    }
    var lib$es6$promise$polyfill$$default = lib$es6$promise$polyfill$$polyfill;

    var lib$es6$promise$umd$$ES6Promise = {
      'Promise': lib$es6$promise$promise$$default,
      'polyfill': lib$es6$promise$polyfill$$default
    };

    /* global define:true module:true window: true */
    if (typeof define === 'function' && define['amd']) {
      define(function() { return lib$es6$promise$umd$$ES6Promise; });
    } else if (typeof module !== 'undefined' && module['exports']) {
      module['exports'] = lib$es6$promise$umd$$ES6Promise;
    } else if (typeof this !== 'undefined') {
      this['ES6Promise'] = lib$es6$promise$umd$$ES6Promise;
    }

    lib$es6$promise$polyfill$$default();
}).call(this);


}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":26}],26:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],27:[function(require,module,exports){
module.exports = require('react/lib/ReactCSSTransitionGroup');
},{"react/lib/ReactCSSTransitionGroup":55}],28:[function(require,module,exports){
'use strict';

module.exports = require('react/lib/ReactDOM');

},{"react/lib/ReactDOM":65}],29:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule AutoFocusUtils
 * @typechecks static-only
 */

'use strict';

var ReactMount = require('./ReactMount');

var findDOMNode = require('./findDOMNode');
var focusNode = require('fbjs/lib/focusNode');

var Mixin = {
  componentDidMount: function () {
    if (this.props.autoFocus) {
      focusNode(findDOMNode(this));
    }
  }
};

var AutoFocusUtils = {
  Mixin: Mixin,

  focusDOMComponent: function () {
    focusNode(ReactMount.getNode(this._rootNodeID));
  }
};

module.exports = AutoFocusUtils;
},{"./ReactMount":95,"./findDOMNode":141,"fbjs/lib/focusNode":172}],30:[function(require,module,exports){
/**
 * Copyright 2013-2015 Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule BeforeInputEventPlugin
 * @typechecks static-only
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPropagators = require('./EventPropagators');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var FallbackCompositionState = require('./FallbackCompositionState');
var SyntheticCompositionEvent = require('./SyntheticCompositionEvent');
var SyntheticInputEvent = require('./SyntheticInputEvent');

var keyOf = require('fbjs/lib/keyOf');

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

var documentMode = null;
if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
}

// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

var topLevelTypes = EventConstants.topLevelTypes;

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onBeforeInput: null }),
      captured: keyOf({ onBeforeInputCapture: null })
    },
    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCompositionEnd: null }),
      captured: keyOf({ onCompositionEndCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCompositionStart: null }),
      captured: keyOf({ onCompositionStartCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCompositionUpdate: null }),
      captured: keyOf({ onCompositionUpdateCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
  }
};

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionStart:
      return eventTypes.compositionStart;
    case topLevelTypes.topCompositionEnd:
      return eventTypes.compositionEnd;
    case topLevelTypes.topCompositionUpdate:
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topKeyUp:
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
    case topLevelTypes.topKeyDown:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;
    case topLevelTypes.topKeyPress:
    case topLevelTypes.topMouseDown:
    case topLevelTypes.topBlur:
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */
function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;
  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }
  return null;
}

// Track the current IME composition fallback object, if any.
var currentComposition = null;

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {DOMEventTarget} topLevelTarget The listening component root node.
 * @param {string} topLevelTargetID ID of `topLevelTarget`.
 * @param {object} nativeEvent Native browser event.
 * @return {?object} A SyntheticCompositionEvent.
 */
function extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!currentComposition) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!currentComposition && eventType === eventTypes.compositionStart) {
      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (currentComposition) {
        fallbackData = currentComposition.getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);
    if (customData !== null) {
      event.data = customData;
    }
  }

  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */
function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case topLevelTypes.topCompositionEnd:
      return getDataFromCustomEvent(nativeEvent);
    case topLevelTypes.topKeyPress:
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;
      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case topLevelTypes.topTextInput:
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data;

      // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to blacklist it.
      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  if (currentComposition) {
    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      var chars = currentComposition.getData();
      FallbackCompositionState.release(currentComposition);
      currentComposition = null;
      return chars;
    }
    return null;
  }

  switch (topLevelType) {
    case topLevelTypes.topPaste:
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;
    case topLevelTypes.topKeyPress:
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
        return String.fromCharCode(nativeEvent.which);
      }
      return null;
    case topLevelTypes.topCompositionEnd:
      return useFallbackCompositionData ? null : nativeEvent.data;
    default:
      return null;
  }
}

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {DOMEventTarget} topLevelTarget The listening component root node.
 * @param {string} topLevelTargetID ID of `topLevelTarget`.
 * @param {object} nativeEvent Native browser event.
 * @return {?object} A SyntheticInputEvent.
 */
function extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  }

  // If no characters are being inserted, no BeforeInput event should
  // be fired.
  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);

  event.data = chars;
  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */
var BeforeInputEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];
  }
};

module.exports = BeforeInputEventPlugin;
},{"./EventConstants":42,"./EventPropagators":46,"./FallbackCompositionState":47,"./SyntheticCompositionEvent":123,"./SyntheticInputEvent":127,"fbjs/lib/ExecutionEnvironment":164,"fbjs/lib/keyOf":182}],31:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSProperty
 */

'use strict';

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  animationIterationCount: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  stopOpacity: true,
  strokeDashoffset: true,
  strokeOpacity: true,
  strokeWidth: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundAttachment: true,
    backgroundColor: true,
    backgroundImage: true,
    backgroundPositionX: true,
    backgroundPositionY: true,
    backgroundRepeat: true
  },
  backgroundPosition: {
    backgroundPositionX: true,
    backgroundPositionY: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  },
  outline: {
    outlineWidth: true,
    outlineStyle: true,
    outlineColor: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;
},{}],32:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSPropertyOperations
 * @typechecks static-only
 */

'use strict';

var CSSProperty = require('./CSSProperty');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactPerf = require('./ReactPerf');

var camelizeStyleName = require('fbjs/lib/camelizeStyleName');
var dangerousStyleValue = require('./dangerousStyleValue');
var hyphenateStyleName = require('fbjs/lib/hyphenateStyleName');
var memoizeStringOnly = require('fbjs/lib/memoizeStringOnly');
var warning = require('fbjs/lib/warning');

var processStyleName = memoizeStringOnly(function (styleName) {
  return hyphenateStyleName(styleName);
});

var hasShorthandPropertyBug = false;
var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  var tempStyle = document.createElement('div').style;
  try {
    // IE8 throws "Invalid argument." if resetting shorthand style properties.
    tempStyle.font = '';
  } catch (e) {
    hasShorthandPropertyBug = true;
  }
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if (process.env.NODE_ENV !== 'production') {
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

  // style values shouldn't contain a semicolon
  var badStyleValueWithSemicolonPattern = /;\s*$/;

  var warnedStyleNames = {};
  var warnedStyleValues = {};

  var warnHyphenatedStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?', name, camelizeStyleName(name)) : undefined;
  };

  var warnBadVendoredStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1)) : undefined;
  };

  var warnStyleValueWithSemicolon = function (name, value) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon. ' + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, '')) : undefined;
  };

  /**
   * @param {string} name
   * @param {*} value
   */
  var warnValidStyle = function (name, value) {
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value);
    }
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @return {?string}
   */
  createMarkupForStyles: function (styles) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var styleValue = styles[styleName];
      if (process.env.NODE_ENV !== 'production') {
        warnValidStyle(styleName, styleValue);
      }
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   */
  setValueForStyles: function (node, styles) {
    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if (process.env.NODE_ENV !== 'production') {
        warnValidStyle(styleName, styles[styleName]);
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
      if (styleName === 'float') {
        styleName = styleFloatAccessor;
      }
      if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }

};

ReactPerf.measureMethods(CSSPropertyOperations, 'CSSPropertyOperations', {
  setValueForStyles: 'setValueForStyles'
});

module.exports = CSSPropertyOperations;
}).call(this,require('_process'))

},{"./CSSProperty":31,"./ReactPerf":101,"./dangerousStyleValue":138,"_process":26,"fbjs/lib/ExecutionEnvironment":164,"fbjs/lib/camelizeStyleName":166,"fbjs/lib/hyphenateStyleName":177,"fbjs/lib/memoizeStringOnly":184,"fbjs/lib/warning":189}],33:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CallbackQueue
 */

'use strict';

var PooledClass = require('./PooledClass');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */
function CallbackQueue() {
  this._callbacks = null;
  this._contexts = null;
}

assign(CallbackQueue.prototype, {

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */
  enqueue: function (callback, context) {
    this._callbacks = this._callbacks || [];
    this._contexts = this._contexts || [];
    this._callbacks.push(callback);
    this._contexts.push(context);
  },

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */
  notifyAll: function () {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    if (callbacks) {
      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : invariant(false) : undefined;
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0; i < callbacks.length; i++) {
        callbacks[i].call(contexts[i]);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  },

  /**
   * Resets the internal queue.
   *
   * @internal
   */
  reset: function () {
    this._callbacks = null;
    this._contexts = null;
  },

  /**
   * `PooledClass` looks for this.
   */
  destructor: function () {
    this.reset();
  }

});

PooledClass.addPoolingTo(CallbackQueue);

module.exports = CallbackQueue;
}).call(this,require('_process'))

},{"./Object.assign":50,"./PooledClass":51,"_process":26,"fbjs/lib/invariant":178}],34:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ChangeEventPlugin
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPluginHub = require('./EventPluginHub');
var EventPropagators = require('./EventPropagators');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactUpdates = require('./ReactUpdates');
var SyntheticEvent = require('./SyntheticEvent');

var getEventTarget = require('./getEventTarget');
var isEventSupported = require('./isEventSupported');
var isTextInputElement = require('./isTextInputElement');
var keyOf = require('fbjs/lib/keyOf');

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onChange: null }),
      captured: keyOf({ onChangeCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]
  }
};

/**
 * For IE shims
 */
var activeElement = null;
var activeElementID = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent, getEventTarget(nativeEvent));
  EventPropagators.accumulateTwoPhaseDispatches(event);

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue(false);
}

function startWatchingForChangeEventIE8(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementID = null;
}

function getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topChange) {
    return topLevelTargetID;
  }
}
function handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForChangeEventIE8();
  }
}

/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events
  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);
}

/**
 * (For old IE.) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
var newValueProp = {
  get: function () {
    return activeElementValueProp.get.call(this);
  },
  set: function (val) {
    // Cast to a string so we can do equality checks.
    activeElementValue = '' + val;
    activeElementValueProp.set.call(this, val);
  }
};

/**
 * (For old IE.) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetID) {
  activeElement = target;
  activeElementID = targetID;
  activeElementValue = target.value;
  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
  // on DOM elements
  Object.defineProperty(activeElement, 'value', newValueProp);
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For old IE.) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  // delete restores the original property definition
  delete activeElement.value;
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementID = null;
  activeElementValue = null;
  activeElementValueProp = null;
}

/**
 * (For old IE.) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  var value = nativeEvent.srcElement.value;
  if (value === activeElementValue) {
    return;
  }
  activeElementValue = value;

  manualDispatchChangeEvent(nativeEvent);
}

/**
 * If a `change` event should be fired, returns the target's ID.
 */
function getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topInput) {
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
    // what we want so fall through here and trigger an abstract event
    return topLevelTargetID;
  }
}

// For IE8 and IE9.
function handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topFocus) {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
  } else if (topLevelType === topLevelTypes.topBlur) {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    if (activeElement && activeElement.value !== activeElementValue) {
      activeElementValue = activeElement.value;
      return activeElementID;
    }
  }
}

/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {
  if (topLevelType === topLevelTypes.topClick) {
    return topLevelTargetID;
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {

    var getTargetIDFunc, handleEventFunc;
    if (shouldUseChangeEvent(topLevelTarget)) {
      if (doesChangeEventBubble) {
        getTargetIDFunc = getTargetIDForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(topLevelTarget)) {
      if (isInputEventSupported) {
        getTargetIDFunc = getTargetIDForInputEvent;
      } else {
        getTargetIDFunc = getTargetIDForInputEventIE;
        handleEventFunc = handleEventsForInputEventIE;
      }
    } else if (shouldUseClickEvent(topLevelTarget)) {
      getTargetIDFunc = getTargetIDForClickEvent;
    }

    if (getTargetIDFunc) {
      var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);
      if (targetID) {
        var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent, nativeEventTarget);
        event.type = 'change';
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);
    }
  }

};

module.exports = ChangeEventPlugin;
},{"./EventConstants":42,"./EventPluginHub":43,"./EventPropagators":46,"./ReactUpdates":116,"./SyntheticEvent":125,"./getEventTarget":147,"./isEventSupported":152,"./isTextInputElement":153,"fbjs/lib/ExecutionEnvironment":164,"fbjs/lib/keyOf":182}],35:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ClientReactRootIndex
 * @typechecks
 */

'use strict';

var nextReactRootIndex = 0;

var ClientReactRootIndex = {
  createReactRootIndex: function () {
    return nextReactRootIndex++;
  }
};

module.exports = ClientReactRootIndex;
},{}],36:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMChildrenOperations
 * @typechecks static-only
 */

'use strict';

var Danger = require('./Danger');
var ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');
var ReactPerf = require('./ReactPerf');

var setInnerHTML = require('./setInnerHTML');
var setTextContent = require('./setTextContent');
var invariant = require('fbjs/lib/invariant');

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
function insertChildAt(parentNode, childNode, index) {
  // By exploiting arrays returning `undefined` for an undefined index, we can
  // rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. However, using `undefined` is not allowed by all
  // browsers so we must replace it with `null`.

  // fix render order error in safari
  // IE8 will throw error when index out of list size.
  var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);

  parentNode.insertBefore(childNode, beforeChild);
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {

  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

  updateTextContent: setTextContent,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markupList List of markup strings.
   * @internal
   */
  processUpdates: function (updates, markupList) {
    var update;
    // Mapping from parent IDs to initial child orderings.
    var initialChildren = null;
    // List of children that will be moved or removed.
    var updatedChildren = null;

    for (var i = 0; i < updates.length; i++) {
      update = updates[i];
      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
        var updatedIndex = update.fromIndex;
        var updatedChild = update.parentNode.childNodes[updatedIndex];
        var parentID = update.parentID;

        !updatedChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;

        initialChildren = initialChildren || {};
        initialChildren[parentID] = initialChildren[parentID] || [];
        initialChildren[parentID][updatedIndex] = updatedChild;

        updatedChildren = updatedChildren || [];
        updatedChildren.push(updatedChild);
      }
    }

    var renderedMarkup;
    // markupList is either a list of markup or just a list of elements
    if (markupList.length && typeof markupList[0] === 'string') {
      renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);
    } else {
      renderedMarkup = markupList;
    }

    // Remove updated children first so that `toIndex` is consistent.
    if (updatedChildren) {
      for (var j = 0; j < updatedChildren.length; j++) {
        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
      }
    }

    for (var k = 0; k < updates.length; k++) {
      update = updates[k];
      switch (update.type) {
        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
          insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);
          break;
        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
          insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);
          break;
        case ReactMultiChildUpdateTypes.SET_MARKUP:
          setInnerHTML(update.parentNode, update.content);
          break;
        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
          setTextContent(update.parentNode, update.content);
          break;
        case ReactMultiChildUpdateTypes.REMOVE_NODE:
          // Already removed by the for-loop above.
          break;
      }
    }
  }

};

ReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {
  updateTextContent: 'updateTextContent'
});

module.exports = DOMChildrenOperations;
}).call(this,require('_process'))

},{"./Danger":39,"./ReactMultiChildUpdateTypes":97,"./ReactPerf":101,"./setInnerHTML":157,"./setTextContent":158,"_process":26,"fbjs/lib/invariant":178}],37:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMProperty
 * @typechecks static-only
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_ATTRIBUTE: 0x1,
  MUST_USE_PROPERTY: 0x2,
  HAS_SIDE_EFFECTS: 0x4,
  HAS_BOOLEAN_VALUE: 0x8,
  HAS_NUMERIC_VALUE: 0x10,
  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
   * attribute namespace URL. (Attribute names not specified use no namespace.)
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function (domPropertyConfig) {
    var Injection = DOMPropertyInjection;
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
    }

    for (var propName in Properties) {
      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' + '\'%s\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : undefined;

      var lowerCased = propName.toLowerCase();
      var propConfig = Properties[propName];

      var propertyInfo = {
        attributeName: lowerCased,
        attributeNamespace: null,
        propertyName: propName,
        mutationMethod: null,

        mustUseAttribute: checkMask(propConfig, Injection.MUST_USE_ATTRIBUTE),
        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),
        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
      };

      !(!propertyInfo.mustUseAttribute || !propertyInfo.mustUseProperty) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(false) : undefined;
      !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : undefined;
      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : undefined;

      if (process.env.NODE_ENV !== 'production') {
        DOMProperty.getPossibleStandardName[lowerCased] = propName;
      }

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        propertyInfo.attributeName = attributeName;
        if (process.env.NODE_ENV !== 'production') {
          DOMProperty.getPossibleStandardName[attributeName] = propName;
        }
      }

      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
      }

      if (DOMPropertyNames.hasOwnProperty(propName)) {
        propertyInfo.propertyName = DOMPropertyNames[propName];
      }

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        propertyInfo.mutationMethod = DOMMutationMethods[propName];
      }

      DOMProperty.properties[propName] = propertyInfo;
    }
  }
};
var defaultValueCache = {};

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {

  ID_ATTRIBUTE_NAME: 'data-reactid',

  /**
   * Map from property "standard name" to an object with info about how to set
   * the property in the DOM. Each object contains:
   *
   * attributeName:
   *   Used when rendering markup or with `*Attribute()`.
   * attributeNamespace
   * propertyName:
   *   Used on DOM node instances. (This includes properties that mutate due to
   *   external factors.)
   * mutationMethod:
   *   If non-null, used instead of the property or `setAttribute()` after
   *   initial render.
   * mustUseAttribute:
   *   Whether the property must be accessed and mutated using `*Attribute()`.
   *   (This includes anything that fails `<propName> in <element>`.)
   * mustUseProperty:
   *   Whether the property must be accessed and mutated as an object property.
   * hasSideEffects:
   *   Whether or not setting a value causes side effects such as triggering
   *   resources to be loaded or text selection changes. If true, we read from
   *   the DOM before updating to ensure that the value is only set if it has
   *   changed.
   * hasBooleanValue:
   *   Whether the property should be removed when set to a falsey value.
   * hasNumericValue:
   *   Whether the property must be numeric or parse as a numeric and should be
   *   removed when set to a falsey value.
   * hasPositiveNumericValue:
   *   Whether the property must be positive numeric or parse as a positive
   *   numeric and should be removed when set to a falsey value.
   * hasOverloadedBooleanValue:
   *   Whether the property can be used as a flag as well as with a value.
   *   Removed when strictly equal to false; present without a value when
   *   strictly equal to true; present with a value otherwise.
   */
  properties: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties. Available only in __DEV__.
   * @type {Object}
   */
  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function (attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  /**
   * Returns the default property value for a DOM property (i.e., not an
   * attribute). Most default values are '' or false, but not all. Worse yet,
   * some (in particular, `type`) vary depending on the type of element.
   *
   * TODO: Is it better to grab all the possible properties when creating an
   * element to avoid having to create the same element twice?
   */
  getDefaultValueForProperty: function (nodeName, prop) {
    var nodeDefaults = defaultValueCache[nodeName];
    var testElement;
    if (!nodeDefaults) {
      defaultValueCache[nodeName] = nodeDefaults = {};
    }
    if (!(prop in nodeDefaults)) {
      testElement = document.createElement(nodeName);
      nodeDefaults[prop] = testElement[prop];
    }
    return nodeDefaults[prop];
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;
}).call(this,require('_process'))

},{"_process":26,"fbjs/lib/invariant":178}],38:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DOMPropertyOperations
 * @typechecks static-only
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ReactPerf = require('./ReactPerf');

var quoteAttributeValueForBrowser = require('./quoteAttributeValueForBrowser');
var warning = require('fbjs/lib/warning');

// Simplified subset
var VALID_ATTRIBUTE_NAME_REGEX = /^[a-zA-Z_][\w\.\-]*$/;
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};

function isAttributeNameSafe(attributeName) {
  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
    return true;
  }
  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
    return false;
  }
  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }
  illegalAttributeNameCache[attributeName] = true;
  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : undefined;
  return false;
}

function shouldIgnoreValue(propertyInfo, value) {
  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
}

if (process.env.NODE_ENV !== 'production') {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true
  };
  var warnedProperties = {};

  var warnUnknownProperty = function (name) {
    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return;
    }

    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

    // For now, only warn when we have a suggested correction. This prevents
    // logging too much when using transferPropsTo.
    process.env.NODE_ENV !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : undefined;
  };
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function (id) {
    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
  },

  setAttributeForID: function (node, id) {
    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function (name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      if (shouldIgnoreValue(propertyInfo, value)) {
        return '';
      }
      var attributeName = propertyInfo.attributeName;
      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
        return attributeName + '=""';
      }
      return attributeName + '=' + quoteAttributeValueForBrowser(value);
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return name + '=' + quoteAttributeValueForBrowser(value);
    } else if (process.env.NODE_ENV !== 'production') {
      warnUnknownProperty(name);
    }
    return null;
  },

  /**
   * Creates markup for a custom property.
   *
   * @param {string} name
   * @param {*} value
   * @return {string} Markup string, or empty string if the property was invalid.
   */
  createMarkupForCustomAttribute: function (name, value) {
    if (!isAttributeNameSafe(name) || value == null) {
      return '';
    }
    return name + '=' + quoteAttributeValueForBrowser(value);
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function (node, name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(propertyInfo, value)) {
        this.deleteValueForProperty(node, name);
      } else if (propertyInfo.mustUseAttribute) {
        var attributeName = propertyInfo.attributeName;
        var namespace = propertyInfo.attributeNamespace;
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        if (namespace) {
          node.setAttributeNS(namespace, attributeName, '' + value);
        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
          node.setAttribute(attributeName, '');
        } else {
          node.setAttribute(attributeName, '' + value);
        }
      } else {
        var propName = propertyInfo.propertyName;
        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
        // property type before comparing; only `value` does and is string.
        if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {
          // Contrary to `setAttribute`, object properties are properly
          // `toString`ed by IE8/9.
          node[propName] = value;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      DOMPropertyOperations.setValueForAttribute(node, name, value);
    } else if (process.env.NODE_ENV !== 'production') {
      warnUnknownProperty(name);
    }
  },

  setValueForAttribute: function (node, name, value) {
    if (!isAttributeNameSafe(name)) {
      return;
    }
    if (value == null) {
      node.removeAttribute(name);
    } else {
      node.setAttribute(name, '' + value);
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function (node, name) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (propertyInfo.mustUseAttribute) {
        node.removeAttribute(propertyInfo.attributeName);
      } else {
        var propName = propertyInfo.propertyName;
        var defaultValue = DOMProperty.getDefaultValueForProperty(node.nodeName, propName);
        if (!propertyInfo.hasSideEffects || '' + node[propName] !== defaultValue) {
          node[propName] = defaultValue;
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    } else if (process.env.NODE_ENV !== 'production') {
      warnUnknownProperty(name);
    }
  }

};

ReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {
  setValueForProperty: 'setValueForProperty',
  setValueForAttribute: 'setValueForAttribute',
  deleteValueForProperty: 'deleteValueForProperty'
});

module.exports = DOMPropertyOperations;
}).call(this,require('_process'))

},{"./DOMProperty":37,"./ReactPerf":101,"./quoteAttributeValueForBrowser":155,"_process":26,"fbjs/lib/warning":189}],39:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Danger
 * @typechecks static-only
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var createNodesFromMarkup = require('fbjs/lib/createNodesFromMarkup');
var emptyFunction = require('fbjs/lib/emptyFunction');
var getMarkupWrap = require('fbjs/lib/getMarkupWrap');
var invariant = require('fbjs/lib/invariant');

var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
var RESULT_INDEX_ATTR = 'data-danger-index';

/**
 * Extracts the `nodeName` from a string of markup.
 *
 * NOTE: Extracting the `nodeName` does not require a regular expression match
 * because we make assumptions about React-generated markup (i.e. there are no
 * spaces surrounding the opening tag and there is at least one attribute).
 *
 * @param {string} markup String of markup.
 * @return {string} Node name of the supplied markup.
 * @see http://jsperf.com/extract-nodename
 */
function getNodeName(markup) {
  return markup.substring(1, markup.indexOf(' '));
}

var Danger = {

  /**
   * Renders markup into an array of nodes. The markup is expected to render
   * into a list of root nodes. Also, the length of `resultList` and
   * `markupList` should be the same.
   *
   * @param {array<string>} markupList List of markup strings to render.
   * @return {array<DOMElement>} List of rendered nodes.
   * @internal
   */
  dangerouslyRenderMarkup: function (markupList) {
    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : undefined;
    var nodeName;
    var markupByNodeName = {};
    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
    for (var i = 0; i < markupList.length; i++) {
      !markupList[i] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : undefined;
      nodeName = getNodeName(markupList[i]);
      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
      markupByNodeName[nodeName][i] = markupList[i];
    }
    var resultList = [];
    var resultListAssignmentCount = 0;
    for (nodeName in markupByNodeName) {
      if (!markupByNodeName.hasOwnProperty(nodeName)) {
        continue;
      }
      var markupListByNodeName = markupByNodeName[nodeName];

      // This for-in loop skips the holes of the sparse array. The order of
      // iteration should follow the order of assignment, which happens to match
      // numerical index order, but we don't rely on that.
      var resultIndex;
      for (resultIndex in markupListByNodeName) {
        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
          var markup = markupListByNodeName[resultIndex];

          // Push the requested markup with an additional RESULT_INDEX_ATTR
          // attribute.  If the markup does not start with a < character, it
          // will be discarded below (with an appropriate console.error).
          markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,
          // This index will be parsed back out below.
          '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" ');
        }
      }

      // Render each group of markup with similar wrapping `nodeName`.
      var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.
      );

      for (var j = 0; j < renderNodes.length; ++j) {
        var renderNode = renderNodes[j];
        if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
          renderNode.removeAttribute(RESULT_INDEX_ATTR);

          !!resultList.hasOwnProperty(resultIndex) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : undefined;

          resultList[resultIndex] = renderNode;

          // This should match resultList.length and markupList.length when
          // we're done.
          resultListAssignmentCount += 1;
        } else if (process.env.NODE_ENV !== 'production') {
          console.error('Danger: Discarding unexpected node:', renderNode);
        }
      }
    }

    // Although resultList was populated out of order, it should now be a dense
    // array.
    !(resultListAssignmentCount === resultList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : undefined;

    !(resultList.length === markupList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : undefined;

    return resultList;
  },

  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : undefined;
    !(oldChild.tagName.toLowerCase() !== 'html') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : undefined;

    var newChild;
    if (typeof markup === 'string') {
      newChild = createNodesFromMarkup(markup, emptyFunction)[0];
    } else {
      newChild = markup;
    }
    oldChild.parentNode.replaceChild(newChild, oldChild);
  }

};

module.exports = Danger;
}).call(this,require('_process'))

},{"_process":26,"fbjs/lib/ExecutionEnvironment":164,"fbjs/lib/createNodesFromMarkup":169,"fbjs/lib/emptyFunction":170,"fbjs/lib/getMarkupWrap":174,"fbjs/lib/invariant":178}],40:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule DefaultEventPluginOrder
 */

'use strict';

var keyOf = require('fbjs/lib/keyOf');

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */
var DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];

module.exports = DefaultEventPluginOrder;
},{"fbjs/lib/keyOf":182}],41:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EnterLeaveEventPlugin
 * @typechecks static-only
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPropagators = require('./EventPropagators');
var SyntheticMouseEvent = require('./SyntheticMouseEvent');

var ReactMount = require('./ReactMount');
var keyOf = require('fbjs/lib/keyOf');

var topLevelTypes = EventConstants.topLevelTypes;
var getFirstReactDOM = ReactMount.getFirstReactDOM;

var eventTypes = {
  mouseEnter: {
    registrationName: keyOf({ onMouseEnter: null }),
    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
  },
  mouseLeave: {
    registrationName: keyOf({ onMouseLeave: null }),
    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
  }
};

var extractedEvents = [null, null];

var EnterLeaveEventPlugin = {

  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (topLevelTarget.window === topLevelTarget) {
      // `topLevelTarget` is probably a window object.
      win = topLevelTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = topLevelTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from;
    var to;
    var fromID = '';
    var toID = '';
    if (topLevelType === topLevelTypes.topMouseOut) {
      from = topLevelTarget;
      fromID = topLevelTargetID;
      to = getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement);
      if (to) {
        toID = ReactMount.getID(to);
      } else {
        to = win;
      }
      to = to || win;
    } else {
      from = win;
      to = topLevelTarget;
      toID = topLevelTargetID;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, fromID, nativeEvent, nativeEventTarget);
    leave.type = 'mouseleave';
    leave.target = from;
    leave.relatedTarget = to;

    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, toID, nativeEvent, nativeEventTarget);
    enter.type = 'mouseenter';
    enter.target = to;
    enter.relatedTarget = from;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

    extractedEvents[0] = leave;
    extractedEvents[1] = enter;

    return extractedEvents;
  }

};

module.exports = EnterLeaveEventPlugin;
},{"./EventConstants":42,"./EventPropagators":46,"./ReactMount":95,"./SyntheticMouseEvent":129,"fbjs/lib/keyOf":182}],42:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventConstants
 */

'use strict';

var keyMirror = require('fbjs/lib/keyMirror');

var PropagationPhases = keyMirror({ bubbled: null, captured: null });

/**
 * Types of raw signals from the browser caught at the top level.
 */
var topLevelTypes = keyMirror({
  topAbort: null,
  topBlur: null,
  topCanPlay: null,
  topCanPlayThrough: null,
  topChange: null,
  topClick: null,
  topCompositionEnd: null,
  topCompositionStart: null,
  topCompositionUpdate: null,
  topContextMenu: null,
  topCopy: null,
  topCut: null,
  topDoubleClick: null,
  topDrag: null,
  topDragEnd: null,
  topDragEnter: null,
  topDragExit: null,
  topDragLeave: null,
  topDragOver: null,
  topDragStart: null,
  topDrop: null,
  topDurationChange: null,
  topEmptied: null,
  topEncrypted: null,
  topEnded: null,
  topError: null,
  topFocus: null,
  topInput: null,
  topKeyDown: null,
  topKeyPress: null,
  topKeyUp: null,
  topLoad: null,
  topLoadedData: null,
  topLoadedMetadata: null,
  topLoadStart: null,
  topMouseDown: null,
  topMouseMove: null,
  topMouseOut: null,
  topMouseOver: null,
  topMouseUp: null,
  topPaste: null,
  topPause: null,
  topPlay: null,
  topPlaying: null,
  topProgress: null,
  topRateChange: null,
  topReset: null,
  topScroll: null,
  topSeeked: null,
  topSeeking: null,
  topSelectionChange: null,
  topStalled: null,
  topSubmit: null,
  topSuspend: null,
  topTextInput: null,
  topTimeUpdate: null,
  topTouchCancel: null,
  topTouchEnd: null,
  topTouchMove: null,
  topTouchStart: null,
  topVolumeChange: null,
  topWaiting: null,
  topWheel: null
});

var EventConstants = {
  topLevelTypes: topLevelTypes,
  PropagationPhases: PropagationPhases
};

module.exports = EventConstants;
},{"fbjs/lib/keyMirror":181}],43:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginHub
 */

'use strict';

var EventPluginRegistry = require('./EventPluginRegistry');
var EventPluginUtils = require('./EventPluginUtils');
var ReactErrorUtils = require('./ReactErrorUtils');

var accumulateInto = require('./accumulateInto');
var forEachAccumulated = require('./forEachAccumulated');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @private
 */
var executeDispatchesAndRelease = function (event, simulated) {
  if (event) {
    EventPluginUtils.executeDispatchesInOrder(event, simulated);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};
var executeDispatchesAndReleaseSimulated = function (e) {
  return executeDispatchesAndRelease(e, true);
};
var executeDispatchesAndReleaseTopLevel = function (e) {
  return executeDispatchesAndRelease(e, false);
};

/**
 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
 *   hierarchy given ids of the logical DOM elements involved.
 */
var InstanceHandle = null;

function validateInstanceHandle() {
  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;
  process.env.NODE_ENV !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {

  /**
   * Methods for injecting dependencies.
   */
  injection: {

    /**
     * @param {object} InjectedMount
     * @public
     */
    injectMount: EventPluginUtils.injection.injectMount,

    /**
     * @param {object} InjectedInstanceHandle
     * @public
     */
    injectInstanceHandle: function (InjectedInstanceHandle) {
      InstanceHandle = InjectedInstanceHandle;
      if (process.env.NODE_ENV !== 'production') {
        validateInstanceHandle();
      }
    },

    getInstanceHandle: function () {
      if (process.env.NODE_ENV !== 'production') {
        validateInstanceHandle();
      }
      return InstanceHandle;
    },

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

  registrationNameModules: EventPluginRegistry.registrationNameModules,

  /**
   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {?function} listener The callback to store.
   */
  putListener: function (id, registrationName, listener) {
    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : undefined;

    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[id] = listener;

    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.didPutListener) {
      PluginModule.didPutListener(id, registrationName, listener);
    }
  },

  /**
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function (id, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    return bankForRegistrationName && bankForRegistrationName[id];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {string} id ID of the DOM element.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function (id, registrationName) {
    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.willDeleteListener) {
      PluginModule.willDeleteListener(id, registrationName);
    }

    var bankForRegistrationName = listenerBank[registrationName];
    // TODO: This should never be null -- when is it?
    if (bankForRegistrationName) {
      delete bankForRegistrationName[id];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {string} id ID of the DOM element.
   */
  deleteAllListeners: function (id) {
    for (var registrationName in listenerBank) {
      if (!listenerBank[registrationName][id]) {
        continue;
      }

      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
      if (PluginModule && PluginModule.willDeleteListener) {
        PluginModule.willDeleteListener(id, registrationName);
      }

      delete listenerBank[registrationName][id];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0; i < plugins.length; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function (events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function (simulated) {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    if (simulated) {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
    } else {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
    }
    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;
    // This would be a good time to rethrow if any of the event handlers threw.
    ReactErrorUtils.rethrowCaughtError();
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function () {
    listenerBank = {};
  },

  __getListenerBank: function () {
    return listenerBank;
  }

};

module.exports = EventPluginHub;
}).call(this,require('_process'))

},{"./EventPluginRegistry":44,"./EventPluginUtils":45,"./ReactErrorUtils":86,"./accumulateInto":135,"./forEachAccumulated":143,"_process":26,"fbjs/lib/invariant":178,"fbjs/lib/warning":189}],44:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginRegistry
 * @typechecks static-only
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * Injectable ordering of event plugins.
 */
var EventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!EventPluginOrder) {
    // Wait until an `EventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var PluginModule = namesToPlugins[pluginName];
    var pluginIndex = EventPluginOrder.indexOf(pluginName);
    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : undefined;
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : undefined;
    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
    var publishedEvents = PluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : undefined;
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : undefined;
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, PluginModule, eventName) {
  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : undefined;
  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {

  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function (InjectedEventPluginOrder) {
    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : undefined;
    // Clone the ordering so it cannot be dynamically mutated.
    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function (injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var PluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {
        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : undefined;
        namesToPlugins[pluginName] = PluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function (event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
    }
    for (var phase in dispatchConfig.phasedRegistrationNames) {
      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
        continue;
      }
      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
      if (PluginModule) {
        return PluginModule;
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function () {
    EventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }
  }

};

module.exports = EventPluginRegistry;
}).call(this,require('_process'))

},{"_process":26,"fbjs/lib/invariant":178}],45:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPluginUtils
 */

'use strict';

var EventConstants = require('./EventConstants');
var ReactErrorUtils = require('./ReactErrorUtils');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Injected dependencies:
 */

/**
 * - `Mount`: [required] Module that can convert between React dom IDs and
 *   actual node references.
 */
var injection = {
  Mount: null,
  injectMount: function (InjectedMount) {
    injection.Mount = InjectedMount;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(InjectedMount && InjectedMount.getNode && InjectedMount.getID, 'EventPluginUtils.injection.injectMount(...): Injected Mount ' + 'module is missing getNode or getID.') : undefined;
    }
  }
};

var topLevelTypes = EventConstants.topLevelTypes;

function isEndish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
}

function isMoveish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
}
function isStartish(topLevelType) {
  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
}

var validateEventDispatches;
if (process.env.NODE_ENV !== 'production') {
  validateEventDispatches = function (event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchIDs = event._dispatchIDs;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var idsIsArr = Array.isArray(dispatchIDs);
    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

    process.env.NODE_ENV !== 'production' ? warning(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : undefined;
  };
}

/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @param {function} listener Application-level callback
 * @param {string} domID DOM id to pass to the callback.
 */
function executeDispatch(event, simulated, listener, domID) {
  var type = event.type || 'unknown-event';
  event.currentTarget = injection.Mount.getNode(domID);
  if (simulated) {
    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event, domID);
  } else {
    ReactErrorUtils.invokeGuardedCallback(type, listener, event, domID);
  }
  event.currentTarget = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, simulated) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      executeDispatch(event, simulated, dispatchListeners[i], dispatchIDs[i]);
    }
  } else if (dispatchListeners) {
    executeDispatch(event, simulated, dispatchListeners, dispatchIDs);
  }
  event._dispatchListeners = null;
  event._dispatchIDs = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return {?string} id of the first dispatch execution who's listener returns
 * true, or null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchIDs = event._dispatchIDs;
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and IDs are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchIDs[i])) {
        return dispatchIDs[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchIDs)) {
      return dispatchIDs;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchIDs = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchID = event._dispatchIDs;
  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : undefined;
  var res = dispatchListener ? dispatchListener(event, dispatchID) : null;
  event._dispatchListeners = null;
  event._dispatchIDs = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,

  getNode: function (id) {
    return injection.Mount.getNode(id);
  },
  getID: function (node) {
    return injection.Mount.getID(node);
  },

  injection: injection
};

module.exports = EventPluginUtils;
}).call(this,require('_process'))

},{"./EventConstants":42,"./ReactErrorUtils":86,"_process":26,"fbjs/lib/invariant":178,"fbjs/lib/warning":189}],46:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule EventPropagators
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPluginHub = require('./EventPluginHub');

var warning = require('fbjs/lib/warning');

var accumulateInto = require('./accumulateInto');
var forEachAccumulated = require('./forEachAccumulated');

var PropagationPhases = EventConstants.PropagationPhases;
var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(id, event, propagationPhase) {
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(id, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(domID, upwards, event) {
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(domID, 'Dispatching id must not be null') : undefined;
  }
  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
  var listener = listenerAtPhase(domID, event, phase);
  if (listener) {
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, accumulateDirectionalDispatches, event);
  }
}

/**
 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
 */
function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginHub.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(event.dispatchMarker, accumulateDirectionalDispatches, event);
  }
}

/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(id, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(id, registrationName);
    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event.dispatchMarker, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateTwoPhaseDispatchesSkipTarget(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
}

function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID, toID, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;
}).call(this,require('_process'))

},{"./EventConstants":42,"./EventPluginHub":43,"./accumulateInto":135,"./forEachAccumulated":143,"_process":26,"fbjs/lib/warning":189}],47:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule FallbackCompositionState
 * @typechecks static-only
 */

'use strict';

var PooledClass = require('./PooledClass');

var assign = require('./Object.assign');
var getTextContentAccessor = require('./getTextContentAccessor');

/**
 * This helper class stores information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this._root = root;
  this._startText = this.getText();
  this._fallbackText = null;
}

assign(FallbackCompositionState.prototype, {
  destructor: function () {
    this._root = null;
    this._startText = null;
    this._fallbackText = null;
  },

  /**
   * Get current text of input.
   *
   * @return {string}
   */
  getText: function () {
    if ('value' in this._root) {
      return this._root.value;
    }
    return this._root[getTextContentAccessor()];
  },

  /**
   * Determine the differing substring between the initially stored
   * text content and the current content.
   *
   * @return {string}
   */
  getData: function () {
    if (this._fallbackText) {
      return this._fallbackText;
    }

    var start;
    var startValue = this._startText;
    var startLength = startValue.length;
    var end;
    var endValue = this.getText();
    var endLength = endValue.length;

    for (start = 0; start < startLength; start++) {
      if (startValue[start] !== endValue[start]) {
        break;
      }
    }

    var minEnd = startLength - start;
    for (end = 1; end <= minEnd; end++) {
      if (startValue[startLength - end] !== endValue[endLength - end]) {
        break;
      }
    }

    var sliceTail = end > 1 ? 1 - end : undefined;
    this._fallbackText = endValue.slice(start, sliceTail);
    return this._fallbackText;
  }
});

PooledClass.addPoolingTo(FallbackCompositionState);

module.exports = FallbackCompositionState;
},{"./Object.assign":50,"./PooledClass":51,"./getTextContentAccessor":150}],48:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule HTMLDOMPropertyConfig
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var hasSVG;
if (ExecutionEnvironment.canUseDOM) {
  var implementation = document.implementation;
  hasSVG = implementation && implementation.hasFeature && implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');
}

var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),
  Properties: {
    /**
     * Standard Properties
     */
    accept: null,
    acceptCharset: null,
    accessKey: null,
    action: null,
    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    allowTransparency: MUST_USE_ATTRIBUTE,
    alt: null,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: null,
    // autoFocus is polyfilled/normalized by AutoFocusUtils
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    capture: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    cellPadding: null,
    cellSpacing: null,
    charSet: MUST_USE_ATTRIBUTE,
    challenge: MUST_USE_ATTRIBUTE,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    classID: MUST_USE_ATTRIBUTE,
    // To set className on SVG elements, it's necessary to use .setAttribute;
    // this works on HTML elements too in all browsers except IE8. Conveniently,
    // IE8 doesn't support SVG and so we can simply use the attribute in
    // browsers that support SVG and the property in browsers that don't,
    // regardless of whether the element is HTML or SVG.
    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: null,
    content: null,
    contentEditable: null,
    contextMenu: MUST_USE_ATTRIBUTE,
    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    coords: null,
    crossOrigin: null,
    data: null, // For `<object />` acts as `src`.
    dateTime: MUST_USE_ATTRIBUTE,
    'default': HAS_BOOLEAN_VALUE,
    defer: HAS_BOOLEAN_VALUE,
    dir: null,
    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: null,
    encType: null,
    form: MUST_USE_ATTRIBUTE,
    formAction: MUST_USE_ATTRIBUTE,
    formEncType: MUST_USE_ATTRIBUTE,
    formMethod: MUST_USE_ATTRIBUTE,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: MUST_USE_ATTRIBUTE,
    frameBorder: MUST_USE_ATTRIBUTE,
    headers: null,
    height: MUST_USE_ATTRIBUTE,
    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    high: null,
    href: null,
    hrefLang: null,
    htmlFor: null,
    httpEquiv: null,
    icon: null,
    id: MUST_USE_PROPERTY,
    inputMode: MUST_USE_ATTRIBUTE,
    integrity: null,
    is: MUST_USE_ATTRIBUTE,
    keyParams: MUST_USE_ATTRIBUTE,
    keyType: MUST_USE_ATTRIBUTE,
    kind: null,
    label: null,
    lang: null,
    list: MUST_USE_ATTRIBUTE,
    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    low: null,
    manifest: MUST_USE_ATTRIBUTE,
    marginHeight: null,
    marginWidth: null,
    max: null,
    maxLength: MUST_USE_ATTRIBUTE,
    media: MUST_USE_ATTRIBUTE,
    mediaGroup: null,
    method: null,
    min: null,
    minLength: MUST_USE_ATTRIBUTE,
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: null,
    noValidate: HAS_BOOLEAN_VALUE,
    open: HAS_BOOLEAN_VALUE,
    optimum: null,
    pattern: null,
    placeholder: null,
    poster: null,
    preload: null,
    radioGroup: null,
    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    rel: null,
    required: HAS_BOOLEAN_VALUE,
    role: MUST_USE_ATTRIBUTE,
    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: null,
    sandbox: null,
    scope: null,
    scoped: HAS_BOOLEAN_VALUE,
    scrolling: null,
    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: null,
    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
    sizes: MUST_USE_ATTRIBUTE,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: null,
    src: null,
    srcDoc: MUST_USE_PROPERTY,
    srcLang: null,
    srcSet: MUST_USE_ATTRIBUTE,
    start: HAS_NUMERIC_VALUE,
    step: null,
    style: null,
    summary: null,
    tabIndex: null,
    target: null,
    title: null,
    type: null,
    useMap: null,
    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
    width: MUST_USE_ATTRIBUTE,
    wmode: MUST_USE_ATTRIBUTE,
    wrap: null,

    /**
     * RDFa Properties
     */
    about: MUST_USE_ATTRIBUTE,
    datatype: MUST_USE_ATTRIBUTE,
    inlist: MUST_USE_ATTRIBUTE,
    prefix: MUST_USE_ATTRIBUTE,
    // property is also supported for OpenGraph in meta tags.
    property: MUST_USE_ATTRIBUTE,
    resource: MUST_USE_ATTRIBUTE,
    'typeof': MUST_USE_ATTRIBUTE,
    vocab: MUST_USE_ATTRIBUTE,

    /**
     * Non-standard Properties
     */
    // autoCapitalize and autoCorrect are supported in Mobile Safari for
    // keyboard hints.
    autoCapitalize: null,
    autoCorrect: null,
    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
    autoSave: null,
    // color is for Safari mask-icon link
    color: null,
    // itemProp, itemScope, itemType are for
    // Microdata support. See http://schema.org/docs/gs.html
    itemProp: MUST_USE_ATTRIBUTE,
    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
    itemType: MUST_USE_ATTRIBUTE,
    // itemID and itemRef are for Microdata support as well but
    // only specified in the the WHATWG spec document. See
    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
    itemID: MUST_USE_ATTRIBUTE,
    itemRef: MUST_USE_ATTRIBUTE,
    // results show looking glass icon and recent searches on input
    // search fields in WebKit/Blink
    results: null,
    // IE-only attribute that specifies security restrictions on an iframe
    // as an alternative to the sandbox attribute on IE<10
    security: MUST_USE_ATTRIBUTE,
    // IE-only attribute that controls focus behavior
    unselectable: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {
    autoCapitalize: 'autocapitalize',
    autoComplete: 'autocomplete',
    autoCorrect: 'autocorrect',
    autoFocus: 'autofocus',
    autoPlay: 'autoplay',
    autoSave: 'autosave',
    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
    encType: 'encoding',
    hrefLang: 'hreflang',
    radioGroup: 'radiogroup',
    spellCheck: 'spellcheck',
    srcDoc: 'srcdoc',
    srcSet: 'srcset'
  }
};

module.exports = HTMLDOMPropertyConfig;
},{"./DOMProperty":37,"fbjs/lib/ExecutionEnvironment":164}],49:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule LinkedValueUtils
 * @typechecks static-only
 */

'use strict';

var ReactPropTypes = require('./ReactPropTypes');
var ReactPropTypeLocations = require('./ReactPropTypeLocations');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var hasReadOnlyValue = {
  'button': true,
  'checkbox': true,
  'image': true,
  'hidden': true,
  'radio': true,
  'reset': true,
  'submit': true
};

function _assertSingleLink(inputProps) {
  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\'t want to use valueLink and vice versa.') : invariant(false) : undefined;
}
function _assertValueLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\'t want to use valueLink.') : invariant(false) : undefined;
}

function _assertCheckedLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\'t want to ' + 'use checkedLink') : invariant(false) : undefined;
}

var propTypes = {
  value: function (props, propName, componentName) {
    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  checked: function (props, propName, componentName) {
    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  onChange: ReactPropTypes.func
};

var loggedTypeFailures = {};
function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  checkPropTypes: function (tagName, props, owner) {
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop);
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var addendum = getDeclarationErrorAddendum(owner);
        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : undefined;
      }
    }
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function (inputProps) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.value;
    }
    return inputProps.value;
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function (inputProps) {
    if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.value;
    }
    return inputProps.checked;
  },

  /**
   * @param {object} inputProps Props for form component
   * @param {SyntheticEvent} event change event to handle
   */
  executeOnChange: function (inputProps, event) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.requestChange(event.target.value);
    } else if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.requestChange(event.target.checked);
    } else if (inputProps.onChange) {
      return inputProps.onChange.call(undefined, event);
    }
  }
};

module.exports = LinkedValueUtils;
}).call(this,require('_process'))

},{"./ReactPropTypeLocations":103,"./ReactPropTypes":104,"_process":26,"fbjs/lib/invariant":178,"fbjs/lib/warning":189}],50:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Object.assign
 */

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

'use strict';

function assign(target, sources) {
  if (target == null) {
    throw new TypeError('Object.assign target cannot be null or undefined');
  }

  var to = Object(target);
  var hasOwnProperty = Object.prototype.hasOwnProperty;

  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
    var nextSource = arguments[nextIndex];
    if (nextSource == null) {
      continue;
    }

    var from = Object(nextSource);

    // We don't currently support accessors nor proxies. Therefore this
    // copy cannot throw. If we ever supported this then we must handle
    // exceptions and side-effects. We don't support symbols so they won't
    // be transferred.

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
  }

  return to;
}

module.exports = assign;
},{}],51:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule PooledClass
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function (copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function (a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function (a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function (a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4, a5);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4, a5);
  }
};

var standardReleaser = function (instance) {
  var Klass = this;
  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : undefined;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances (optional).
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function (CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler,
  fiveArgumentPooler: fiveArgumentPooler
};

module.exports = PooledClass;
}).call(this,require('_process'))

},{"_process":26,"fbjs/lib/invariant":178}],52:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule React
 */

'use strict';

var ReactDOM = require('./ReactDOM');
var ReactDOMServer = require('./ReactDOMServer');
var ReactIsomorphic = require('./ReactIsomorphic');

var assign = require('./Object.assign');
var deprecated = require('./deprecated');

// `version` will be added here by ReactIsomorphic.
var React = {};

assign(React, ReactIsomorphic);

assign(React, {
  // ReactDOM
  findDOMNode: deprecated('findDOMNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.findDOMNode),
  render: deprecated('render', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.render),
  unmountComponentAtNode: deprecated('unmountComponentAtNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.unmountComponentAtNode),

  // ReactDOMServer
  renderToString: deprecated('renderToString', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToString),
  renderToStaticMarkup: deprecated('renderToStaticMarkup', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToStaticMarkup)
});

React.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOM;

module.exports = React;
},{"./Object.assign":50,"./ReactDOM":65,"./ReactDOMServer":75,"./ReactIsomorphic":93,"./deprecated":139}],53:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserComponentMixin
 */

'use strict';

var ReactInstanceMap = require('./ReactInstanceMap');

var findDOMNode = require('./findDOMNode');
var warning = require('fbjs/lib/warning');

var didWarnKey = '_getDOMNodeDidWarn';

var ReactBrowserComponentMixin = {
  /**
   * Returns the DOM node rendered by this component.
   *
   * @return {DOMElement} The root node of this component.
   * @final
   * @protected
   */
  getDOMNode: function () {
    process.env.NODE_ENV !== 'production' ? warning(this.constructor[didWarnKey], '%s.getDOMNode(...) is deprecated. Please use ' + 'ReactDOM.findDOMNode(instance) instead.', ReactInstanceMap.get(this).getName() || this.tagName || 'Unknown') : undefined;
    this.constructor[didWarnKey] = true;
    return findDOMNode(this);
  }
};

module.exports = ReactBrowserComponentMixin;
}).call(this,require('_process'))

},{"./ReactInstanceMap":92,"./findDOMNode":141,"_process":26,"fbjs/lib/warning":189}],54:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactBrowserEventEmitter
 * @typechecks static-only
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPluginHub = require('./EventPluginHub');
var EventPluginRegistry = require('./EventPluginRegistry');
var ReactEventEmitterMixin = require('./ReactEventEmitterMixin');
var ReactPerf = require('./ReactPerf');
var ViewportMetrics = require('./ViewportMetrics');

var assign = require('./Object.assign');
var isEventSupported = require('./isEventSupported');

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topAbort: 'abort',
  topBlur: 'blur',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topScroll: 'scroll',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topSelectionChange: 'selectionchange',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTextInput: 'textInput',
  topTimeUpdate: 'timeupdate',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function (ReactEventListener) {
      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function (enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function () {
    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function (registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

    var topLevelTypes = EventConstants.topLevelTypes;
    for (var i = 0; i < dependencies.length; i++) {
      var dependency = dependencies[i];
      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
        if (dependency === topLevelTypes.topWheel) {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);
          }
        } else if (dependency === topLevelTypes.topScroll) {

          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
          }
        } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {

          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
          }

          // to make sure blur and focus event listeners are only attached once
          isListening[topLevelTypes.topBlur] = true;
          isListening[topLevelTypes.topFocus] = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
  },

  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function () {
    if (!isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  },

  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

  registrationNameModules: EventPluginHub.registrationNameModules,

  putListener: EventPluginHub.putListener,

  getListener: EventPluginHub.getListener,

  deleteListener: EventPluginHub.deleteListener,

  deleteAllListeners: EventPluginHub.deleteAllListeners

});

ReactPerf.measureMethods(ReactBrowserEventEmitter, 'ReactBrowserEventEmitter', {
  putListener: 'putListener',
  deleteListener: 'deleteListener'
});

module.exports = ReactBrowserEventEmitter;
},{"./EventConstants":42,"./EventPluginHub":43,"./EventPluginRegistry":44,"./Object.assign":50,"./ReactEventEmitterMixin":87,"./ReactPerf":101,"./ViewportMetrics":134,"./isEventSupported":152}],55:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 * @providesModule ReactCSSTransitionGroup
 */

'use strict';

var React = require('./React');

var assign = require('./Object.assign');

var ReactTransitionGroup = require('./ReactTransitionGroup');
var ReactCSSTransitionGroupChild = require('./ReactCSSTransitionGroupChild');

function createTransitionTimeoutPropValidator(transitionType) {
  var timeoutPropName = 'transition' + transitionType + 'Timeout';
  var enabledPropName = 'transition' + transitionType;

  return function (props) {
    // If the transition is enabled
    if (props[enabledPropName]) {
      // If no timeout duration is provided
      if (props[timeoutPropName] == null) {
        return new Error(timeoutPropName + ' wasn\'t supplied to ReactCSSTransitionGroup: ' + 'this can cause unreliable animations and won\'t be supported in ' + 'a future version of React. See ' + 'https://fb.me/react-animation-transition-group-timeout for more ' + 'information.');

        // If the duration isn't a number
      } else if (typeof props[timeoutPropName] !== 'number') {
          return new Error(timeoutPropName + ' must be a number (in milliseconds)');
        }
    }
  };
}

var ReactCSSTransitionGroup = React.createClass({
  displayName: 'ReactCSSTransitionGroup',

  propTypes: {
    transitionName: ReactCSSTransitionGroupChild.propTypes.name,

    transitionAppear: React.PropTypes.bool,
    transitionEnter: React.PropTypes.bool,
    transitionLeave: React.PropTypes.bool,
    transitionAppearTimeout: createTransitionTimeoutPropValidator('Appear'),
    transitionEnterTimeout: createTransitionTimeoutPropValidator('Enter'),
    transitionLeaveTimeout: createTransitionTimeoutPropValidator('Leave')
  },

  getDefaultProps: function () {
    return {
      transitionAppear: false,
      transitionEnter: true,
      transitionLeave: true
    };
  },

  _wrapChild: function (child) {
    // We need to provide this childFactory so that
    // ReactCSSTransitionGroupChild can receive updates to name, enter, and
    // leave while it is leaving.
    return React.createElement(ReactCSSTransitionGroupChild, {
      name: this.props.transitionName,
      appear: this.props.transitionAppear,
      enter: this.props.transitionEnter,
      leave: this.props.transitionLeave,
      appearTimeout: this.props.transitionAppearTimeout,
      enterTimeout: this.props.transitionEnterTimeout,
      leaveTimeout: this.props.transitionLeaveTimeout
    }, child);
  },

  render: function () {
    return React.createElement(ReactTransitionGroup, assign({}, this.props, { childFactory: this._wrapChild }));
  }
});

module.exports = ReactCSSTransitionGroup;
},{"./Object.assign":50,"./React":52,"./ReactCSSTransitionGroupChild":56,"./ReactTransitionGroup":114}],56:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 * @providesModule ReactCSSTransitionGroupChild
 */

'use strict';

var React = require('./React');
var ReactDOM = require('./ReactDOM');

var CSSCore = require('fbjs/lib/CSSCore');
var ReactTransitionEvents = require('./ReactTransitionEvents');

var onlyChild = require('./onlyChild');

// We don't remove the element from the DOM until we receive an animationend or
// transitionend event. If the user screws up and forgets to add an animation
// their node will be stuck in the DOM forever, so we detect if an animation
// does not start and if it doesn't, we just call the end listener immediately.
var TICK = 17;

var ReactCSSTransitionGroupChild = React.createClass({
  displayName: 'ReactCSSTransitionGroupChild',

  propTypes: {
    name: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.shape({
      enter: React.PropTypes.string,
      leave: React.PropTypes.string,
      active: React.PropTypes.string
    }), React.PropTypes.shape({
      enter: React.PropTypes.string,
      enterActive: React.PropTypes.string,
      leave: React.PropTypes.string,
      leaveActive: React.PropTypes.string,
      appear: React.PropTypes.string,
      appearActive: React.PropTypes.string
    })]).isRequired,

    // Once we require timeouts to be specified, we can remove the
    // boolean flags (appear etc.) and just accept a number
    // or a bool for the timeout flags (appearTimeout etc.)
    appear: React.PropTypes.bool,
    enter: React.PropTypes.bool,
    leave: React.PropTypes.bool,
    appearTimeout: React.PropTypes.number,
    enterTimeout: React.PropTypes.number,
    leaveTimeout: React.PropTypes.number
  },

  transition: function (animationType, finishCallback, userSpecifiedDelay) {
    var node = ReactDOM.findDOMNode(this);

    if (!node) {
      if (finishCallback) {
        finishCallback();
      }
      return;
    }

    var className = this.props.name[animationType] || this.props.name + '-' + animationType;
    var activeClassName = this.props.name[animationType + 'Active'] || className + '-active';
    var timeout = null;

    var endListener = function (e) {
      if (e && e.target !== node) {
        return;
      }

      clearTimeout(timeout);

      CSSCore.removeClass(node, className);
      CSSCore.removeClass(node, activeClassName);

      ReactTransitionEvents.removeEndEventListener(node, endListener);

      // Usually this optional callback is used for informing an owner of
      // a leave animation and telling it to remove the child.
      if (finishCallback) {
        finishCallback();
      }
    };

    CSSCore.addClass(node, className);

    // Need to do this to actually trigger a transition.
    this.queueClass(activeClassName);

    // If the user specified a timeout delay.
    if (userSpecifiedDelay) {
      // Clean-up the animation after the specified delay
      timeout = setTimeout(endListener, userSpecifiedDelay);
    } else {
      // DEPRECATED: this listener will be removed in a future version of react
      ReactTransitionEvents.addEndEventListener(node, endListener);
    }
  },

  queueClass: function (className) {
    this.classNameQueue.push(className);

    if (!this.timeout) {
      this.timeout = setTimeout(this.flushClassNameQueue, TICK);
    }
  },

  flushClassNameQueue: function () {
    if (this.isMounted()) {
      this.classNameQueue.forEach(CSSCore.addClass.bind(CSSCore, ReactDOM.findDOMNode(this)));
    }
    this.classNameQueue.length = 0;
    this.timeout = null;
  },

  componentWillMount: function () {
    this.classNameQueue = [];
  },

  componentWillUnmount: function () {
    if (this.timeout) {
      clearTimeout(this.timeout);
    }
  },

  componentWillAppear: function (done) {
    if (this.props.appear) {
      this.transition('appear', done, this.props.appearTimeout);
    } else {
      done();
    }
  },

  componentWillEnter: function (done) {
    if (this.props.enter) {
      this.transition('enter', done, this.props.enterTimeout);
    } else {
      done();
    }
  },

  componentWillLeave: function (done) {
    if (this.props.leave) {
      this.transition('leave', done, this.props.leaveTimeout);
    } else {
      done();
    }
  },

  render: function () {
    return onlyChild(this.props.children);
  }
});

module.exports = ReactCSSTransitionGroupChild;
},{"./React":52,"./ReactDOM":65,"./ReactTransitionEvents":113,"./onlyChild":154,"fbjs/lib/CSSCore":162}],57:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildReconciler
 * @typechecks static-only
 */

'use strict';

var ReactReconciler = require('./ReactReconciler');

var instantiateReactComponent = require('./instantiateReactComponent');
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
var traverseAllChildren = require('./traverseAllChildren');
var warning = require('fbjs/lib/warning');

function instantiateChild(childInstances, child, name) {
  // We found a component instance.
  var keyUnique = childInstances[name] === undefined;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
  }
  if (child != null && keyUnique) {
    childInstances[name] = instantiateReactComponent(child, null);
  }
}

/**
 * ReactChildReconciler provides helpers for initializing or updating a set of
 * children. Its output is suitable for passing it onto ReactMultiChild which
 * does diffed reordering and insertion.
 */
var ReactChildReconciler = {
  /**
   * Generates a "mount image" for each of the supplied children. In the case
   * of `ReactDOMComponent`, a mount image is a string of markup.
   *
   * @param {?object} nestedChildNodes Nested child maps.
   * @return {?object} A set of child instances.
   * @internal
   */
  instantiateChildren: function (nestedChildNodes, transaction, context) {
    if (nestedChildNodes == null) {
      return null;
    }
    var childInstances = {};
    traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
    return childInstances;
  },

  /**
   * Updates the rendered children and returns a new set of children.
   *
   * @param {?object} prevChildren Previously initialized set of children.
   * @param {?object} nextChildren Flat child element maps.
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @return {?object} A new set of child instances.
   * @internal
   */
  updateChildren: function (prevChildren, nextChildren, transaction, context) {
    // We currently don't have a way to track moves here but if we use iterators
    // instead of for..in we can zip the iterators and check if an item has
    // moved.
    // TODO: If nothing has changed, return the prevChildren object so that we
    // can quickly bailout if nothing has changed.
    if (!nextChildren && !prevChildren) {
      return null;
    }
    var name;
    for (name in nextChildren) {
      if (!nextChildren.hasOwnProperty(name)) {
        continue;
      }
      var prevChild = prevChildren && prevChildren[name];
      var prevElement = prevChild && prevChild._currentElement;
      var nextElement = nextChildren[name];
      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
        nextChildren[name] = prevChild;
      } else {
        if (prevChild) {
          ReactReconciler.unmountComponent(prevChild, name);
        }
        // The child must be instantiated before it's mounted.
        var nextChildInstance = instantiateReactComponent(nextElement, null);
        nextChildren[name] = nextChildInstance;
      }
    }
    // Unmount children that are no longer present.
    for (name in prevChildren) {
      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
        ReactReconciler.unmountComponent(prevChildren[name]);
      }
    }
    return nextChildren;
  },

  /**
   * Unmounts all rendered children. This should be used to clean up children
   * when this component is unmounted.
   *
   * @param {?object} renderedChildren Previously initialized set of children.
   * @internal
   */
  unmountChildren: function (renderedChildren) {
    for (var name in renderedChildren) {
      if (renderedChildren.hasOwnProperty(name)) {
        var renderedChild = renderedChildren[name];
        ReactReconciler.unmountComponent(renderedChild);
      }
    }
  }

};

module.exports = ReactChildReconciler;
}).call(this,require('_process'))

},{"./ReactReconciler":106,"./instantiateReactComponent":151,"./shouldUpdateReactComponent":159,"./traverseAllChildren":160,"_process":26,"fbjs/lib/warning":189}],58:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactChildren
 */

'use strict';

var PooledClass = require('./PooledClass');
var ReactElement = require('./ReactElement');

var emptyFunction = require('fbjs/lib/emptyFunction');
var traverseAllChildren = require('./traverseAllChildren');

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var fourArgumentPooler = PooledClass.fourArgumentPooler;

var userProvidedKeyEscapeRegex = /\/(?!\/)/g;
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '//');
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.func = forEachFunction;
  this.context = forEachContext;
  this.count = 0;
}
ForEachBookKeeping.prototype.destructor = function () {
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func;
  var context = bookKeeping.context;

  func.call(context, child, bookKeeping.count++);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }
  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
  this.result = mapResult;
  this.keyPrefix = keyPrefix;
  this.func = mapFunction;
  this.context = mapContext;
  this.count = 0;
}
MapBookKeeping.prototype.destructor = function () {
  this.result = null;
  this.keyPrefix = null;
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result;
  var keyPrefix = bookKeeping.keyPrefix;
  var func = bookKeeping.func;
  var context = bookKeeping.context;

  var mappedChild = func.call(context, child, bookKeeping.count++);
  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
  } else if (mappedChild != null) {
    if (ReactElement.isValidElement(mappedChild)) {
      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
      // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (mappedChild !== child ? escapeUserProvidedKey(mappedChild.key || '') + '/' : '') + childKey);
    }
    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';
  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }
  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}

function forEachSingleChildDummy(traverseContext, child, name) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 */
function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
  return result;
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
  count: countChildren,
  toArray: toArray
};

module.exports = ReactChildren;
},{"./PooledClass":51,"./ReactElement":82,"./traverseAllChildren":160,"fbjs/lib/emptyFunction":170}],59:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactClass
 */

'use strict';

var ReactComponent = require('./ReactComponent');
var ReactElement = require('./ReactElement');
var ReactPropTypeLocations = require('./ReactPropTypeLocations');
var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');
var ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');

var assign = require('./Object.assign');
var emptyObject = require('fbjs/lib/emptyObject');
var invariant = require('fbjs/lib/invariant');
var keyMirror = require('fbjs/lib/keyMirror');
var keyOf = require('fbjs/lib/keyOf');
var warning = require('fbjs/lib/warning');

var MIXINS_KEY = keyOf({ mixins: null });

/**
 * Policies that describe methods in `ReactClassInterface`.
 */
var SpecPolicy = keyMirror({
  /**
   * These methods may be defined only once by the class specification or mixin.
   */
  DEFINE_ONCE: null,
  /**
   * These methods may be defined by both the class specification and mixins.
   * Subsequent definitions will be chained. These methods must return void.
   */
  DEFINE_MANY: null,
  /**
   * These methods are overriding the base class.
   */
  OVERRIDE_BASE: null,
  /**
   * These methods are similar to DEFINE_MANY, except we assume they return
   * objects. We try to merge the keys of the return values of all the mixed in
   * functions. If there is a key conflict we throw.
   */
  DEFINE_MANY_MERGED: null
});

var injectedMixins = [];

var warnedSetProps = false;
function warnSetProps() {
  if (!warnedSetProps) {
    warnedSetProps = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'setProps(...) and replaceProps(...) are deprecated. ' + 'Instead, call render again at the top level.') : undefined;
  }
}

/**
 * Composite components are higher-level components that compose other composite
 * or native components.
 *
 * To create a new type of `ReactClass`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactClassInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will be available on the prototype.
 *
 * @interface ReactClassInterface
 * @internal
 */
var ReactClassInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: SpecPolicy.DEFINE_MANY,

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: SpecPolicy.DEFINE_MANY,

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: SpecPolicy.DEFINE_MANY,

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * @return {object}
   * @optional
   */
  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @nosideeffects
   * @required
   */
  render: SpecPolicy.DEFINE_ONCE,

  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: SpecPolicy.DEFINE_MANY,

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: SpecPolicy.DEFINE_MANY,

  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: SpecPolicy.OVERRIDE_BASE

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function (Constructor, displayName) {
    Constructor.displayName = displayName;
  },
  mixins: function (Constructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(Constructor, mixins[i]);
      }
    }
  },
  childContextTypes: function (Constructor, childContextTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);
    }
    Constructor.childContextTypes = assign({}, Constructor.childContextTypes, childContextTypes);
  },
  contextTypes: function (Constructor, contextTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);
    }
    Constructor.contextTypes = assign({}, Constructor.contextTypes, contextTypes);
  },
  /**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
  getDefaultProps: function (Constructor, getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
    } else {
      Constructor.getDefaultProps = getDefaultProps;
    }
  },
  propTypes: function (Constructor, propTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);
    }
    Constructor.propTypes = assign({}, Constructor.propTypes, propTypes);
  },
  statics: function (Constructor, statics) {
    mixStaticSpecIntoComponent(Constructor, statics);
  },
  autobind: function () {} };

// noop
function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      // use a warning instead of an invariant so components
      // don't show up in prod but not in __DEV__
      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : undefined;
    }
  }
}

function validateMethodOverride(proto, name) {
  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactClassMixin.hasOwnProperty(name)) {
    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : undefined;
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (proto.hasOwnProperty(name)) {
    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : undefined;
  }
}

/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building React classses.
 */
function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    return;
  }

  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;

  var proto = Constructor.prototype;

  // By handling mixins before any other properties, we ensure the same
  // chaining order is applied to methods with DEFINE_MANY policy, whether
  // mixins are listed before or after these methods in the spec.
  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      // We have already handled mixins in a special case above.
      continue;
    }

    var property = spec[name];
    validateMethodOverride(proto, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactClass methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
      var isAlreadyDefined = proto.hasOwnProperty(name);
      var isFunction = typeof property === 'function';
      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

      if (shouldAutoBind) {
        if (!proto.__reactAutoBindMap) {
          proto.__reactAutoBindMap = {};
        }
        proto.__reactAutoBindMap[name] = property;
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactClassInterface[name];

          // These cases should already be caught by validateMethodOverride.
          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : undefined;

          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if (process.env.NODE_ENV !== 'production') {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = (name in RESERVED_SPEC_KEYS);
    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : undefined;

    var isInherited = (name in Constructor);
    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : undefined;
    Constructor[name] = property;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeIntoWithNoDuplicateKeys(one, two) {
  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : undefined;

  for (var key in two) {
    if (two.hasOwnProperty(key)) {
      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : undefined;
      one[key] = two[key];
    }
  }
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    var c = {};
    mergeIntoWithNoDuplicateKeys(c, a);
    mergeIntoWithNoDuplicateKeys(c, b);
    return c;
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

/**
 * Binds a method to the component.
 *
 * @param {object} component Component whose method is going to be bound.
 * @param {function} method Method to be bound.
 * @return {function} The bound method.
 */
function bindAutoBindMethod(component, method) {
  var boundMethod = method.bind(component);
  if (process.env.NODE_ENV !== 'production') {
    boundMethod.__reactBoundContext = component;
    boundMethod.__reactBoundMethod = method;
    boundMethod.__reactBoundArguments = null;
    var componentName = component.constructor.displayName;
    var _bind = boundMethod.bind;
    /* eslint-disable block-scoped-var, no-undef */
    boundMethod.bind = function (newThis) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      // User is trying to bind() an autobound method; we effectively will
      // ignore the value of "this" that the user is trying to use, so
      // let's warn.
      if (newThis !== component && newThis !== null) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : undefined;
      } else if (!args.length) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : undefined;
        return boundMethod;
      }
      var reboundMethod = _bind.apply(boundMethod, arguments);
      reboundMethod.__reactBoundContext = component;
      reboundMethod.__reactBoundMethod = method;
      reboundMethod.__reactBoundArguments = args;
      return reboundMethod;
      /* eslint-enable */
    };
  }
  return boundMethod;
}

/**
 * Binds all auto-bound methods in a component.
 *
 * @param {object} component Component whose method is going to be bound.
 */
function bindAutoBindMethods(component) {
  for (var autoBindKey in component.__reactAutoBindMap) {
    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
      var method = component.__reactAutoBindMap[autoBindKey];
      component[autoBindKey] = bindAutoBindMethod(component, method);
    }
  }
}

/**
 * Add more to the ReactClass base class. These are all legacy features and
 * therefore not already part of the modern ReactComponent.
 */
var ReactClassMixin = {

  /**
   * TODO: This will be deprecated because state should always keep a consistent
   * type signature and the only use case for this, is to avoid that.
   */
  replaceState: function (newState, callback) {
    this.updater.enqueueReplaceState(this, newState);
    if (callback) {
      this.updater.enqueueCallback(this, callback);
    }
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function () {
    return this.updater.isMounted(this);
  },

  /**
   * Sets a subset of the props.
   *
   * @param {object} partialProps Subset of the next props.
   * @param {?function} callback Called after props are updated.
   * @final
   * @public
   * @deprecated
   */
  setProps: function (partialProps, callback) {
    if (process.env.NODE_ENV !== 'production') {
      warnSetProps();
    }
    this.updater.enqueueSetProps(this, partialProps);
    if (callback) {
      this.updater.enqueueCallback(this, callback);
    }
  },

  /**
   * Replace all the props.
   *
   * @param {object} newProps Subset of the next props.
   * @param {?function} callback Called after props are updated.
   * @final
   * @public
   * @deprecated
   */
  replaceProps: function (newProps, callback) {
    if (process.env.NODE_ENV !== 'production') {
      warnSetProps();
    }
    this.updater.enqueueReplaceProps(this, newProps);
    if (callback) {
      this.updater.enqueueCallback(this, callback);
    }
  }
};

var ReactClassComponent = function () {};
assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

/**
 * Module for creating composite components.
 *
 * @class ReactClass
 */
var ReactClass = {

  /**
   * Creates a composite component class given a class specification.
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function (spec) {
    var Constructor = function (props, context, updater) {
      // This constructor is overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted.

      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : undefined;
      }

      // Wire up auto-binding
      if (this.__reactAutoBindMap) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;

      this.state = null;

      // ReactClasses doesn't have constructors. Instead, they use the
      // getInitialState and componentWillMount methods for initialization.

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if (process.env.NODE_ENV !== 'production') {
        // We allow auto-mocks to proceed as if they're returning null.
        if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          initialState = null;
        }
      }
      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : undefined;

      this.state = initialState;
    };
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;

    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged.
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    if (process.env.NODE_ENV !== 'production') {
      // This is a tag to indicate that the use of these method names is ok,
      // since it's used with createClass. If it's not, then it's likely a
      // mistake so we'll warn you to use the static property, property
      // initializer or constructor respectively.
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }

    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : undefined;

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : undefined;
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    return Constructor;
  },

  injection: {
    injectMixin: function (mixin) {
      injectedMixins.push(mixin);
    }
  }

};

module.exports = ReactClass;
}).call(this,require('_process'))

},{"./Object.assign":50,"./ReactComponent":60,"./ReactElement":82,"./ReactNoopUpdateQueue":99,"./ReactPropTypeLocationNames":102,"./ReactPropTypeLocations":103,"_process":26,"fbjs/lib/emptyObject":171,"fbjs/lib/invariant":178,"fbjs/lib/keyMirror":181,"fbjs/lib/keyOf":182,"fbjs/lib/warning":189}],60:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponent
 */

'use strict';

var ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');

var canDefineProperty = require('./canDefineProperty');
var emptyObject = require('fbjs/lib/emptyObject');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Base class helpers for the updating state of a component.
 */
function ReactComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

ReactComponent.prototype.isReactComponent = {};

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
ReactComponent.prototype.setState = function (partialState, callback) {
  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : undefined;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : undefined;
  }
  this.updater.enqueueSetState(this, partialState);
  if (callback) {
    this.updater.enqueueCallback(this, callback);
  }
};

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */
ReactComponent.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this);
  if (callback) {
    this.updater.enqueueCallback(this, callback);
  }
};

/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */
if (process.env.NODE_ENV !== 'production') {
  var deprecatedAPIs = {
    getDOMNode: ['getDOMNode', 'Use ReactDOM.findDOMNode(component) instead.'],
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceProps: ['replaceProps', 'Instead, call render again at the top level.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'],
    setProps: ['setProps', 'Instead, call render again at the top level.']
  };
  var defineDeprecationWarning = function (methodName, info) {
    if (canDefineProperty) {
      Object.defineProperty(ReactComponent.prototype, methodName, {
        get: function () {
          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : undefined;
          return undefined;
        }
      });
    }
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

module.exports = ReactComponent;
}).call(this,require('_process'))

},{"./ReactNoopUpdateQueue":99,"./canDefineProperty":137,"_process":26,"fbjs/lib/emptyObject":171,"fbjs/lib/invariant":178,"fbjs/lib/warning":189}],61:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentBrowserEnvironment
 */

'use strict';

var ReactDOMIDOperations = require('./ReactDOMIDOperations');
var ReactMount = require('./ReactMount');

/**
 * Abstracts away all functionality of the reconciler that requires knowledge of
 * the browser context. TODO: These callers should be refactored to avoid the
 * need for this injection.
 */
var ReactComponentBrowserEnvironment = {

  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

  replaceNodeWithMarkupByID: ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

  /**
   * If a particular environment requires that some resources be cleaned up,
   * specify this in the injected Mixin. In the DOM, we would likely want to
   * purge any cached node ID lookups.
   *
   * @private
   */
  unmountIDFromEnvironment: function (rootNodeID) {
    ReactMount.purgeID(rootNodeID);
  }

};

module.exports = ReactComponentBrowserEnvironment;
},{"./ReactDOMIDOperations":70,"./ReactMount":95}],62:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactComponentEnvironment
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

var injected = false;

var ReactComponentEnvironment = {

  /**
   * Optionally injectable environment dependent cleanup hook. (server vs.
   * browser etc). Example: A browser system caches DOM nodes based on component
   * ID and must remove that cache entry when this instance is unmounted.
   */
  unmountIDFromEnvironment: null,

  /**
   * Optionally injectable hook for swapping out mount images in the middle of
   * the tree.
   */
  replaceNodeWithMarkupByID: null,

  /**
   * Optionally injectable hook for processing a queue of child updates. Will
   * later move into MultiChildComponents.
   */
  processChildrenUpdates: null,

  injection: {
    injectEnvironment: function (environment) {
      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;
      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;
      ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;
      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
      injected = true;
    }
  }

};

module.exports = ReactComponentEnvironment;
}).call(this,require('_process'))

},{"_process":26,"fbjs/lib/invariant":178}],63:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCompositeComponent
 */

'use strict';

var ReactComponentEnvironment = require('./ReactComponentEnvironment');
var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactElement = require('./ReactElement');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactPerf = require('./ReactPerf');
var ReactPropTypeLocations = require('./ReactPropTypeLocations');
var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');
var ReactReconciler = require('./ReactReconciler');
var ReactUpdateQueue = require('./ReactUpdateQueue');

var assign = require('./Object.assign');
var emptyObject = require('fbjs/lib/emptyObject');
var invariant = require('fbjs/lib/invariant');
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
var warning = require('fbjs/lib/warning');

function getDeclarationErrorAddendum(component) {
  var owner = component._currentElement._owner || null;
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

function StatelessComponent(Component) {}
StatelessComponent.prototype.render = function () {
  var Component = ReactInstanceMap.get(this)._currentElement.type;
  return Component(this.props, this.context, this.updater);
};

/**
 * ------------------ The Life-Cycle of a Composite Component ------------------
 *
 * - constructor: Initialization of state. The instance is now retained.
 *   - componentWillMount
 *   - render
 *   - [children's constructors]
 *     - [children's componentWillMount and render]
 *     - [children's componentDidMount]
 *     - componentDidMount
 *
 *       Update Phases:
 *       - componentWillReceiveProps (only called if parent updated)
 *       - shouldComponentUpdate
 *         - componentWillUpdate
 *           - render
 *           - [children's constructors or receive props phases]
 *         - componentDidUpdate
 *
 *     - componentWillUnmount
 *     - [children's componentWillUnmount]
 *   - [children destroyed]
 * - (destroyed): The instance is now blank, released by React and ready for GC.
 *
 * -----------------------------------------------------------------------------
 */

/**
 * An incrementing ID assigned to each component when it is mounted. This is
 * used to enforce the order in which `ReactUpdates` updates dirty components.
 *
 * @private
 */
var nextMountID = 1;

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponentMixin = {

  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function (element) {
    this._currentElement = element;
    this._rootNodeID = null;
    this._instance = null;

    // See ReactUpdateQueue
    this._pendingElement = null;
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    this._renderedComponent = null;

    this._context = null;
    this._mountOrder = 0;
    this._topLevelWrapper = null;

    // See ReactUpdates and ReactUpdateQueue.
    this._pendingCallbacks = null;
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (rootID, transaction, context) {
    this._context = context;
    this._mountOrder = nextMountID++;
    this._rootNodeID = rootID;

    var publicProps = this._processProps(this._currentElement.props);
    var publicContext = this._processContext(context);

    var Component = this._currentElement.type;

    // Initialize the public class
    var inst;
    var renderedElement;

    // This is a way to detect if Component is a stateless arrow function
    // component, which is not newable. It might not be 100% reliable but is
    // something we can do until we start detecting that Component extends
    // React.Component. We already assume that typeof Component === 'function'.
    var canInstantiate = ('prototype' in Component);

    if (canInstantiate) {
      if (process.env.NODE_ENV !== 'production') {
        ReactCurrentOwner.current = this;
        try {
          inst = new Component(publicProps, publicContext, ReactUpdateQueue);
        } finally {
          ReactCurrentOwner.current = null;
        }
      } else {
        inst = new Component(publicProps, publicContext, ReactUpdateQueue);
      }
    }

    if (!canInstantiate || inst === null || inst === false || ReactElement.isValidElement(inst)) {
      renderedElement = inst;
      inst = new StatelessComponent(Component);
    }

    if (process.env.NODE_ENV !== 'production') {
      // This will throw later in _renderValidatedComponent, but add an early
      // warning now to help debugging
      if (inst.render == null) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`, returned ' + 'null/false from a stateless component, or tried to render an ' + 'element whose type is a function that isn\'t a React component.', Component.displayName || Component.name || 'Component') : undefined;
      } else {
        // We support ES6 inheriting from React.Component, the module pattern,
        // and stateless components, but not ES6 classes that don't extend
        process.env.NODE_ENV !== 'production' ? warning(Component.prototype && Component.prototype.isReactComponent || !canInstantiate || !(inst instanceof Component), '%s(...): React component classes must extend React.Component.', Component.displayName || Component.name || 'Component') : undefined;
      }
    }

    // These should be set up in the constructor, but as a convenience for
    // simpler class abstractions, we set them up after the fact.
    inst.props = publicProps;
    inst.context = publicContext;
    inst.refs = emptyObject;
    inst.updater = ReactUpdateQueue;

    this._instance = inst;

    // Store a reference from the instance back to the internal representation
    ReactInstanceMap.set(inst, this);

    if (process.env.NODE_ENV !== 'production') {
      // Since plain JS classes are defined without any special initialization
      // logic, we can not catch common errors early. Therefore, we have to
      // catch them here, at initialization time, instead.
      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : undefined;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : undefined;
    }

    var initialState = inst.state;
    if (initialState === undefined) {
      inst.state = initialState = null;
    }
    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;

    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    if (inst.componentWillMount) {
      inst.componentWillMount();
      // When mounting, calls to `setState` by `componentWillMount` will set
      // `this._pendingStateQueue` without triggering a re-render.
      if (this._pendingStateQueue) {
        inst.state = this._processPendingState(inst.props, inst.context);
      }
    }

    // If not a stateless component, we now render
    if (renderedElement === undefined) {
      renderedElement = this._renderValidatedComponent();
    }

    this._renderedComponent = this._instantiateReactComponent(renderedElement);

    var markup = ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, this._processChildContext(context));
    if (inst.componentDidMount) {
      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
    }

    return markup;
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function () {
    var inst = this._instance;

    if (inst.componentWillUnmount) {
      inst.componentWillUnmount();
    }

    ReactReconciler.unmountComponent(this._renderedComponent);
    this._renderedComponent = null;
    this._instance = null;

    // Reset pending fields
    // Even if this component is scheduled for another update in ReactUpdates,
    // it would still be ignored because these fields are reset.
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;
    this._pendingCallbacks = null;
    this._pendingElement = null;

    // These fields do not really need to be reset since this object is no
    // longer accessible.
    this._context = null;
    this._rootNodeID = null;
    this._topLevelWrapper = null;

    // Delete the reference from the instance to this internal representation
    // which allow the internals to be properly cleaned up even if the user
    // leaks a reference to the public instance.
    ReactInstanceMap.remove(inst);

    // Some existing components rely on inst.props even after they've been
    // destroyed (in event handlers).
    // TODO: inst.props = null;
    // TODO: inst.state = null;
    // TODO: inst.context = null;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _maskContext: function (context) {
    var maskedContext = null;
    var Component = this._currentElement.type;
    var contextTypes = Component.contextTypes;
    if (!contextTypes) {
      return emptyObject;
    }
    maskedContext = {};
    for (var contextName in contextTypes) {
      maskedContext[contextName] = context[contextName];
    }
    return maskedContext;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function (context) {
    var maskedContext = this._maskContext(context);
    if (process.env.NODE_ENV !== 'production') {
      var Component = this._currentElement.type;
      if (Component.contextTypes) {
        this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function (currentContext) {
    var Component = this._currentElement.type;
    var inst = this._instance;
    var childContext = inst.getChildContext && inst.getChildContext();
    if (childContext) {
      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
      if (process.env.NODE_ENV !== 'production') {
        this._checkPropTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);
      }
      for (var name in childContext) {
        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(false) : undefined;
      }
      return assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Processes props by setting default values for unspecified props and
   * asserting that the props are valid. Does not mutate its argument; returns
   * a new props object with defaults merged in.
   *
   * @param {object} newProps
   * @return {object}
   * @private
   */
  _processProps: function (newProps) {
    if (process.env.NODE_ENV !== 'production') {
      var Component = this._currentElement.type;
      if (Component.propTypes) {
        this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);
      }
    }
    return newProps;
  },

  /**
   * Assert that the props are valid
   *
   * @param {object} propTypes Map of prop name to a ReactPropType
   * @param {object} props
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkPropTypes: function (propTypes, props, location) {
    // TODO: Stop validating prop types here and only use the element
    // validation.
    var componentName = this.getName();
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error;
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
          error = propTypes[propName](props, propName, componentName, location);
        } catch (ex) {
          error = ex;
        }
        if (error instanceof Error) {
          // We may want to extend this logic for similar errors in
          // top-level render calls, so I'm abstracting it away into
          // a function to minimize refactoring in the future
          var addendum = getDeclarationErrorAddendum(this);

          if (location === ReactPropTypeLocations.prop) {
            // Preface gives us something to blacklist in warning module
            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : undefined;
          } else {
            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : undefined;
          }
        }
      }
    }
  },

  receiveComponent: function (nextElement, transaction, nextContext) {
    var prevElement = this._currentElement;
    var prevContext = this._context;

    this._pendingElement = null;

    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
  },

  /**
   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (transaction) {
    if (this._pendingElement != null) {
      ReactReconciler.receiveComponent(this, this._pendingElement || this._currentElement, transaction, this._context);
    }

    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
    }
  },

  /**
   * Perform an update to a mounted component. The componentWillReceiveProps and
   * shouldComponentUpdate methods are called, then (assuming the update isn't
   * skipped) the remaining update lifecycle methods are called and the DOM
   * representation is updated.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevParentElement
   * @param {ReactElement} nextParentElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
    var inst = this._instance;

    var nextContext = this._context === nextUnmaskedContext ? inst.context : this._processContext(nextUnmaskedContext);
    var nextProps;

    // Distinguish between a props update versus a simple state update
    if (prevParentElement === nextParentElement) {
      // Skip checking prop types again -- we don't read inst.props to avoid
      // warning for DOM component props in this upgrade
      nextProps = nextParentElement.props;
    } else {
      nextProps = this._processProps(nextParentElement.props);
      // An update here will schedule an update but immediately set
      // _pendingStateQueue which will ensure that any state updates gets
      // immediately reconciled instead of waiting for the next batch.

      if (inst.componentWillReceiveProps) {
        inst.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    var nextState = this._processPendingState(nextProps, nextContext);

    var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(typeof shouldUpdate !== 'undefined', '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : undefined;
    }

    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state but we shortcut the rest of the update.
      this._currentElement = nextParentElement;
      this._context = nextUnmaskedContext;
      inst.props = nextProps;
      inst.state = nextState;
      inst.context = nextContext;
    }
  },

  _processPendingState: function (props, context) {
    var inst = this._instance;
    var queue = this._pendingStateQueue;
    var replace = this._pendingReplaceState;
    this._pendingReplaceState = false;
    this._pendingStateQueue = null;

    if (!queue) {
      return inst.state;
    }

    if (replace && queue.length === 1) {
      return queue[0];
    }

    var nextState = assign({}, replace ? queue[0] : inst.state);
    for (var i = replace ? 1 : 0; i < queue.length; i++) {
      var partial = queue[i];
      assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
    }

    return nextState;
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @param {?object} unmaskedContext
   * @private
   */
  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
    var inst = this._instance;

    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
    var prevProps;
    var prevState;
    var prevContext;
    if (hasComponentDidUpdate) {
      prevProps = inst.props;
      prevState = inst.state;
      prevContext = inst.context;
    }

    if (inst.componentWillUpdate) {
      inst.componentWillUpdate(nextProps, nextState, nextContext);
    }

    this._currentElement = nextElement;
    this._context = unmaskedContext;
    inst.props = nextProps;
    inst.state = nextState;
    inst.context = nextContext;

    this._updateRenderedComponent(transaction, unmaskedContext);

    if (hasComponentDidUpdate) {
      transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
    }
  },

  /**
   * Call the component's `render` method and update the DOM accordingly.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  _updateRenderedComponent: function (transaction, context) {
    var prevComponentInstance = this._renderedComponent;
    var prevRenderedElement = prevComponentInstance._currentElement;
    var nextRenderedElement = this._renderValidatedComponent();
    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
    } else {
      // These two IDs are actually the same! But nothing should rely on that.
      var thisID = this._rootNodeID;
      var prevComponentID = prevComponentInstance._rootNodeID;
      ReactReconciler.unmountComponent(prevComponentInstance);

      this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);
      var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, thisID, transaction, this._processChildContext(context));
      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
    }
  },

  /**
   * @protected
   */
  _replaceNodeWithMarkupByID: function (prevComponentID, nextMarkup) {
    ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
  },

  /**
   * @protected
   */
  _renderValidatedComponentWithoutOwnerOrContext: function () {
    var inst = this._instance;
    var renderedComponent = inst.render();
    if (process.env.NODE_ENV !== 'production') {
      // We allow auto-mocks to proceed as if they're returning null.
      if (typeof renderedComponent === 'undefined' && inst.render._isMockFunction) {
        // This is probably bad practice. Consider warning here and
        // deprecating this convenience.
        renderedComponent = null;
      }
    }

    return renderedComponent;
  },

  /**
   * @private
   */
  _renderValidatedComponent: function () {
    var renderedComponent;
    ReactCurrentOwner.current = this;
    try {
      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
    } finally {
      ReactCurrentOwner.current = null;
    }
    !(
    // TODO: An `isValidNode` function would probably be more appropriate
    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
    return renderedComponent;
  },

  /**
   * Lazily allocates the refs object and stores `component` as `ref`.
   *
   * @param {string} ref Reference name.
   * @param {component} component Component to store as `ref`.
   * @final
   * @private
   */
  attachRef: function (ref, component) {
    var inst = this.getPublicInstance();
    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : invariant(false) : undefined;
    var publicComponentInstance = component.getPublicInstance();
    if (process.env.NODE_ENV !== 'production') {
      var componentName = component && component.getName ? component.getName() : 'a component';
      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : undefined;
    }
    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
    refs[ref] = publicComponentInstance;
  },

  /**
   * Detaches a reference name.
   *
   * @param {string} ref Name to dereference.
   * @final
   * @private
   */
  detachRef: function (ref) {
    var refs = this.getPublicInstance().refs;
    delete refs[ref];
  },

  /**
   * Get a text description of the component that can be used to identify it
   * in error messages.
   * @return {string} The name or null.
   * @internal
   */
  getName: function () {
    var type = this._currentElement.type;
    var constructor = this._instance && this._instance.constructor;
    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
  },

  /**
   * Get the publicly accessible representation of this component - i.e. what
   * is exposed by refs and returned by render. Can be null for stateless
   * components.
   *
   * @return {ReactComponent} the public component instance.
   * @internal
   */
  getPublicInstance: function () {
    var inst = this._instance;
    if (inst instanceof StatelessComponent) {
      return null;
    }
    return inst;
  },

  // Stub
  _instantiateReactComponent: null

};

ReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {
  mountComponent: 'mountComponent',
  updateComponent: 'updateComponent',
  _renderValidatedComponent: '_renderValidatedComponent'
});

var ReactCompositeComponent = {

  Mixin: ReactCompositeComponentMixin

};

module.exports = ReactCompositeComponent;
}).call(this,require('_process'))

},{"./Object.assign":50,"./ReactComponentEnvironment":62,"./ReactCurrentOwner":64,"./ReactElement":82,"./ReactInstanceMap":92,"./ReactPerf":101,"./ReactPropTypeLocationNames":102,"./ReactPropTypeLocations":103,"./ReactReconciler":106,"./ReactUpdateQueue":115,"./shouldUpdateReactComponent":159,"_process":26,"fbjs/lib/emptyObject":171,"fbjs/lib/invariant":178,"fbjs/lib/warning":189}],64:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactCurrentOwner
 */

'use strict';

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;
},{}],65:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOM
 */

/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactDOMTextComponent = require('./ReactDOMTextComponent');
var ReactDefaultInjection = require('./ReactDefaultInjection');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactMount = require('./ReactMount');
var ReactPerf = require('./ReactPerf');
var ReactReconciler = require('./ReactReconciler');
var ReactUpdates = require('./ReactUpdates');
var ReactVersion = require('./ReactVersion');

var findDOMNode = require('./findDOMNode');
var renderSubtreeIntoContainer = require('./renderSubtreeIntoContainer');
var warning = require('fbjs/lib/warning');

ReactDefaultInjection.inject();

var render = ReactPerf.measure('React', 'render', ReactMount.render);

var React = {
  findDOMNode: findDOMNode,
  render: render,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  version: ReactVersion,

  /* eslint-disable camelcase */
  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
/* eslint-enable camelcase */
if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    CurrentOwner: ReactCurrentOwner,
    InstanceHandles: ReactInstanceHandles,
    Mount: ReactMount,
    Reconciler: ReactReconciler,
    TextComponent: ReactDOMTextComponent
  });
}

if (process.env.NODE_ENV !== 'production') {
  var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

    // First check if devtools is not installed
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
      // If we're in Chrome or Firefox, provide a download link if not installed.
      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
        console.debug('Download the React DevTools for a better development experience: ' + 'https://fb.me/react-devtools');
      }
    }

    // If we're in IE8, check to see if we are in compatibility mode and provide
    // information on preventing compatibility mode
    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : undefined;

    var expectedFeatures = [
    // shims
    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim,

    // shams
    Object.create, Object.freeze];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        console.error('One or more ES5 shim/shams expected by React are not available: ' + 'https://fb.me/react-warning-polyfills');
        break;
      }
    }
  }
}

module.exports = React;
}).call(this,require('_process'))

},{"./ReactCurrentOwner":64,"./ReactDOMTextComponent":76,"./ReactDefaultInjection":79,"./ReactInstanceHandles":91,"./ReactMount":95,"./ReactPerf":101,"./ReactReconciler":106,"./ReactUpdates":116,"./ReactVersion":117,"./findDOMNode":141,"./renderSubtreeIntoContainer":156,"_process":26,"fbjs/lib/ExecutionEnvironment":164,"fbjs/lib/warning":189}],66:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMButton
 */

'use strict';

var mouseListenerNames = {
  onClick: true,
  onDoubleClick: true,
  onMouseDown: true,
  onMouseMove: true,
  onMouseUp: true,

  onClickCapture: true,
  onDoubleClickCapture: true,
  onMouseDownCapture: true,
  onMouseMoveCapture: true,
  onMouseUpCapture: true
};

/**
 * Implements a <button> native component that does not receive mouse events
 * when `disabled` is set.
 */
var ReactDOMButton = {
  getNativeProps: function (inst, props, context) {
    if (!props.disabled) {
      return props;
    }

    // Copy the props, except the mouse listeners
    var nativeProps = {};
    for (var key in props) {
      if (props.hasOwnProperty(key) && !mouseListenerNames[key]) {
        nativeProps[key] = props[key];
      }
    }

    return nativeProps;
  }
};

module.exports = ReactDOMButton;
},{}],67:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMComponent
 * @typechecks static-only
 */

/* global hasOwnProperty:true */

'use strict';

var AutoFocusUtils = require('./AutoFocusUtils');
var CSSPropertyOperations = require('./CSSPropertyOperations');
var DOMProperty = require('./DOMProperty');
var DOMPropertyOperations = require('./DOMPropertyOperations');
var EventConstants = require('./EventConstants');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');
var ReactDOMButton = require('./ReactDOMButton');
var ReactDOMInput = require('./ReactDOMInput');
var ReactDOMOption = require('./ReactDOMOption');
var ReactDOMSelect = require('./ReactDOMSelect');
var ReactDOMTextarea = require('./ReactDOMTextarea');
var ReactMount = require('./ReactMount');
var ReactMultiChild = require('./ReactMultiChild');
var ReactPerf = require('./ReactPerf');
var ReactUpdateQueue = require('./ReactUpdateQueue');

var assign = require('./Object.assign');
var canDefineProperty = require('./canDefineProperty');
var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
var invariant = require('fbjs/lib/invariant');
var isEventSupported = require('./isEventSupported');
var keyOf = require('fbjs/lib/keyOf');
var setInnerHTML = require('./setInnerHTML');
var setTextContent = require('./setTextContent');
var shallowEqual = require('fbjs/lib/shallowEqual');
var validateDOMNesting = require('./validateDOMNesting');
var warning = require('fbjs/lib/warning');

var deleteListener = ReactBrowserEventEmitter.deleteListener;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = { 'string': true, 'number': true };

var CHILDREN = keyOf({ children: null });
var STYLE = keyOf({ style: null });
var HTML = keyOf({ __html: null });

var ELEMENT_NODE_TYPE = 1;

function getDeclarationErrorAddendum(internalInstance) {
  if (internalInstance) {
    var owner = internalInstance._currentElement._owner || null;
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' This DOM node was rendered by `' + name + '`.';
      }
    }
  }
  return '';
}

var legacyPropsDescriptor;
if (process.env.NODE_ENV !== 'production') {
  legacyPropsDescriptor = {
    props: {
      enumerable: false,
      get: function () {
        var component = this._reactInternalComponent;
        process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .props of a DOM node; instead, ' + 'recreate the props as `render` did originally or read the DOM ' + 'properties/attributes directly from this node (e.g., ' + 'this.refs.box.className).%s', getDeclarationErrorAddendum(component)) : undefined;
        return component._currentElement.props;
      }
    }
  };
}

function legacyGetDOMNode() {
  if (process.env.NODE_ENV !== 'production') {
    var component = this._reactInternalComponent;
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .getDOMNode() of a DOM node; ' + 'instead, use the node directly.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
  return this;
}

function legacyIsMounted() {
  var component = this._reactInternalComponent;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .isMounted() of a DOM node.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
  return !!component;
}

function legacySetStateEtc() {
  if (process.env.NODE_ENV !== 'production') {
    var component = this._reactInternalComponent;
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setState(), .replaceState(), or ' + '.forceUpdate() of a DOM node. This is a no-op.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
}

function legacySetProps(partialProps, callback) {
  var component = this._reactInternalComponent;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
  if (!component) {
    return;
  }
  ReactUpdateQueue.enqueueSetPropsInternal(component, partialProps);
  if (callback) {
    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
  }
}

function legacyReplaceProps(partialProps, callback) {
  var component = this._reactInternalComponent;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .replaceProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
  }
  if (!component) {
    return;
  }
  ReactUpdateQueue.enqueueReplacePropsInternal(component, partialProps);
  if (callback) {
    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
  }
}

function friendlyStringify(obj) {
  if (typeof obj === 'object') {
    if (Array.isArray(obj)) {
      return '[' + obj.map(friendlyStringify).join(', ') + ']';
    } else {
      var pairs = [];
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
        }
      }
      return '{' + pairs.join(', ') + '}';
    }
  } else if (typeof obj === 'string') {
    return JSON.stringify(obj);
  } else if (typeof obj === 'function') {
    return '[function object]';
  }
  // Differs from JSON.stringify in that undefined becauses undefined and that
  // inf and nan don't become null
  return String(obj);
}

var styleMutationWarning = {};

function checkAndWarnForMutatedStyle(style1, style2, component) {
  if (style1 == null || style2 == null) {
    return;
  }
  if (shallowEqual(style1, style2)) {
    return;
  }

  var componentName = component._tag;
  var owner = component._currentElement._owner;
  var ownerName;
  if (owner) {
    ownerName = owner.getName();
  }

  var hash = ownerName + '|' + componentName;

  if (styleMutationWarning.hasOwnProperty(hash)) {
    return;
  }

  styleMutationWarning[hash] = true;

  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : undefined;
}

/**
 * @param {object} component
 * @param {?object} props
 */
function assertValidProps(component, props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  if (process.env.NODE_ENV !== 'production') {
    if (voidElementTags[component._tag]) {
      process.env.NODE_ENV !== 'production' ? warning(props.children == null && props.dangerouslySetInnerHTML == null, '%s is a void element tag and must not have `children` or ' + 'use `props.dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : undefined;
    }
  }
  if (props.dangerouslySetInnerHTML != null) {
    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : invariant(false) : undefined;
    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.') : invariant(false) : undefined;
  }
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : undefined;
    process.env.NODE_ENV !== 'production' ? warning(!props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : undefined;
  }
  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, ' + 'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' + 'using JSX.%s', getDeclarationErrorAddendum(component)) : invariant(false) : undefined;
}

function enqueuePutListener(id, registrationName, listener, transaction) {
  if (process.env.NODE_ENV !== 'production') {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : undefined;
  }
  var container = ReactMount.findReactContainerForID(id);
  if (container) {
    var doc = container.nodeType === ELEMENT_NODE_TYPE ? container.ownerDocument : container;
    listenTo(registrationName, doc);
  }
  transaction.getReactMountReady().enqueue(putListener, {
    id: id,
    registrationName: registrationName,
    listener: listener
  });
}

function putListener() {
  var listenerToPut = this;
  ReactBrowserEventEmitter.putListener(listenerToPut.id, listenerToPut.registrationName, listenerToPut.listener);
}

// There are so many media events, it makes sense to just
// maintain a list rather than create a `trapBubbledEvent` for each
var mediaEvents = {
  topAbort: 'abort',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTimeUpdate: 'timeupdate',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting'
};

function trapBubbledEventsLocal() {
  var inst = this;
  // If a component renders to null or if another component fatals and causes
  // the state of the tree to be corrupted, `node` here can be null.
  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : invariant(false) : undefined;
  var node = ReactMount.getNode(inst._rootNodeID);
  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : invariant(false) : undefined;

  switch (inst._tag) {
    case 'iframe':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
      break;
    case 'video':
    case 'audio':

      inst._wrapperState.listeners = [];
      // create listener for each media event
      for (var event in mediaEvents) {
        if (mediaEvents.hasOwnProperty(event)) {
          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));
        }
      }

      break;
    case 'img':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
      break;
    case 'form':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];
      break;
  }
}

function mountReadyInputWrapper() {
  ReactDOMInput.mountReadyWrapper(this);
}

function postUpdateSelectWrapper() {
  ReactDOMSelect.postUpdateWrapper(this);
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special cased tags.

var omittedCloseTags = {
  'area': true,
  'base': true,
  'br': true,
  'col': true,
  'embed': true,
  'hr': true,
  'img': true,
  'input': true,
  'keygen': true,
  'link': true,
  'meta': true,
  'param': true,
  'source': true,
  'track': true,
  'wbr': true
};

// NOTE: menuitem's close tag should be omitted, but that causes problems.
var newlineEatingTags = {
  'listing': true,
  'pre': true,
  'textarea': true
};

// For HTML, certain tags cannot have children. This has the same purpose as
// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = assign({
  'menuitem': true
}, omittedCloseTags);

// We accept any tag to be rendered but since this gets injected into arbitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = ({}).hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : invariant(false) : undefined;
    validatedTagCache[tag] = true;
  }
}

function processChildContextDev(context, inst) {
  // Pass down our tag name to child components for validation purposes
  context = assign({}, context);
  var info = context[validateDOMNesting.ancestorInfoContextKey];
  context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(info, inst._tag, inst);
  return context;
}

function isCustomComponent(tagName, props) {
  return tagName.indexOf('-') >= 0 || props.is != null;
}

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(tag) {
  validateDangerousTag(tag);
  this._tag = tag.toLowerCase();
  this._renderedChildren = null;
  this._previousStyle = null;
  this._previousStyleCopy = null;
  this._rootNodeID = null;
  this._wrapperState = null;
  this._topLevelWrapper = null;
  this._nodeWithLegacyProperties = null;
  if (process.env.NODE_ENV !== 'production') {
    this._unprocessedContextDev = null;
    this._processedContextDev = null;
  }
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {

  construct: function (element) {
    this._currentElement = element;
  },

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {string} rootID The root DOM ID for this node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   * @return {string} The computed markup.
   */
  mountComponent: function (rootID, transaction, context) {
    this._rootNodeID = rootID;

    var props = this._currentElement.props;

    switch (this._tag) {
      case 'iframe':
      case 'img':
      case 'form':
      case 'video':
      case 'audio':
        this._wrapperState = {
          listeners: null
        };
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'button':
        props = ReactDOMButton.getNativeProps(this, props, context);
        break;
      case 'input':
        ReactDOMInput.mountWrapper(this, props, context);
        props = ReactDOMInput.getNativeProps(this, props, context);
        break;
      case 'option':
        ReactDOMOption.mountWrapper(this, props, context);
        props = ReactDOMOption.getNativeProps(this, props, context);
        break;
      case 'select':
        ReactDOMSelect.mountWrapper(this, props, context);
        props = ReactDOMSelect.getNativeProps(this, props, context);
        context = ReactDOMSelect.processChildContext(this, props, context);
        break;
      case 'textarea':
        ReactDOMTextarea.mountWrapper(this, props, context);
        props = ReactDOMTextarea.getNativeProps(this, props, context);
        break;
    }

    assertValidProps(this, props);
    if (process.env.NODE_ENV !== 'production') {
      if (context[validateDOMNesting.ancestorInfoContextKey]) {
        validateDOMNesting(this._tag, this, context[validateDOMNesting.ancestorInfoContextKey]);
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      this._unprocessedContextDev = context;
      this._processedContextDev = processChildContextDev(context, this);
      context = this._processedContextDev;
    }

    var mountImage;
    if (transaction.useCreateElement) {
      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
      var el = ownerDocument.createElement(this._currentElement.type);
      DOMPropertyOperations.setAttributeForID(el, this._rootNodeID);
      // Populate node cache
      ReactMount.getID(el);
      this._updateDOMProperties({}, props, transaction, el);
      this._createInitialChildren(transaction, props, context, el);
      mountImage = el;
    } else {
      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
      var tagContent = this._createContentMarkup(transaction, props, context);
      if (!tagContent && omittedCloseTags[this._tag]) {
        mountImage = tagOpen + '/>';
      } else {
        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
      }
    }

    switch (this._tag) {
      case 'input':
        transaction.getReactMountReady().enqueue(mountReadyInputWrapper, this);
      // falls through
      case 'button':
      case 'select':
      case 'textarea':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
    }

    return mountImage;
  },

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
    var ret = '<' + this._currentElement.type;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        if (propValue) {
          enqueuePutListener(this._rootNodeID, propKey, propValue, transaction);
        }
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            if (process.env.NODE_ENV !== 'production') {
              // See `_updateDOMProperties`. style block
              this._previousStyle = propValue;
            }
            propValue = this._previousStyleCopy = assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
        }
        var markup = null;
        if (this._tag != null && isCustomComponent(this._tag, props)) {
          if (propKey !== CHILDREN) {
            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
          }
        } else {
          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        }
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret;
    }

    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
    return ret + ' ' + markupForID;
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @param {object} context
   * @return {string} Content markup.
   */
  _createContentMarkup: function (transaction, props, context) {
    var ret = '';

    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        ret = innerHTML.__html;
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        // TODO: Validate that text is allowed as a child of this node
        ret = escapeTextContentForBrowser(contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        ret = mountImages.join('');
      }
    }
    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
      // text/html ignores the first character in these tags if it's a newline
      // Prefer to break application/xml over text/html (for now) by adding
      // a newline specifically to get eaten by the parser. (Alternately for
      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
      // \r is normalized out by HTMLTextAreaElement#value.)
      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
      // See: Parsing of "textarea" "listing" and "pre" elements
      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
      return '\n' + ret;
    } else {
      return ret;
    }
  },

  _createInitialChildren: function (transaction, props, context, el) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        setInnerHTML(el, innerHTML.__html);
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        // TODO: Validate that text is allowed as a child of this node
        setTextContent(el, contentToUse);
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        for (var i = 0; i < mountImages.length; i++) {
          el.appendChild(mountImages[i]);
        }
      }
    }
  },

  /**
   * Receives a next element and updates the component.
   *
   * @internal
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   */
  receiveComponent: function (nextElement, transaction, context) {
    var prevElement = this._currentElement;
    this._currentElement = nextElement;
    this.updateComponent(transaction, prevElement, nextElement, context);
  },

  /**
   * Updates a native DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @param {ReactElement} nextElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevElement, nextElement, context) {
    var lastProps = prevElement.props;
    var nextProps = this._currentElement.props;

    switch (this._tag) {
      case 'button':
        lastProps = ReactDOMButton.getNativeProps(this, lastProps);
        nextProps = ReactDOMButton.getNativeProps(this, nextProps);
        break;
      case 'input':
        ReactDOMInput.updateWrapper(this);
        lastProps = ReactDOMInput.getNativeProps(this, lastProps);
        nextProps = ReactDOMInput.getNativeProps(this, nextProps);
        break;
      case 'option':
        lastProps = ReactDOMOption.getNativeProps(this, lastProps);
        nextProps = ReactDOMOption.getNativeProps(this, nextProps);
        break;
      case 'select':
        lastProps = ReactDOMSelect.getNativeProps(this, lastProps);
        nextProps = ReactDOMSelect.getNativeProps(this, nextProps);
        break;
      case 'textarea':
        ReactDOMTextarea.updateWrapper(this);
        lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);
        nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);
        break;
    }

    if (process.env.NODE_ENV !== 'production') {
      // If the context is reference-equal to the old one, pass down the same
      // processed object so the update bailout in ReactReconciler behaves
      // correctly (and identically in dev and prod). See #5005.
      if (this._unprocessedContextDev !== context) {
        this._unprocessedContextDev = context;
        this._processedContextDev = processChildContextDev(context, this);
      }
      context = this._processedContextDev;
    }

    assertValidProps(this, nextProps);
    this._updateDOMProperties(lastProps, nextProps, transaction, null);
    this._updateDOMChildren(lastProps, nextProps, transaction, context);

    if (!canDefineProperty && this._nodeWithLegacyProperties) {
      this._nodeWithLegacyProperties.props = nextProps;
    }

    if (this._tag === 'select') {
      // <select> value update needs to occur after <option> children
      // reconciliation
      transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
    }
  },

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {ReactReconcileTransaction} transaction
   * @param {?DOMElement} node
   */
  _updateDOMProperties: function (lastProps, nextProps, transaction, node) {
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = this._previousStyleCopy;
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
        this._previousStyleCopy = null;
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (lastProps[propKey]) {
          // Only call deleteListener if there was a listener previously or
          // else willDeleteListener gets called when there wasn't actually a
          // listener (e.g., onClick={null})
          deleteListener(this._rootNodeID, propKey);
        }
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        if (!node) {
          node = ReactMount.getNode(this._rootNodeID);
        }
        DOMPropertyOperations.deleteValueForProperty(node, propKey);
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps[propKey];
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          if (process.env.NODE_ENV !== 'production') {
            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
            this._previousStyle = nextProp;
          }
          nextProp = this._previousStyleCopy = assign({}, nextProp);
        } else {
          this._previousStyleCopy = null;
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (nextProp) {
          enqueuePutListener(this._rootNodeID, propKey, nextProp, transaction);
        } else if (lastProp) {
          deleteListener(this._rootNodeID, propKey);
        }
      } else if (isCustomComponent(this._tag, nextProps)) {
        if (!node) {
          node = ReactMount.getNode(this._rootNodeID);
        }
        if (propKey === CHILDREN) {
          nextProp = null;
        }
        DOMPropertyOperations.setValueForAttribute(node, propKey, nextProp);
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        if (!node) {
          node = ReactMount.getNode(this._rootNodeID);
        }
        // If we're updating to null or undefined, we should remove the property
        // from the DOM node instead of inadvertantly setting to a string. This
        // brings us in line with the same behavior we have on initial render.
        if (nextProp != null) {
          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
        } else {
          DOMPropertyOperations.deleteValueForProperty(node, propKey);
        }
      }
    }
    if (styleUpdates) {
      if (!node) {
        node = ReactMount.getNode(this._rootNodeID);
      }
      CSSPropertyOperations.setValueForStyles(node, styleUpdates);
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   */
  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction, context);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        this.updateMarkup('' + nextHtml);
      }
    } else if (nextChildren != null) {
      this.updateChildren(nextChildren, transaction, context);
    }
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function () {
    switch (this._tag) {
      case 'iframe':
      case 'img':
      case 'form':
      case 'video':
      case 'audio':
        var listeners = this._wrapperState.listeners;
        if (listeners) {
          for (var i = 0; i < listeners.length; i++) {
            listeners[i].remove();
          }
        }
        break;
      case 'input':
        ReactDOMInput.unmountWrapper(this);
        break;
      case 'html':
      case 'head':
      case 'body':
        /**
         * Components like <html> <head> and <body> can't be removed or added
         * easily in a cross-browser way, however it's valuable to be able to
         * take advantage of React's reconciliation for styling and <title>
         * management. So we just document it and throw in dangerous cases.
         */
        !false ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, ' + '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 'single top-level component that never unmounts render these ' + 'elements.', this._tag) : invariant(false) : undefined;
        break;
    }

    this.unmountChildren();
    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
    this._rootNodeID = null;
    this._wrapperState = null;
    if (this._nodeWithLegacyProperties) {
      var node = this._nodeWithLegacyProperties;
      node._reactInternalComponent = null;
      this._nodeWithLegacyProperties = null;
    }
  },

  getPublicInstance: function () {
    if (!this._nodeWithLegacyProperties) {
      var node = ReactMount.getNode(this._rootNodeID);

      node._reactInternalComponent = this;
      node.getDOMNode = legacyGetDOMNode;
      node.isMounted = legacyIsMounted;
      node.setState = legacySetStateEtc;
      node.replaceState = legacySetStateEtc;
      node.forceUpdate = legacySetStateEtc;
      node.setProps = legacySetProps;
      node.replaceProps = legacyReplaceProps;

      if (process.env.NODE_ENV !== 'production') {
        if (canDefineProperty) {
          Object.defineProperties(node, legacyPropsDescriptor);
        } else {
          // updateComponent will update this property on subsequent renders
          node.props = this._currentElement.props;
        }
      } else {
        // updateComponent will update this property on subsequent renders
        node.props = this._currentElement.props;
      }

      this._nodeWithLegacyProperties = node;
    }
    return this._nodeWithLegacyProperties;
  }

};

ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
  mountComponent: 'mountComponent',
  updateComponent: 'updateComponent'
});

assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

module.exports = ReactDOMComponent;
}).call(this,require('_process'))

},{"./AutoFocusUtils":29,"./CSSPropertyOperations":32,"./DOMProperty":37,"./DOMPropertyOperations":38,"./EventConstants":42,"./Object.assign":50,"./ReactBrowserEventEmitter":54,"./ReactComponentBrowserEnvironment":61,"./ReactDOMButton":66,"./ReactDOMInput":71,"./ReactDOMOption":72,"./ReactDOMSelect":73,"./ReactDOMTextarea":77,"./ReactMount":95,"./ReactMultiChild":96,"./ReactPerf":101,"./ReactUpdateQueue":115,"./canDefineProperty":137,"./escapeTextContentForBrowser":140,"./isEventSupported":152,"./setInnerHTML":157,"./setTextContent":158,"./validateDOMNesting":161,"_process":26,"fbjs/lib/invariant":178,"fbjs/lib/keyOf":182,"fbjs/lib/shallowEqual":187,"fbjs/lib/warning":189}],68:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMFactories
 * @typechecks static-only
 */

'use strict';

var ReactElement = require('./ReactElement');
var ReactElementValidator = require('./ReactElementValidator');

var mapObject = require('fbjs/lib/mapObject');

/**
 * Create a factory that creates HTML tag elements.
 *
 * @param {string} tag Tag name (e.g. `div`).
 * @private
 */
function createDOMFactory(tag) {
  if (process.env.NODE_ENV !== 'production') {
    return ReactElementValidator.createFactory(tag);
  }
  return ReactElement.createFactory(tag);
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOMFactories = mapObject({
  a: 'a',
  abbr: 'abbr',
  address: 'address',
  area: 'area',
  article: 'article',
  aside: 'aside',
  audio: 'audio',
  b: 'b',
  base: 'base',
  bdi: 'bdi',
  bdo: 'bdo',
  big: 'big',
  blockquote: 'blockquote',
  body: 'body',
  br: 'br',
  button: 'button',
  canvas: 'canvas',
  caption: 'caption',
  cite: 'cite',
  code: 'code',
  col: 'col',
  colgroup: 'colgroup',
  data: 'data',
  datalist: 'datalist',
  dd: 'dd',
  del: 'del',
  details: 'details',
  dfn: 'dfn',
  dialog: 'dialog',
  div: 'div',
  dl: 'dl',
  dt: 'dt',
  em: 'em',
  embed: 'embed',
  fieldset: 'fieldset',
  figcaption: 'figcaption',
  figure: 'figure',
  footer: 'footer',
  form: 'form',
  h1: 'h1',
  h2: 'h2',
  h3: 'h3',
  h4: 'h4',
  h5: 'h5',
  h6: 'h6',
  head: 'head',
  header: 'header',
  hgroup: 'hgroup',
  hr: 'hr',
  html: 'html',
  i: 'i',
  iframe: 'iframe',
  img: 'img',
  input: 'input',
  ins: 'ins',
  kbd: 'kbd',
  keygen: 'keygen',
  label: 'label',
  legend: 'legend',
  li: 'li',
  link: 'link',
  main: 'main',
  map: 'map',
  mark: 'mark',
  menu: 'menu',
  menuitem: 'menuitem',
  meta: 'meta',
  meter: 'meter',
  nav: 'nav',
  noscript: 'noscript',
  object: 'object',
  ol: 'ol',
  optgroup: 'optgroup',
  option: 'option',
  output: 'output',
  p: 'p',
  param: 'param',
  picture: 'picture',
  pre: 'pre',
  progress: 'progress',
  q: 'q',
  rp: 'rp',
  rt: 'rt',
  ruby: 'ruby',
  s: 's',
  samp: 'samp',
  script: 'script',
  section: 'section',
  select: 'select',
  small: 'small',
  source: 'source',
  span: 'span',
  strong: 'strong',
  style: 'style',
  sub: 'sub',
  summary: 'summary',
  sup: 'sup',
  table: 'table',
  tbody: 'tbody',
  td: 'td',
  textarea: 'textarea',
  tfoot: 'tfoot',
  th: 'th',
  thead: 'thead',
  time: 'time',
  title: 'title',
  tr: 'tr',
  track: 'track',
  u: 'u',
  ul: 'ul',
  'var': 'var',
  video: 'video',
  wbr: 'wbr',

  // SVG
  circle: 'circle',
  clipPath: 'clipPath',
  defs: 'defs',
  ellipse: 'ellipse',
  g: 'g',
  image: 'image',
  line: 'line',
  linearGradient: 'linearGradient',
  mask: 'mask',
  path: 'path',
  pattern: 'pattern',
  polygon: 'polygon',
  polyline: 'polyline',
  radialGradient: 'radialGradient',
  rect: 'rect',
  stop: 'stop',
  svg: 'svg',
  text: 'text',
  tspan: 'tspan'

}, createDOMFactory);

module.exports = ReactDOMFactories;
}).call(this,require('_process'))

},{"./ReactElement":82,"./ReactElementValidator":83,"_process":26,"fbjs/lib/mapObject":183}],69:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMFeatureFlags
 */

'use strict';

var ReactDOMFeatureFlags = {
  useCreateElement: false
};

module.exports = ReactDOMFeatureFlags;
},{}],70:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMIDOperations
 * @typechecks static-only
 */

'use strict';

var DOMChildrenOperations = require('./DOMChildrenOperations');
var DOMPropertyOperations = require('./DOMPropertyOperations');
var ReactMount = require('./ReactMount');
var ReactPerf = require('./ReactPerf');

var invariant = require('fbjs/lib/invariant');

/**
 * Errors for properties that should not be updated with `updatePropertyByID()`.
 *
 * @type {object}
 * @private
 */
var INVALID_PROPERTY_ERRORS = {
  dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
  style: '`style` must be set using `updateStylesByID()`.'
};

/**
 * Operations used to process updates to DOM nodes.
 */
var ReactDOMIDOperations = {

  /**
   * Updates a DOM node with new property values. This should only be used to
   * update DOM properties in `DOMProperty`.
   *
   * @param {string} id ID of the node to update.
   * @param {string} name A valid property name, see `DOMProperty`.
   * @param {*} value New value of the property.
   * @internal
   */
  updatePropertyByID: function (id, name, value) {
    var node = ReactMount.getNode(id);
    !!INVALID_PROPERTY_ERRORS.hasOwnProperty(name) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(false) : undefined;

    // If we're updating to null or undefined, we should remove the property
    // from the DOM node instead of inadvertantly setting to a string. This
    // brings us in line with the same behavior we have on initial render.
    if (value != null) {
      DOMPropertyOperations.setValueForProperty(node, name, value);
    } else {
      DOMPropertyOperations.deleteValueForProperty(node, name);
    }
  },

  /**
   * Replaces a DOM node that exists in the document with markup.
   *
   * @param {string} id ID of child to be replaced.
   * @param {string} markup Dangerous markup to inject in place of child.
   * @internal
   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
   */
  dangerouslyReplaceNodeWithMarkupByID: function (id, markup) {
    var node = ReactMount.getNode(id);
    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
  },

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @param {array<string>} markup List of markup strings.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: function (updates, markup) {
    for (var i = 0; i < updates.length; i++) {
      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
    }
    DOMChildrenOperations.processUpdates(updates, markup);
  }
};

ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
});

module.exports = ReactDOMIDOperations;
}).call(this,require('_process'))

},{"./DOMChildrenOperations":36,"./DOMPropertyOperations":38,"./ReactMount":95,"./ReactPerf":101,"_process":26,"fbjs/lib/invariant":178}],71:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMInput
 */

'use strict';

var ReactDOMIDOperations = require('./ReactDOMIDOperations');
var LinkedValueUtils = require('./LinkedValueUtils');
var ReactMount = require('./ReactMount');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');

var instancesByReactID = {};

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMInput.updateWrapper(this);
  }
}

/**
 * Implements an <input> native component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = {
  getNativeProps: function (inst, props, context) {
    var value = LinkedValueUtils.getValue(props);
    var checked = LinkedValueUtils.getChecked(props);

    var nativeProps = assign({}, props, {
      defaultChecked: undefined,
      defaultValue: undefined,
      value: value != null ? value : inst._wrapperState.initialValue,
      checked: checked != null ? checked : inst._wrapperState.initialChecked,
      onChange: inst._wrapperState.onChange
    });

    return nativeProps;
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
    }

    var defaultValue = props.defaultValue;
    inst._wrapperState = {
      initialChecked: props.defaultChecked || false,
      initialValue: defaultValue != null ? defaultValue : null,
      onChange: _handleChange.bind(inst)
    };
  },

  mountReadyWrapper: function (inst) {
    // Can't be in mountWrapper or else server rendering leaks.
    instancesByReactID[inst._rootNodeID] = inst;
  },

  unmountWrapper: function (inst) {
    delete instancesByReactID[inst._rootNodeID];
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;

    // TODO: Shouldn't this be getChecked(props)?
    var checked = props.checked;
    if (checked != null) {
      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);
    }

    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;

  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  // Here we use asap to wait until all updates have propagated, which
  // is important when using controlled components within layers:
  // https://github.com/facebook/react/issues/1698
  ReactUpdates.asap(forceUpdateIfMounted, this);

  var name = props.name;
  if (props.type === 'radio' && name != null) {
    var rootNode = ReactMount.getNode(this._rootNodeID);
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    }

    // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form, let's just use the global
    // `querySelectorAll` to ensure we don't miss anything.
    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];
      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      }
      // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React with non-React.
      var otherID = ReactMount.getID(otherNode);
      !otherID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;
      var otherInstance = instancesByReactID[otherID];
      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;
      // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.
      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
    }
  }

  return returnValue;
}

module.exports = ReactDOMInput;
}).call(this,require('_process'))

},{"./LinkedValueUtils":49,"./Object.assign":50,"./ReactDOMIDOperations":70,"./ReactMount":95,"./ReactUpdates":116,"_process":26,"fbjs/lib/invariant":178}],72:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMOption
 */

'use strict';

var ReactChildren = require('./ReactChildren');
var ReactDOMSelect = require('./ReactDOMSelect');

var assign = require('./Object.assign');
var warning = require('fbjs/lib/warning');

var valueContextKey = ReactDOMSelect.valueContextKey;

/**
 * Implements an <option> native component that warns when `selected` is set.
 */
var ReactDOMOption = {
  mountWrapper: function (inst, props, context) {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : undefined;
    }

    // Look up whether this option is 'selected' via context
    var selectValue = context[valueContextKey];

    // If context key is null (e.g., no specified value or after initial mount)
    // or missing (e.g., for <datalist>), we don't change props.selected
    var selected = null;
    if (selectValue != null) {
      selected = false;
      if (Array.isArray(selectValue)) {
        // multiple
        for (var i = 0; i < selectValue.length; i++) {
          if ('' + selectValue[i] === '' + props.value) {
            selected = true;
            break;
          }
        }
      } else {
        selected = '' + selectValue === '' + props.value;
      }
    }

    inst._wrapperState = { selected: selected };
  },

  getNativeProps: function (inst, props, context) {
    var nativeProps = assign({ selected: undefined, children: undefined }, props);

    // Read state only from initial mount because <select> updates value
    // manually; we need the initial state only for server rendering
    if (inst._wrapperState.selected != null) {
      nativeProps.selected = inst._wrapperState.selected;
    }

    var content = '';

    // Flatten children and warn if they aren't strings or numbers;
    // invalid types are ignored.
    ReactChildren.forEach(props.children, function (child) {
      if (child == null) {
        return;
      }
      if (typeof child === 'string' || typeof child === 'number') {
        content += child;
      } else {
        process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : undefined;
      }
    });

    nativeProps.children = content;
    return nativeProps;
  }

};

module.exports = ReactDOMOption;
}).call(this,require('_process'))

},{"./Object.assign":50,"./ReactChildren":58,"./ReactDOMSelect":73,"_process":26,"fbjs/lib/warning":189}],73:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelect
 */

'use strict';

var LinkedValueUtils = require('./LinkedValueUtils');
var ReactMount = require('./ReactMount');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var warning = require('fbjs/lib/warning');

var valueContextKey = '__ReactDOMSelect_value$' + Math.random().toString(36).slice(2);

function updateOptionsIfPendingUpdateAndMounted() {
  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
    this._wrapperState.pendingUpdate = false;

    var props = this._currentElement.props;
    var value = LinkedValueUtils.getValue(props);

    if (value != null) {
      updateOptions(this, props, value);
    }
  }
}

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

var valuePropNames = ['value', 'defaultValue'];

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function checkSelectPropTypes(inst, props) {
  var owner = inst._currentElement._owner;
  LinkedValueUtils.checkPropTypes('select', props, owner);

  for (var i = 0; i < valuePropNames.length; i++) {
    var propName = valuePropNames[i];
    if (props[propName] == null) {
      continue;
    }
    if (props.multiple) {
      process.env.NODE_ENV !== 'production' ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
    } else {
      process.env.NODE_ENV !== 'production' ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
    }
  }
}

/**
 * @param {ReactDOMComponent} inst
 * @param {boolean} multiple
 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
 * @private
 */
function updateOptions(inst, multiple, propValue) {
  var selectedValue, i;
  var options = ReactMount.getNode(inst._rootNodeID).options;

  if (multiple) {
    selectedValue = {};
    for (i = 0; i < propValue.length; i++) {
      selectedValue['' + propValue[i]] = true;
    }
    for (i = 0; i < options.length; i++) {
      var selected = selectedValue.hasOwnProperty(options[i].value);
      if (options[i].selected !== selected) {
        options[i].selected = selected;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    selectedValue = '' + propValue;
    for (i = 0; i < options.length; i++) {
      if (options[i].value === selectedValue) {
        options[i].selected = true;
        return;
      }
    }
    if (options.length) {
      options[0].selected = true;
    }
  }
}

/**
 * Implements a <select> native component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = {
  valueContextKey: valueContextKey,

  getNativeProps: function (inst, props, context) {
    return assign({}, props, {
      onChange: inst._wrapperState.onChange,
      value: undefined
    });
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      checkSelectPropTypes(inst, props);
    }

    var value = LinkedValueUtils.getValue(props);
    inst._wrapperState = {
      pendingUpdate: false,
      initialValue: value != null ? value : props.defaultValue,
      onChange: _handleChange.bind(inst),
      wasMultiple: Boolean(props.multiple)
    };
  },

  processChildContext: function (inst, props, context) {
    // Pass down initial value so initial generated markup has correct
    // `selected` attributes
    var childContext = assign({}, context);
    childContext[valueContextKey] = inst._wrapperState.initialValue;
    return childContext;
  },

  postUpdateWrapper: function (inst) {
    var props = inst._currentElement.props;

    // After the initial mount, we control selected-ness manually so don't pass
    // the context value down
    inst._wrapperState.initialValue = undefined;

    var wasMultiple = inst._wrapperState.wasMultiple;
    inst._wrapperState.wasMultiple = Boolean(props.multiple);

    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      inst._wrapperState.pendingUpdate = false;
      updateOptions(inst, Boolean(props.multiple), value);
    } else if (wasMultiple !== Boolean(props.multiple)) {
      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
      if (props.defaultValue != null) {
        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
      } else {
        // Revert the select back to its default unselected state.
        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
      }
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  this._wrapperState.pendingUpdate = true;
  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
  return returnValue;
}

module.exports = ReactDOMSelect;
}).call(this,require('_process'))

},{"./LinkedValueUtils":49,"./Object.assign":50,"./ReactMount":95,"./ReactUpdates":116,"_process":26,"fbjs/lib/warning":189}],74:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMSelection
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var getNodeForCharacterOffset = require('./getNodeForCharacterOffset');
var getTextContentAccessor = require('./getTextContentAccessor');

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // In Firefox, range.startContainer and range.endContainer can be "anonymous
  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
  // divs do not seem to expose properties, triggering a "Permission denied
  // error" if any of its properties are accessed. The only seemingly possible
  // way to avoid erroring is to access a property that typically works for
  // non-anonymous divs and catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
  try {
    /* eslint-disable no-unused-expressions */
    currentRange.startContainer.nodeType;
    currentRange.endContainer.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (typeof offsets.end === 'undefined') {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;
},{"./getNodeForCharacterOffset":149,"./getTextContentAccessor":150,"fbjs/lib/ExecutionEnvironment":164}],75:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMServer
 */

'use strict';

var ReactDefaultInjection = require('./ReactDefaultInjection');
var ReactServerRendering = require('./ReactServerRendering');
var ReactVersion = require('./ReactVersion');

ReactDefaultInjection.inject();

var ReactDOMServer = {
  renderToString: ReactServerRendering.renderToString,
  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
  version: ReactVersion
};

module.exports = ReactDOMServer;
},{"./ReactDefaultInjection":79,"./ReactServerRendering":110,"./ReactVersion":117}],76:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextComponent
 * @typechecks static-only
 */

'use strict';

var DOMChildrenOperations = require('./DOMChildrenOperations');
var DOMPropertyOperations = require('./DOMPropertyOperations');
var ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');
var ReactMount = require('./ReactMount');

var assign = require('./Object.assign');
var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
var setTextContent = require('./setTextContent');
var validateDOMNesting = require('./validateDOMNesting');

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings in elements so that they can undergo
 * the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactDOMTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactDOMTextComponent = function (props) {
  // This constructor and its argument is currently used by mocks.
};

assign(ReactDOMTextComponent.prototype, {

  /**
   * @param {ReactText} text
   * @internal
   */
  construct: function (text) {
    // TODO: This is really a ReactText (ReactNode), not a ReactElement
    this._currentElement = text;
    this._stringText = '' + text;

    // Properties
    this._rootNodeID = null;
    this._mountIndex = 0;
  },

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function (rootID, transaction, context) {
    if (process.env.NODE_ENV !== 'production') {
      if (context[validateDOMNesting.ancestorInfoContextKey]) {
        validateDOMNesting('span', null, context[validateDOMNesting.ancestorInfoContextKey]);
      }
    }

    this._rootNodeID = rootID;
    if (transaction.useCreateElement) {
      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
      var el = ownerDocument.createElement('span');
      DOMPropertyOperations.setAttributeForID(el, rootID);
      // Populate node cache
      ReactMount.getID(el);
      setTextContent(el, this._stringText);
      return el;
    } else {
      var escapedText = escapeTextContentForBrowser(this._stringText);

      if (transaction.renderToStaticMarkup) {
        // Normally we'd wrap this in a `span` for the reasons stated above, but
        // since this is a situation where React won't take over (static pages),
        // we can simply return the text as it is.
        return escapedText;
      }

      return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';
    }
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {ReactText} nextText The next text content
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function (nextText, transaction) {
    if (nextText !== this._currentElement) {
      this._currentElement = nextText;
      var nextStringText = '' + nextText;
      if (nextStringText !== this._stringText) {
        // TODO: Save this as pending props and use performUpdateIfNecessary
        // and/or updateComponent to do the actual update for consistency with
        // other component types?
        this._stringText = nextStringText;
        var node = ReactMount.getNode(this._rootNodeID);
        DOMChildrenOperations.updateTextContent(node, nextStringText);
      }
    }
  },

  unmountComponent: function () {
    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
  }

});

module.exports = ReactDOMTextComponent;
}).call(this,require('_process'))

},{"./DOMChildrenOperations":36,"./DOMPropertyOperations":38,"./Object.assign":50,"./ReactComponentBrowserEnvironment":61,"./ReactMount":95,"./escapeTextContentForBrowser":140,"./setTextContent":158,"./validateDOMNesting":161,"_process":26}],77:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDOMTextarea
 */

'use strict';

var LinkedValueUtils = require('./LinkedValueUtils');
var ReactDOMIDOperations = require('./ReactDOMIDOperations');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMTextarea.updateWrapper(this);
  }
}

/**
 * Implements a <textarea> native component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = {
  getNativeProps: function (inst, props, context) {
    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.
    var nativeProps = assign({}, props, {
      defaultValue: undefined,
      value: undefined,
      children: inst._wrapperState.initialValue,
      onChange: inst._wrapperState.onChange
    });

    return nativeProps;
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
    }

    var defaultValue = props.defaultValue;
    // TODO (yungsters): Remove support for children content in <textarea>.
    var children = props.children;
    if (children != null) {
      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;
      }
      !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;
      if (Array.isArray(children)) {
        !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;
        children = children[0];
      }

      defaultValue = '' + children;
    }
    if (defaultValue == null) {
      defaultValue = '';
    }
    var value = LinkedValueUtils.getValue(props);

    inst._wrapperState = {
      // We save the initial value so that `ReactDOMComponent` doesn't update
      // `textContent` (unnecessary since we update value).
      // The initial value can be a boolean or object so that's why it's
      // forced to be a string.
      initialValue: '' + (value != null ? value : defaultValue),
      onChange: _handleChange.bind(inst)
    };
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);
  ReactUpdates.asap(forceUpdateIfMounted, this);
  return returnValue;
}

module.exports = ReactDOMTextarea;
}).call(this,require('_process'))

},{"./LinkedValueUtils":49,"./Object.assign":50,"./ReactDOMIDOperations":70,"./ReactUpdates":116,"_process":26,"fbjs/lib/invariant":178,"fbjs/lib/warning":189}],78:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultBatchingStrategy
 */

'use strict';

var ReactUpdates = require('./ReactUpdates');
var Transaction = require('./Transaction');

var assign = require('./Object.assign');
var emptyFunction = require('fbjs/lib/emptyFunction');

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function () {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  }
});

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function (callback, a, b, c, d, e) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      callback(a, b, c, d, e);
    } else {
      transaction.perform(callback, null, a, b, c, d, e);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;
},{"./Object.assign":50,"./ReactUpdates":116,"./Transaction":133,"fbjs/lib/emptyFunction":170}],79:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultInjection
 */

'use strict';

var BeforeInputEventPlugin = require('./BeforeInputEventPlugin');
var ChangeEventPlugin = require('./ChangeEventPlugin');
var ClientReactRootIndex = require('./ClientReactRootIndex');
var DefaultEventPluginOrder = require('./DefaultEventPluginOrder');
var EnterLeaveEventPlugin = require('./EnterLeaveEventPlugin');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var HTMLDOMPropertyConfig = require('./HTMLDOMPropertyConfig');
var ReactBrowserComponentMixin = require('./ReactBrowserComponentMixin');
var ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');
var ReactDefaultBatchingStrategy = require('./ReactDefaultBatchingStrategy');
var ReactDOMComponent = require('./ReactDOMComponent');
var ReactDOMTextComponent = require('./ReactDOMTextComponent');
var ReactEventListener = require('./ReactEventListener');
var ReactInjection = require('./ReactInjection');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactMount = require('./ReactMount');
var ReactReconcileTransaction = require('./ReactReconcileTransaction');
var SelectEventPlugin = require('./SelectEventPlugin');
var ServerReactRootIndex = require('./ServerReactRootIndex');
var SimpleEventPlugin = require('./SimpleEventPlugin');
var SVGDOMPropertyConfig = require('./SVGDOMPropertyConfig');

var alreadyInjected = false;

function inject() {
  if (alreadyInjected) {
    // TODO: This is currently true because these injections are shared between
    // the client and the server package. They should be built independently
    // and not share any injection state. Then this problem will be solved.
    return;
  }
  alreadyInjected = true;

  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
  ReactInjection.EventPluginHub.injectMount(ReactMount);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent);

  ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent);

  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

  ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM ? ClientReactRootIndex.createReactRootIndex : ServerReactRootIndex.createReactRootIndex);

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);

  if (process.env.NODE_ENV !== 'production') {
    var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
    if (/[?&]react_perf\b/.test(url)) {
      var ReactDefaultPerf = require('./ReactDefaultPerf');
      ReactDefaultPerf.start();
    }
  }
}

module.exports = {
  inject: inject
};
}).call(this,require('_process'))

},{"./BeforeInputEventPlugin":30,"./ChangeEventPlugin":34,"./ClientReactRootIndex":35,"./DefaultEventPluginOrder":40,"./EnterLeaveEventPlugin":41,"./HTMLDOMPropertyConfig":48,"./ReactBrowserComponentMixin":53,"./ReactComponentBrowserEnvironment":61,"./ReactDOMComponent":67,"./ReactDOMTextComponent":76,"./ReactDefaultBatchingStrategy":78,"./ReactDefaultPerf":80,"./ReactEventListener":88,"./ReactInjection":89,"./ReactInstanceHandles":91,"./ReactMount":95,"./ReactReconcileTransaction":105,"./SVGDOMPropertyConfig":118,"./SelectEventPlugin":119,"./ServerReactRootIndex":120,"./SimpleEventPlugin":121,"_process":26,"fbjs/lib/ExecutionEnvironment":164}],80:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerf
 * @typechecks static-only
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ReactDefaultPerfAnalysis = require('./ReactDefaultPerfAnalysis');
var ReactMount = require('./ReactMount');
var ReactPerf = require('./ReactPerf');

var performanceNow = require('fbjs/lib/performanceNow');

function roundFloat(val) {
  return Math.floor(val * 100) / 100;
}

function addValue(obj, key, val) {
  obj[key] = (obj[key] || 0) + val;
}

var ReactDefaultPerf = {
  _allMeasurements: [], // last item in the list is the current one
  _mountStack: [0],
  _injected: false,

  start: function () {
    if (!ReactDefaultPerf._injected) {
      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
    }

    ReactDefaultPerf._allMeasurements.length = 0;
    ReactPerf.enableMeasure = true;
  },

  stop: function () {
    ReactPerf.enableMeasure = false;
  },

  getLastMeasurements: function () {
    return ReactDefaultPerf._allMeasurements;
  },

  printExclusive: function (measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
    console.table(summary.map(function (item) {
      return {
        'Component class name': item.componentName,
        'Total inclusive time (ms)': roundFloat(item.inclusive),
        'Exclusive mount time (ms)': roundFloat(item.exclusive),
        'Exclusive render time (ms)': roundFloat(item.render),
        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
        'Render time per instance (ms)': roundFloat(item.render / item.count),
        'Instances': item.count
      };
    }));
    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
    // number.
  },

  printInclusive: function (measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
    console.table(summary.map(function (item) {
      return {
        'Owner > component': item.componentName,
        'Inclusive time (ms)': roundFloat(item.time),
        'Instances': item.count
      };
    }));
    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
  },

  getMeasurementsSummaryMap: function (measurements) {
    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);
    return summary.map(function (item) {
      return {
        'Owner > component': item.componentName,
        'Wasted time (ms)': item.time,
        'Instances': item.count
      };
    });
  },

  printWasted: function (measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
  },

  printDOM: function (measurements) {
    measurements = measurements || ReactDefaultPerf._allMeasurements;
    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
    console.table(summary.map(function (item) {
      var result = {};
      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
      result.type = item.type;
      result.args = JSON.stringify(item.args);
      return result;
    }));
    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
  },

  _recordWrite: function (id, fnName, totalTime, args) {
    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;
    writes[id] = writes[id] || [];
    writes[id].push({
      type: fnName,
      time: totalTime,
      args: args
    });
  },

  measure: function (moduleName, fnName, func) {
    return function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var totalTime;
      var rv;
      var start;

      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {
        // A "measurement" is a set of metrics recorded for each flush. We want
        // to group the metrics for a given flush together so we can look at the
        // components that rendered and the DOM operations that actually
        // happened to determine the amount of "wasted work" performed.
        ReactDefaultPerf._allMeasurements.push({
          exclusive: {},
          inclusive: {},
          render: {},
          counts: {},
          writes: {},
          displayNames: {},
          totalTime: 0,
          created: {}
        });
        start = performanceNow();
        rv = func.apply(this, args);
        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;
        return rv;
      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {
        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (fnName === '_mountImageIntoNode') {
          var mountID = ReactMount.getID(args[1]);
          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
          // special format
          args[0].forEach(function (update) {
            var writeArgs = {};
            if (update.fromIndex !== null) {
              writeArgs.fromIndex = update.fromIndex;
            }
            if (update.toIndex !== null) {
              writeArgs.toIndex = update.toIndex;
            }
            if (update.textContent !== null) {
              writeArgs.textContent = update.textContent;
            }
            if (update.markupIndex !== null) {
              writeArgs.markup = args[1][update.markupIndex];
            }
            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);
          });
        } else {
          // basic format
          var id = args[0];
          if (typeof id === 'object') {
            id = ReactMount.getID(args[0]);
          }
          ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));
        }
        return rv;
      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?
      fnName === '_renderValidatedComponent')) {

        if (this._currentElement.type === ReactMount.TopLevelWrapper) {
          return func.apply(this, args);
        }

        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;
        var isRender = fnName === '_renderValidatedComponent';
        var isMount = fnName === 'mountComponent';

        var mountStack = ReactDefaultPerf._mountStack;
        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];

        if (isRender) {
          addValue(entry.counts, rootNodeID, 1);
        } else if (isMount) {
          entry.created[rootNodeID] = true;
          mountStack.push(0);
        }

        start = performanceNow();
        rv = func.apply(this, args);
        totalTime = performanceNow() - start;

        if (isRender) {
          addValue(entry.render, rootNodeID, totalTime);
        } else if (isMount) {
          var subMountTime = mountStack.pop();
          mountStack[mountStack.length - 1] += totalTime;
          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
          addValue(entry.inclusive, rootNodeID, totalTime);
        } else {
          addValue(entry.inclusive, rootNodeID, totalTime);
        }

        entry.displayNames[rootNodeID] = {
          current: this.getName(),
          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'
        };

        return rv;
      } else {
        return func.apply(this, args);
      }
    };
  }
};

module.exports = ReactDefaultPerf;
},{"./DOMProperty":37,"./ReactDefaultPerfAnalysis":81,"./ReactMount":95,"./ReactPerf":101,"fbjs/lib/performanceNow":186}],81:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactDefaultPerfAnalysis
 */

'use strict';

var assign = require('./Object.assign');

// Don't try to save users less than 1.2ms (a number I made up)
var DONT_CARE_THRESHOLD = 1.2;
var DOM_OPERATION_TYPES = {
  '_mountImageIntoNode': 'set innerHTML',
  INSERT_MARKUP: 'set innerHTML',
  MOVE_EXISTING: 'move',
  REMOVE_NODE: 'remove',
  SET_MARKUP: 'set innerHTML',
  TEXT_CONTENT: 'set textContent',
  'setValueForProperty': 'update attribute',
  'setValueForAttribute': 'update attribute',
  'deleteValueForProperty': 'remove attribute',
  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
};

function getTotalTime(measurements) {
  // TODO: return number of DOM ops? could be misleading.
  // TODO: measure dropped frames after reconcile?
  // TODO: log total time of each reconcile and the top-level component
  // class that triggered it.
  var totalTime = 0;
  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    totalTime += measurement.totalTime;
  }
  return totalTime;
}

function getDOMSummary(measurements) {
  var items = [];
  measurements.forEach(function (measurement) {
    Object.keys(measurement.writes).forEach(function (id) {
      measurement.writes[id].forEach(function (write) {
        items.push({
          id: id,
          type: DOM_OPERATION_TYPES[write.type] || write.type,
          args: write.args
        });
      });
    });
  });
  return items;
}

function getExclusiveSummary(measurements) {
  var candidates = {};
  var displayName;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

    for (var id in allIDs) {
      displayName = measurement.displayNames[id].current;

      candidates[displayName] = candidates[displayName] || {
        componentName: displayName,
        inclusive: 0,
        exclusive: 0,
        render: 0,
        count: 0
      };
      if (measurement.render[id]) {
        candidates[displayName].render += measurement.render[id];
      }
      if (measurement.exclusive[id]) {
        candidates[displayName].exclusive += measurement.exclusive[id];
      }
      if (measurement.inclusive[id]) {
        candidates[displayName].inclusive += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[displayName].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (displayName in candidates) {
    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[displayName]);
    }
  }

  arr.sort(function (a, b) {
    return b.exclusive - a.exclusive;
  });

  return arr;
}

function getInclusiveSummary(measurements, onlyClean) {
  var candidates = {};
  var inclusiveKey;

  for (var i = 0; i < measurements.length; i++) {
    var measurement = measurements[i];
    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
    var cleanComponents;

    if (onlyClean) {
      cleanComponents = getUnchangedComponents(measurement);
    }

    for (var id in allIDs) {
      if (onlyClean && !cleanComponents[id]) {
        continue;
      }

      var displayName = measurement.displayNames[id];

      // Inclusive time is not useful for many components without knowing where
      // they are instantiated. So we aggregate inclusive time with both the
      // owner and current displayName as the key.
      inclusiveKey = displayName.owner + ' > ' + displayName.current;

      candidates[inclusiveKey] = candidates[inclusiveKey] || {
        componentName: inclusiveKey,
        time: 0,
        count: 0
      };

      if (measurement.inclusive[id]) {
        candidates[inclusiveKey].time += measurement.inclusive[id];
      }
      if (measurement.counts[id]) {
        candidates[inclusiveKey].count += measurement.counts[id];
      }
    }
  }

  // Now make a sorted array with the results.
  var arr = [];
  for (inclusiveKey in candidates) {
    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
      arr.push(candidates[inclusiveKey]);
    }
  }

  arr.sort(function (a, b) {
    return b.time - a.time;
  });

  return arr;
}

function getUnchangedComponents(measurement) {
  // For a given reconcile, look at which components did not actually
  // render anything to the DOM and return a mapping of their ID to
  // the amount of time it took to render the entire subtree.
  var cleanComponents = {};
  var dirtyLeafIDs = Object.keys(measurement.writes);
  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

  for (var id in allIDs) {
    var isDirty = false;
    // For each component that rendered, see if a component that triggered
    // a DOM op is in its subtree.
    for (var i = 0; i < dirtyLeafIDs.length; i++) {
      if (dirtyLeafIDs[i].indexOf(id) === 0) {
        isDirty = true;
        break;
      }
    }
    // check if component newly created
    if (measurement.created[id]) {
      isDirty = true;
    }
    if (!isDirty && measurement.counts[id] > 0) {
      cleanComponents[id] = true;
    }
  }
  return cleanComponents;
}

var ReactDefaultPerfAnalysis = {
  getExclusiveSummary: getExclusiveSummary,
  getInclusiveSummary: getInclusiveSummary,
  getDOMSummary: getDOMSummary,
  getTotalTime: getTotalTime
};

module.exports = ReactDefaultPerfAnalysis;
},{"./Object.assign":50}],82:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElement
 */

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');

var assign = require('./Object.assign');
var canDefineProperty = require('./canDefineProperty');

// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};

/**
 * Base constructor for all React elements. This is only used to make this
 * work with a dynamic instanceof check. Nothing should live on this prototype.
 *
 * @param {*} type
 * @param {*} key
 * @param {string|object} ref
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @param {*} owner
 * @param {*} props
 * @internal
 */
var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allow us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,

    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,

    // Record the component responsible for creating this element.
    _owner: owner
  };

  if (process.env.NODE_ENV !== 'production') {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {};

    // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.
    if (canDefineProperty) {
      Object.defineProperty(element._store, 'validated', {
        configurable: false,
        enumerable: false,
        writable: true,
        value: false
      });
      // self and source are DEV only properties.
      Object.defineProperty(element, '_self', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: self
      });
      // Two elements created in two different places should be considered
      // equal for testing purposes and therefore we hide it from enumeration.
      Object.defineProperty(element, '_source', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: source
      });
    } else {
      element._store.validated = false;
      element._self = self;
      element._source = source;
    }
    Object.freeze(element.props);
    Object.freeze(element);
  }

  return element;
};

ReactElement.createElement = function (type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    ref = config.ref === undefined ? null : config.ref;
    key = config.key === undefined ? null : '' + config.key;
    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (typeof props[propName] === 'undefined') {
        props[propName] = defaultProps[propName];
      }
    }
  }

  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
};

ReactElement.createFactory = function (type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  // Legacy hook TODO: Warn if this is accessed
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

  return newElement;
};

ReactElement.cloneAndReplaceProps = function (oldElement, newProps) {
  var newElement = ReactElement(oldElement.type, oldElement.key, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, newProps);

  if (process.env.NODE_ENV !== 'production') {
    // If the key on the original is valid, then the clone is valid
    newElement._store.validated = oldElement._store.validated;
  }

  return newElement;
};

ReactElement.cloneElement = function (element, config, children) {
  var propName;

  // Original props are copied
  var props = assign({}, element.props);

  // Reserved names are extracted
  var key = element.key;
  var ref = element.ref;
  // Self is preserved since the owner is preserved.
  var self = element._self;
  // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.
  var source = element._source;

  // Owner will be preserved, unless ref is overridden
  var owner = element._owner;

  if (config != null) {
    if (config.ref !== undefined) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }
    if (config.key !== undefined) {
      key = '' + config.key;
    }
    // Remaining properties override existing props
    for (propName in config) {
      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
};

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function (object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
};

module.exports = ReactElement;
}).call(this,require('_process'))

},{"./Object.assign":50,"./ReactCurrentOwner":64,"./canDefineProperty":137,"_process":26}],83:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactElementValidator
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

'use strict';

var ReactElement = require('./ReactElement');
var ReactPropTypeLocations = require('./ReactPropTypeLocations');
var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');
var ReactCurrentOwner = require('./ReactCurrentOwner');

var canDefineProperty = require('./canDefineProperty');
var getIteratorFn = require('./getIteratorFn');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = ReactCurrentOwner.current.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {};

var loggedTypeFailures = {};

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);
  if (addenda === null) {
    // we already showed the warning
    return;
  }
  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : undefined;
}

/**
 * Shared warning and monitoring code for the key warnings.
 *
 * @internal
 * @param {string} messageType A key used for de-duping warnings.
 * @param {ReactElement} element Component that requires a key.
 * @param {*} parentType element's parent's type.
 * @returns {?object} A set of addenda to use in the warning message, or null
 * if the warning has already been shown before (and shouldn't be shown again).
 */
function getAddendaForKeyUse(messageType, element, parentType) {
  var addendum = getDeclarationErrorAddendum();
  if (!addendum) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
    if (parentName) {
      addendum = ' Check the top-level render call using <' + parentName + '>.';
    }
  }

  var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});
  if (memoizer[addendum]) {
    return null;
  }
  memoizer[addendum] = true;

  var addenda = {
    parentOrOwner: addendum,
    url: ' See https://fb.me/react-warning-keys for more information.',
    childOwner: null
  };

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
  }

  return addenda;
}

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */
function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);
    // Entry iterators provide implicit keys.
    if (iteratorFn) {
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;
        while (!(step = iterator.next()).done) {
          if (ReactElement.isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}

/**
 * Assert that the props are valid
 *
 * @param {string} componentName Name of the component for error messages.
 * @param {object} propTypes Map of prop name to a ReactPropType
 * @param {object} props
 * @param {string} location e.g. "prop", "context", "child context"
 * @private
 */
function checkPropTypes(componentName, propTypes, props, location) {
  for (var propName in propTypes) {
    if (propTypes.hasOwnProperty(propName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
        error = propTypes[propName](props, propName, componentName, location);
      } catch (ex) {
        error = ex;
      }
      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error) : undefined;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var addendum = getDeclarationErrorAddendum();
        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed propType: %s%s', error.message, addendum) : undefined;
      }
    }
  }
}

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */
function validatePropTypes(element) {
  var componentClass = element.type;
  if (typeof componentClass !== 'function') {
    return;
  }
  var name = componentClass.displayName || componentClass.name;
  if (componentClass.propTypes) {
    checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);
  }
  if (typeof componentClass.getDefaultProps === 'function') {
    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : undefined;
  }
}

var ReactElementValidator = {

  createElement: function (type, props, children) {
    var validType = typeof type === 'string' || typeof type === 'function';
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    process.env.NODE_ENV !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : undefined;

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    // Skip key warning if the type isn't valid since our key validation logic
    // doesn't expect a non-string/function type and can throw confusing errors.
    // We don't want exception behavior to differ between dev and prod.
    // (Rendering will throw with a helpful message and as soon as the type is
    // fixed, the key warnings will appear.)
    if (validType) {
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], type);
      }
    }

    validatePropTypes(element);

    return element;
  },

  createFactory: function (type) {
    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
    // Legacy hook TODO: Warn if this is accessed
    validatedFactory.type = type;

    if (process.env.NODE_ENV !== 'production') {
      if (canDefineProperty) {
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function () {
            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : undefined;
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }
    }

    return validatedFactory;
  },

  cloneElement: function (element, props, children) {
    var newElement = ReactElement.cloneElement.apply(this, arguments);
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], newElement.type);
    }
    validatePropTypes(newElement);
    return newElement;
  }

};

module.exports = ReactElementValidator;
}).call(this,require('_process'))

},{"./ReactCurrentOwner":64,"./ReactElement":82,"./ReactPropTypeLocationNames":102,"./ReactPropTypeLocations":103,"./canDefineProperty":137,"./getIteratorFn":148,"_process":26,"fbjs/lib/invariant":178,"fbjs/lib/warning":189}],84:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEmptyComponent
 */

'use strict';

var ReactElement = require('./ReactElement');
var ReactEmptyComponentRegistry = require('./ReactEmptyComponentRegistry');
var ReactReconciler = require('./ReactReconciler');

var assign = require('./Object.assign');

var placeholderElement;

var ReactEmptyComponentInjection = {
  injectEmptyComponent: function (component) {
    placeholderElement = ReactElement.createElement(component);
  }
};

var ReactEmptyComponent = function (instantiate) {
  this._currentElement = null;
  this._rootNodeID = null;
  this._renderedComponent = instantiate(placeholderElement);
};
assign(ReactEmptyComponent.prototype, {
  construct: function (element) {},
  mountComponent: function (rootID, transaction, context) {
    ReactEmptyComponentRegistry.registerNullComponentID(rootID);
    this._rootNodeID = rootID;
    return ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, context);
  },
  receiveComponent: function () {},
  unmountComponent: function (rootID, transaction, context) {
    ReactReconciler.unmountComponent(this._renderedComponent);
    ReactEmptyComponentRegistry.deregisterNullComponentID(this._rootNodeID);
    this._rootNodeID = null;
    this._renderedComponent = null;
  }
});

ReactEmptyComponent.injection = ReactEmptyComponentInjection;

module.exports = ReactEmptyComponent;
},{"./Object.assign":50,"./ReactElement":82,"./ReactEmptyComponentRegistry":85,"./ReactReconciler":106}],85:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEmptyComponentRegistry
 */

'use strict';

// This registry keeps track of the React IDs of the components that rendered to
// `null` (in reality a placeholder such as `noscript`)
var nullComponentIDsRegistry = {};

/**
 * @param {string} id Component's `_rootNodeID`.
 * @return {boolean} True if the component is rendered to null.
 */
function isNullComponentID(id) {
  return !!nullComponentIDsRegistry[id];
}

/**
 * Mark the component as having rendered to null.
 * @param {string} id Component's `_rootNodeID`.
 */
function registerNullComponentID(id) {
  nullComponentIDsRegistry[id] = true;
}

/**
 * Unmark the component as having rendered to null: it renders to something now.
 * @param {string} id Component's `_rootNodeID`.
 */
function deregisterNullComponentID(id) {
  delete nullComponentIDsRegistry[id];
}

var ReactEmptyComponentRegistry = {
  isNullComponentID: isNullComponentID,
  registerNullComponentID: registerNullComponentID,
  deregisterNullComponentID: deregisterNullComponentID
};

module.exports = ReactEmptyComponentRegistry;
},{}],86:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactErrorUtils
 * @typechecks
 */

'use strict';

var caughtError = null;

/**
 * Call a function while guarding against errors that happens within it.
 *
 * @param {?String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} a First argument
 * @param {*} b Second argument
 */
function invokeGuardedCallback(name, func, a, b) {
  try {
    return func(a, b);
  } catch (x) {
    if (caughtError === null) {
      caughtError = x;
    }
    return undefined;
  }
}

var ReactErrorUtils = {
  invokeGuardedCallback: invokeGuardedCallback,

  /**
   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
   * handler are sure to be rethrown by rethrowCaughtError.
   */
  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

  /**
   * During execution of guarded functions we will capture the first error which
   * we will rethrow to be handled by the top level error handler.
   */
  rethrowCaughtError: function () {
    if (caughtError) {
      var error = caughtError;
      caughtError = null;
      throw error;
    }
  }
};

if (process.env.NODE_ENV !== 'production') {
  /**
   * To help development we can get better devtools integration by simulating a
   * real browser event.
   */
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');
    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {
      var boundFunc = func.bind(null, a, b);
      var evtType = 'react-' + name;
      fakeNode.addEventListener(evtType, boundFunc, false);
      var evt = document.createEvent('Event');
      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);
      fakeNode.removeEventListener(evtType, boundFunc, false);
    };
  }
}

module.exports = ReactErrorUtils;
}).call(this,require('_process'))

},{"_process":26}],87:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventEmitterMixin
 */

'use strict';

var EventPluginHub = require('./EventPluginHub');

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue(false);
}

var ReactEventEmitterMixin = {

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {object} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native environment event.
   */
  handleTopLevel: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    var events = EventPluginHub.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;
},{"./EventPluginHub":43}],88:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactEventListener
 * @typechecks static-only
 */

'use strict';

var EventListener = require('fbjs/lib/EventListener');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var PooledClass = require('./PooledClass');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactMount = require('./ReactMount');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var getEventTarget = require('./getEventTarget');
var getUnboundedScrollPosition = require('fbjs/lib/getUnboundedScrollPosition');

var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

/**
 * Finds the parent React component of `node`.
 *
 * @param {*} node
 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
 *                           is not nested.
 */
function findParent(node) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  var nodeID = ReactMount.getID(node);
  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
  var container = ReactMount.findReactContainerForID(rootID);
  var parent = ReactMount.getFirstReactDOM(container);
  return parent;
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function () {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

function handleTopLevelImpl(bookKeeping) {
  // TODO: Re-enable event.path handling
  //
  // if (bookKeeping.nativeEvent.path && bookKeeping.nativeEvent.path.length > 1) {
  //   // New browsers have a path attribute on native events
  //   handleTopLevelWithPath(bookKeeping);
  // } else {
  //   // Legacy browsers don't have a path attribute on native events
  //   handleTopLevelWithoutPath(bookKeeping);
  // }

  void handleTopLevelWithPath; // temporarily unused
  handleTopLevelWithoutPath(bookKeeping);
}

// Legacy browsers don't have a path attribute on native events
function handleTopLevelWithoutPath(bookKeeping) {
  var topLevelTarget = ReactMount.getFirstReactDOM(getEventTarget(bookKeeping.nativeEvent)) || window;

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = topLevelTarget;
  while (ancestor) {
    bookKeeping.ancestors.push(ancestor);
    ancestor = findParent(ancestor);
  }

  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
    topLevelTarget = bookKeeping.ancestors[i];
    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, topLevelTarget, topLevelTargetID, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }
}

// New browsers have a path attribute on native events
function handleTopLevelWithPath(bookKeeping) {
  var path = bookKeeping.nativeEvent.path;
  var currentNativeTarget = path[0];
  var eventsFired = 0;
  for (var i = 0; i < path.length; i++) {
    var currentPathElement = path[i];
    if (currentPathElement.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE) {
      currentNativeTarget = path[i + 1];
    }
    // TODO: slow
    var reactParent = ReactMount.getFirstReactDOM(currentPathElement);
    if (reactParent === currentPathElement) {
      var currentPathElementID = ReactMount.getID(currentPathElement);
      var newRootID = ReactInstanceHandles.getReactRootIDFromNodeID(currentPathElementID);
      bookKeeping.ancestors.push(currentPathElement);

      var topLevelTargetID = ReactMount.getID(currentPathElement) || '';
      eventsFired++;
      ReactEventListener._handleTopLevel(bookKeeping.topLevelType, currentPathElement, topLevelTargetID, bookKeeping.nativeEvent, currentNativeTarget);

      // Jump to the root of this React render tree
      while (currentPathElementID !== newRootID) {
        i++;
        currentPathElement = path[i];
        currentPathElementID = ReactMount.getID(currentPathElement);
      }
    }
  }
  if (eventsFired === 0) {
    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, window, '', bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function (handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function (enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function () {
    return ReactEventListener._enabled;
  },

  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return null;
    }
    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} handle Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
    var element = handle;
    if (!element) {
      return null;
    }
    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  monitorScrollValue: function (refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
  },

  dispatchEvent: function (topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;
},{"./Object.assign":50,"./PooledClass":51,"./ReactInstanceHandles":91,"./ReactMount":95,"./ReactUpdates":116,"./getEventTarget":147,"fbjs/lib/EventListener":163,"fbjs/lib/ExecutionEnvironment":164,"fbjs/lib/getUnboundedScrollPosition":175}],89:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInjection
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var EventPluginHub = require('./EventPluginHub');
var ReactComponentEnvironment = require('./ReactComponentEnvironment');
var ReactClass = require('./ReactClass');
var ReactEmptyComponent = require('./ReactEmptyComponent');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactNativeComponent = require('./ReactNativeComponent');
var ReactPerf = require('./ReactPerf');
var ReactRootIndex = require('./ReactRootIndex');
var ReactUpdates = require('./ReactUpdates');

var ReactInjection = {
  Component: ReactComponentEnvironment.injection,
  Class: ReactClass.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  NativeComponent: ReactNativeComponent.injection,
  Perf: ReactPerf.injection,
  RootIndex: ReactRootIndex.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;
},{"./DOMProperty":37,"./EventPluginHub":43,"./ReactBrowserEventEmitter":54,"./ReactClass":59,"./ReactComponentEnvironment":62,"./ReactEmptyComponent":84,"./ReactNativeComponent":98,"./ReactPerf":101,"./ReactRootIndex":108,"./ReactUpdates":116}],90:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInputSelection
 */

'use strict';

var ReactDOMSelection = require('./ReactDOMSelection');

var containsNode = require('fbjs/lib/containsNode');
var focusNode = require('fbjs/lib/focusNode');
var getActiveElement = require('fbjs/lib/getActiveElement');

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {

  hasSelectionCapabilities: function (elem) {
    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
  },

  getSelectionInformation: function () {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function (priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function (input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || { start: 0, end: 0 };
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function (input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (typeof end === 'undefined') {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;
},{"./ReactDOMSelection":74,"fbjs/lib/containsNode":167,"fbjs/lib/focusNode":172,"fbjs/lib/getActiveElement":173}],91:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceHandles
 * @typechecks static-only
 */

'use strict';

var ReactRootIndex = require('./ReactRootIndex');

var invariant = require('fbjs/lib/invariant');

var SEPARATOR = '.';
var SEPARATOR_LENGTH = SEPARATOR.length;

/**
 * Maximum depth of traversals before we consider the possibility of a bad ID.
 */
var MAX_TREE_DEPTH = 10000;

/**
 * Creates a DOM ID prefix to use when mounting React components.
 *
 * @param {number} index A unique integer
 * @return {string} React root ID.
 * @internal
 */
function getReactRootIDString(index) {
  return SEPARATOR + index.toString(36);
}

/**
 * Checks if a character in the supplied ID is a separator or the end.
 *
 * @param {string} id A React DOM ID.
 * @param {number} index Index of the character to check.
 * @return {boolean} True if the character is a separator or end of the ID.
 * @private
 */
function isBoundary(id, index) {
  return id.charAt(index) === SEPARATOR || index === id.length;
}

/**
 * Checks if the supplied string is a valid React DOM ID.
 *
 * @param {string} id A React DOM ID, maybe.
 * @return {boolean} True if the string is a valid React DOM ID.
 * @private
 */
function isValidID(id) {
  return id === '' || id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR;
}

/**
 * Checks if the first ID is an ancestor of or equal to the second ID.
 *
 * @param {string} ancestorID
 * @param {string} descendantID
 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
 * @internal
 */
function isAncestorIDOf(ancestorID, descendantID) {
  return descendantID.indexOf(ancestorID) === 0 && isBoundary(descendantID, ancestorID.length);
}

/**
 * Gets the parent ID of the supplied React DOM ID, `id`.
 *
 * @param {string} id ID of a component.
 * @return {string} ID of the parent, or an empty string.
 * @private
 */
function getParentID(id) {
  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
}

/**
 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
 * supplied `destinationID`. If they are equal, the ID is returned.
 *
 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
 * @param {string} destinationID ID of the destination node.
 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
 * @private
 */
function getNextDescendantID(ancestorID, destinationID) {
  !(isValidID(ancestorID) && isValidID(destinationID)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(%s, %s): Received an invalid React DOM ID.', ancestorID, destinationID) : invariant(false) : undefined;
  !isAncestorIDOf(ancestorID, destinationID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(...): React has made an invalid assumption about ' + 'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.', ancestorID, destinationID) : invariant(false) : undefined;
  if (ancestorID === destinationID) {
    return ancestorID;
  }
  // Skip over the ancestor and the immediate separator. Traverse until we hit
  // another separator or we reach the end of `destinationID`.
  var start = ancestorID.length + SEPARATOR_LENGTH;
  var i;
  for (i = start; i < destinationID.length; i++) {
    if (isBoundary(destinationID, i)) {
      break;
    }
  }
  return destinationID.substr(0, i);
}

/**
 * Gets the nearest common ancestor ID of two IDs.
 *
 * Using this ID scheme, the nearest common ancestor ID is the longest common
 * prefix of the two IDs that immediately preceded a "marker" in both strings.
 *
 * @param {string} oneID
 * @param {string} twoID
 * @return {string} Nearest common ancestor ID, or the empty string if none.
 * @private
 */
function getFirstCommonAncestorID(oneID, twoID) {
  var minLength = Math.min(oneID.length, twoID.length);
  if (minLength === 0) {
    return '';
  }
  var lastCommonMarkerIndex = 0;
  // Use `<=` to traverse until the "EOL" of the shorter string.
  for (var i = 0; i <= minLength; i++) {
    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
      lastCommonMarkerIndex = i;
    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
      break;
    }
  }
  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
  !isValidID(longestCommonID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s', oneID, twoID, longestCommonID) : invariant(false) : undefined;
  return longestCommonID;
}

/**
 * Traverses the parent path between two IDs (either up or down). The IDs must
 * not be the same, and there must exist a parent path between them. If the
 * callback returns `false`, traversal is stopped.
 *
 * @param {?string} start ID at which to start traversal.
 * @param {?string} stop ID at which to end traversal.
 * @param {function} cb Callback to invoke each ID with.
 * @param {*} arg Argument to invoke the callback with.
 * @param {?boolean} skipFirst Whether or not to skip the first node.
 * @param {?boolean} skipLast Whether or not to skip the last node.
 * @private
 */
function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
  start = start || '';
  stop = stop || '';
  !(start !== stop) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.', start) : invariant(false) : undefined;
  var traverseUp = isAncestorIDOf(stop, start);
  !(traverseUp || isAncestorIDOf(start, stop)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' + 'not have a parent path.', start, stop) : invariant(false) : undefined;
  // Traverse from `start` to `stop` one depth at a time.
  var depth = 0;
  var traverse = traverseUp ? getParentID : getNextDescendantID;
  for (var id = start;; /* until break */id = traverse(id, stop)) {
    var ret;
    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
      ret = cb(id, traverseUp, arg);
    }
    if (ret === false || id === stop) {
      // Only break //after// visiting `stop`.
      break;
    }
    !(depth++ < MAX_TREE_DEPTH) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' + 'traversing the React DOM ID tree. This may be due to malformed IDs: %s', start, stop, id) : invariant(false) : undefined;
  }
}

/**
 * Manages the IDs assigned to DOM representations of React components. This
 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
 * order to simulate events).
 *
 * @internal
 */
var ReactInstanceHandles = {

  /**
   * Constructs a React root ID
   * @return {string} A React root ID.
   */
  createReactRootID: function () {
    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
  },

  /**
   * Constructs a React ID by joining a root ID with a name.
   *
   * @param {string} rootID Root ID of a parent component.
   * @param {string} name A component's name (as flattened children).
   * @return {string} A React ID.
   * @internal
   */
  createReactID: function (rootID, name) {
    return rootID + name;
  },

  /**
   * Gets the DOM ID of the React component that is the root of the tree that
   * contains the React component with the supplied DOM ID.
   *
   * @param {string} id DOM ID of a React component.
   * @return {?string} DOM ID of the React component that is the root.
   * @internal
   */
  getReactRootIDFromNodeID: function (id) {
    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
      var index = id.indexOf(SEPARATOR, 1);
      return index > -1 ? id.substr(0, index) : id;
    }
    return null;
  },

  /**
   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
   * should would receive a `mouseEnter` or `mouseLeave` event.
   *
   * NOTE: Does not invoke the callback on the nearest common ancestor because
   * nothing "entered" or "left" that element.
   *
   * @param {string} leaveID ID being left.
   * @param {string} enterID ID being entered.
   * @param {function} cb Callback to invoke on each entered/left ID.
   * @param {*} upArg Argument to invoke the callback with on left IDs.
   * @param {*} downArg Argument to invoke the callback with on entered IDs.
   * @internal
   */
  traverseEnterLeave: function (leaveID, enterID, cb, upArg, downArg) {
    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
    if (ancestorID !== leaveID) {
      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
    }
    if (ancestorID !== enterID) {
      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
    }
  },

  /**
   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseTwoPhase: function (targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, false);
      traverseParentPath(targetID, '', cb, arg, false, true);
    }
  },

  /**
   * Same as `traverseTwoPhase` but skips the `targetID`.
   */
  traverseTwoPhaseSkipTarget: function (targetID, cb, arg) {
    if (targetID) {
      traverseParentPath('', targetID, cb, arg, true, true);
      traverseParentPath(targetID, '', cb, arg, true, true);
    }
  },

  /**
   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
   * example, passing `.0.$row-0.1` would result in `cb` getting called
   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
   *
   * NOTE: This traversal happens on IDs without touching the DOM.
   *
   * @param {string} targetID ID of the target node.
   * @param {function} cb Callback to invoke.
   * @param {*} arg Argument to invoke the callback with.
   * @internal
   */
  traverseAncestors: function (targetID, cb, arg) {
    traverseParentPath('', targetID, cb, arg, true, false);
  },

  getFirstCommonAncestorID: getFirstCommonAncestorID,

  /**
   * Exposed for unit testing.
   * @private
   */
  _getNextDescendantID: getNextDescendantID,

  isAncestorIDOf: isAncestorIDOf,

  SEPARATOR: SEPARATOR

};

module.exports = ReactInstanceHandles;
}).call(this,require('_process'))

},{"./ReactRootIndex":108,"_process":26,"fbjs/lib/invariant":178}],92:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactInstanceMap
 */

'use strict';

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 */

// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
var ReactInstanceMap = {

  /**
   * This API should be called `delete` but we'd have to make sure to always
   * transform these to strings for IE support. When this transform is fully
   * supported we can rename it.
   */
  remove: function (key) {
    key._reactInternalInstance = undefined;
  },

  get: function (key) {
    return key._reactInternalInstance;
  },

  has: function (key) {
    return key._reactInternalInstance !== undefined;
  },

  set: function (key, value) {
    key._reactInternalInstance = value;
  }

};

module.exports = ReactInstanceMap;
},{}],93:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactIsomorphic
 */

'use strict';

var ReactChildren = require('./ReactChildren');
var ReactComponent = require('./ReactComponent');
var ReactClass = require('./ReactClass');
var ReactDOMFactories = require('./ReactDOMFactories');
var ReactElement = require('./ReactElement');
var ReactElementValidator = require('./ReactElementValidator');
var ReactPropTypes = require('./ReactPropTypes');
var ReactVersion = require('./ReactVersion');

var assign = require('./Object.assign');
var onlyChild = require('./onlyChild');

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;
var cloneElement = ReactElement.cloneElement;

if (process.env.NODE_ENV !== 'production') {
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
  cloneElement = ReactElementValidator.cloneElement;
}

var React = {

  // Modern

  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    toArray: ReactChildren.toArray,
    only: onlyChild
  },

  Component: ReactComponent,

  createElement: createElement,
  cloneElement: cloneElement,
  isValidElement: ReactElement.isValidElement,

  // Classic

  PropTypes: ReactPropTypes,
  createClass: ReactClass.createClass,
  createFactory: createFactory,
  createMixin: function (mixin) {
    // Currently a noop. Will be used to validate and trace mixins.
    return mixin;
  },

  // This looks DOM specific but these are actually isomorphic helpers
  // since they are just generating DOM strings.
  DOM: ReactDOMFactories,

  version: ReactVersion,

  // Hook for JSX spread, don't use this for anything else.
  __spread: assign
};

module.exports = React;
}).call(this,require('_process'))

},{"./Object.assign":50,"./ReactChildren":58,"./ReactClass":59,"./ReactComponent":60,"./ReactDOMFactories":68,"./ReactElement":82,"./ReactElementValidator":83,"./ReactPropTypes":104,"./ReactVersion":117,"./onlyChild":154,"_process":26}],94:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMarkupChecksum
 */

'use strict';

var adler32 = require('./adler32');

var TAG_END = /\/?>/;

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function (markup) {
    var checksum = adler32(markup);

    // Add checksum (handle both parent tags and self-closing tags)
    return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function (markup, element) {
    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;
},{"./adler32":136}],95:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMount
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactDOMFeatureFlags = require('./ReactDOMFeatureFlags');
var ReactElement = require('./ReactElement');
var ReactEmptyComponentRegistry = require('./ReactEmptyComponentRegistry');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactMarkupChecksum = require('./ReactMarkupChecksum');
var ReactPerf = require('./ReactPerf');
var ReactReconciler = require('./ReactReconciler');
var ReactUpdateQueue = require('./ReactUpdateQueue');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var emptyObject = require('fbjs/lib/emptyObject');
var containsNode = require('fbjs/lib/containsNode');
var instantiateReactComponent = require('./instantiateReactComponent');
var invariant = require('fbjs/lib/invariant');
var setInnerHTML = require('./setInnerHTML');
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
var validateDOMNesting = require('./validateDOMNesting');
var warning = require('fbjs/lib/warning');

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var nodeCache = {};

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

var ownerDocumentContextKey = '__ReactMount_ownerDocument$' + Math.random().toString(36).slice(2);

/** Mapping from reactRootID to React component instance. */
var instancesByReactRootID = {};

/** Mapping from reactRootID to `container` nodes. */
var containersByReactRootID = {};

if (process.env.NODE_ENV !== 'production') {
  /** __DEV__-only mapping from reactRootID to root elements. */
  var rootElementsByReactRootID = {};
}

// Used to store breadth-first search state in findComponentRoot.
var findComponentRootReusableArray = [];

/**
 * Finds the index of the first character
 * that's not common between the two given strings.
 *
 * @return {number} the index of the character where the strings diverge
 */
function firstDifferenceIndex(string1, string2) {
  var minLen = Math.min(string1.length, string2.length);
  for (var i = 0; i < minLen; i++) {
    if (string1.charAt(i) !== string2.charAt(i)) {
      return i;
    }
  }
  return string1.length === string2.length ? -1 : minLen;
}

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 * a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

/**
 * @param {DOMElement} container DOM element that may contain a React component.
 * @return {?string} A "reactRoot" ID, if a React component is rendered.
 */
function getReactRootID(container) {
  var rootElement = getReactRootElementInContainer(container);
  return rootElement && ReactMount.getID(rootElement);
}

/**
 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
 * element can return its control whose name or ID equals ATTR_NAME. All
 * DOM nodes support `getAttributeNode` but this can also get called on
 * other objects so just return '' if we're given something other than a
 * DOM node (such as window).
 *
 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
 * @return {string} ID of the supplied `domNode`.
 */
function getID(node) {
  var id = internalGetID(node);
  if (id) {
    if (nodeCache.hasOwnProperty(id)) {
      var cached = nodeCache[id];
      if (cached !== node) {
        !!isValid(cached, id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Two valid but unequal nodes with the same `%s`: %s', ATTR_NAME, id) : invariant(false) : undefined;

        nodeCache[id] = node;
      }
    } else {
      nodeCache[id] = node;
    }
  }

  return id;
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Sets the React-specific ID of the given node.
 *
 * @param {DOMElement} node The DOM node whose ID will be set.
 * @param {string} id The value of the ID attribute.
 */
function setID(node, id) {
  var oldID = internalGetID(node);
  if (oldID !== id) {
    delete nodeCache[oldID];
  }
  node.setAttribute(ATTR_NAME, id);
  nodeCache[id] = node;
}

/**
 * Finds the node with the supplied React-generated DOM ID.
 *
 * @param {string} id A React-generated DOM ID.
 * @return {DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNode(id) {
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * Finds the node with the supplied public React instance.
 *
 * @param {*} instance A public React instance.
 * @return {?DOMElement} DOM node with the suppled `id`.
 * @internal
 */
function getNodeFromInstance(instance) {
  var id = ReactInstanceMap.get(instance)._rootNodeID;
  if (ReactEmptyComponentRegistry.isNullComponentID(id)) {
    return null;
  }
  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
    nodeCache[id] = ReactMount.findReactNodeByID(id);
  }
  return nodeCache[id];
}

/**
 * A node is "valid" if it is contained by a currently mounted container.
 *
 * This means that the node does not have to be contained by a document in
 * order to be considered valid.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @param {string} id The expected ID of the node.
 * @return {boolean} Whether the node is contained by a mounted container.
 */
function isValid(node, id) {
  if (node) {
    !(internalGetID(node) === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Unexpected modification of `%s`', ATTR_NAME) : invariant(false) : undefined;

    var container = ReactMount.findReactContainerForID(id);
    if (container && containsNode(container, node)) {
      return true;
    }
  }

  return false;
}

/**
 * Causes the cache to forget about one React-specific ID.
 *
 * @param {string} id The ID to forget.
 */
function purgeID(id) {
  delete nodeCache[id];
}

var deepestNodeSoFar = null;
function findDeepestCachedAncestorImpl(ancestorID) {
  var ancestor = nodeCache[ancestorID];
  if (ancestor && isValid(ancestor, ancestorID)) {
    deepestNodeSoFar = ancestor;
  } else {
    // This node isn't populated in the cache, so presumably none of its
    // descendants are. Break out of the loop.
    return false;
  }
}

/**
 * Return the deepest cached node whose ID is a prefix of `targetID`.
 */
function findDeepestCachedAncestor(targetID) {
  deepestNodeSoFar = null;
  ReactInstanceHandles.traverseAncestors(targetID, findDeepestCachedAncestorImpl);

  var foundNode = deepestNodeSoFar;
  deepestNodeSoFar = null;
  return foundNode;
}

/**
 * Mounts this component and inserts it into the DOM.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {string} rootID DOM ID of the root node.
 * @param {DOMElement} container DOM element to mount into.
 * @param {ReactReconcileTransaction} transaction
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function mountComponentIntoNode(componentInstance, rootID, container, transaction, shouldReuseMarkup, context) {
  if (ReactDOMFeatureFlags.useCreateElement) {
    context = assign({}, context);
    if (container.nodeType === DOC_NODE_TYPE) {
      context[ownerDocumentContextKey] = container;
    } else {
      context[ownerDocumentContextKey] = container.ownerDocument;
    }
  }
  if (process.env.NODE_ENV !== 'production') {
    if (context === emptyObject) {
      context = {};
    }
    var tag = container.nodeName.toLowerCase();
    context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(null, tag, null);
  }
  var markup = ReactReconciler.mountComponent(componentInstance, rootID, transaction, context);
  componentInstance._renderedComponent._topLevelWrapper = componentInstance;
  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup, transaction);
}

/**
 * Batched mount.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {string} rootID DOM ID of the root node.
 * @param {DOMElement} container DOM element to mount into.
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function batchedMountComponentIntoNode(componentInstance, rootID, container, shouldReuseMarkup, context) {
  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
  /* forceHTML */shouldReuseMarkup);
  transaction.perform(mountComponentIntoNode, null, componentInstance, rootID, container, transaction, shouldReuseMarkup, context);
  ReactUpdates.ReactReconcileTransaction.release(transaction);
}

/**
 * Unmounts a component and removes it from the DOM.
 *
 * @param {ReactComponent} instance React component instance.
 * @param {DOMElement} container DOM element to unmount from.
 * @final
 * @internal
 * @see {ReactMount.unmountComponentAtNode}
 */
function unmountComponentFromNode(instance, container) {
  ReactReconciler.unmountComponent(instance);

  if (container.nodeType === DOC_NODE_TYPE) {
    container = container.documentElement;
  }

  // http://jsperf.com/emptying-a-node
  while (container.lastChild) {
    container.removeChild(container.lastChild);
  }
}

/**
 * True if the supplied DOM node has a direct React-rendered child that is
 * not a React root element. Useful for warning in `render`,
 * `unmountComponentAtNode`, etc.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM element contains a direct child that was
 * rendered by React but is not a root element.
 * @internal
 */
function hasNonRootReactChild(node) {
  var reactRootID = getReactRootID(node);
  return reactRootID ? reactRootID !== ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID) : false;
}

/**
 * Returns the first (deepest) ancestor of a node which is rendered by this copy
 * of React.
 */
function findFirstReactDOMImpl(node) {
  // This node might be from another React instance, so we make sure not to
  // examine the node cache here
  for (; node && node.parentNode !== node; node = node.parentNode) {
    if (node.nodeType !== 1) {
      // Not a DOMElement, therefore not a React component
      continue;
    }
    var nodeID = internalGetID(node);
    if (!nodeID) {
      continue;
    }
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);

    // If containersByReactRootID contains the container we find by crawling up
    // the tree, we know that this instance of React rendered the node.
    // nb. isValid's strategy (with containsNode) does not work because render
    // trees may be nested and we don't want a false positive in that case.
    var current = node;
    var lastID;
    do {
      lastID = internalGetID(current);
      current = current.parentNode;
      if (current == null) {
        // The passed-in node has been detached from the container it was
        // originally rendered into.
        return null;
      }
    } while (lastID !== reactRootID);

    if (current === containersByReactRootID[reactRootID]) {
      return node;
    }
  }
  return null;
}

/**
 * Temporary (?) hack so that we can store all top-level pending updates on
 * composites instead of having to worry about different types of components
 * here.
 */
var TopLevelWrapper = function () {};
TopLevelWrapper.prototype.isReactComponent = {};
if (process.env.NODE_ENV !== 'production') {
  TopLevelWrapper.displayName = 'TopLevelWrapper';
}
TopLevelWrapper.prototype.render = function () {
  // this.props is actually a ReactElement
  return this.props;
};

/**
 * Mounting is the process of initializing a React component by creating its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {

  TopLevelWrapper: TopLevelWrapper,

  /** Exposed for debugging purposes **/
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function (container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactElement} nextElement component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function (prevComponent, nextElement, container, callback) {
    ReactMount.scrollMonitor(container, function () {
      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
      if (callback) {
        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
      }
    });

    if (process.env.NODE_ENV !== 'production') {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[getReactRootID(container)] = getReactRootElementInContainer(container);
    }

    return prevComponent;
  },

  /**
   * Register a component into the instance map and starts scroll value
   * monitoring
   * @param {ReactComponent} nextComponent component instance to render
   * @param {DOMElement} container container to render into
   * @return {string} reactRoot ID prefix
   */
  _registerComponent: function (nextComponent, container) {
    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : invariant(false) : undefined;

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

    var reactRootID = ReactMount.registerContainer(container);
    instancesByReactRootID[reactRootID] = nextComponent;
    return reactRootID;
  },

  /**
   * Render a new component into the DOM.
   * @param {ReactElement} nextElement element to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case.
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

    var componentInstance = instantiateReactComponent(nextElement, null);
    var reactRootID = ReactMount._registerComponent(componentInstance, container);

    // The initial render is synchronous but any updates that happen during
    // rendering, in componentWillMount or componentDidMount, will be batched
    // according to the current batching strategy.

    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, reactRootID, container, shouldReuseMarkup, context);

    if (process.env.NODE_ENV !== 'production') {
      // Record the root element in case it later gets transplanted.
      rootElementsByReactRootID[reactRootID] = getReactRootElementInContainer(container);
    }

    return componentInstance;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    !(parentComponent != null && parentComponent._reactInternalInstance != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : invariant(false) : undefined;
    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
  },

  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    !ReactElement.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing an element string, make sure to instantiate ' + 'it by passing it to React.createElement.' : typeof nextElement === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' :
    // Check if it quacks like an element
    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : invariant(false) : undefined;

    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : undefined;

    var nextWrappedElement = new ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);

    var prevComponent = instancesByReactRootID[getReactRootID(container)];

    if (prevComponent) {
      var prevWrappedElement = prevComponent._currentElement;
      var prevElement = prevWrappedElement.props;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        var publicInst = prevComponent._renderedComponent.getPublicInstance();
        var updatedCallback = callback && function () {
          callback.call(publicInst);
        };
        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, container, updatedCallback);
        return publicInst;
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
    var containerHasNonRootReactChild = hasNonRootReactChild(container);

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : undefined;

      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
        var rootElementSibling = reactRootElement;
        while (rootElementSibling) {
          if (internalGetID(rootElementSibling)) {
            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : undefined;
            break;
          }
          rootElementSibling = rootElementSibling.nextSibling;
        }
      }
    }

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, parentComponent != null ? parentComponent._reactInternalInstance._processChildContext(parentComponent._reactInternalInstance._context) : emptyObject)._renderedComponent.getPublicInstance();
    if (callback) {
      callback.call(component);
    }
    return component;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function (nextElement, container, callback) {
    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
  },

  /**
   * Registers a container node into which React components will be rendered.
   * This also creates the "reactRoot" ID that will be assigned to the element
   * rendered within.
   *
   * @param {DOMElement} container DOM element to register as a container.
   * @return {string} The "reactRoot" ID of elements rendered within.
   */
  registerContainer: function (container) {
    var reactRootID = getReactRootID(container);
    if (reactRootID) {
      // If one exists, make sure it is a valid "reactRoot" ID.
      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
    }
    if (!reactRootID) {
      // No valid "reactRoot" ID found, create one.
      reactRootID = ReactInstanceHandles.createReactRootID();
    }
    containersByReactRootID[reactRootID] = container;
    return reactRootID;
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function (container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;

    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : invariant(false) : undefined;

    var reactRootID = getReactRootID(container);
    var component = instancesByReactRootID[reactRootID];
    if (!component) {
      // Check if the node being unmounted was rendered by React, but isn't a
      // root node.
      var containerHasNonRootReactChild = hasNonRootReactChild(container);

      // Check if the container itself is a React root node.
      var containerID = internalGetID(container);
      var isContainerReactRoot = containerID && containerID === ReactInstanceHandles.getReactRootIDFromNodeID(containerID);

      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : undefined;
      }

      return false;
    }
    ReactUpdates.batchedUpdates(unmountComponentFromNode, component, container);
    delete instancesByReactRootID[reactRootID];
    delete containersByReactRootID[reactRootID];
    if (process.env.NODE_ENV !== 'production') {
      delete rootElementsByReactRootID[reactRootID];
    }
    return true;
  },

  /**
   * Finds the container DOM element that contains React component to which the
   * supplied DOM `id` belongs.
   *
   * @param {string} id The ID of an element rendered by a React component.
   * @return {?DOMElement} DOM element that contains the `id`.
   */
  findReactContainerForID: function (id) {
    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
    var container = containersByReactRootID[reactRootID];

    if (process.env.NODE_ENV !== 'production') {
      var rootElement = rootElementsByReactRootID[reactRootID];
      if (rootElement && rootElement.parentNode !== container) {
        process.env.NODE_ENV !== 'production' ? warning(
        // Call internalGetID here because getID calls isValid which calls
        // findReactContainerForID (this function).
        internalGetID(rootElement) === reactRootID, 'ReactMount: Root element ID differed from reactRootID.') : undefined;
        var containerChild = container.firstChild;
        if (containerChild && reactRootID === internalGetID(containerChild)) {
          // If the container has a new child with the same ID as the old
          // root element, then rootElementsByReactRootID[reactRootID] is
          // just stale and needs to be updated. The case that deserves a
          // warning is when the container is empty.
          rootElementsByReactRootID[reactRootID] = containerChild;
        } else {
          process.env.NODE_ENV !== 'production' ? warning(false, 'ReactMount: Root element has been removed from its original ' + 'container. New container: %s', rootElement.parentNode) : undefined;
        }
      }
    }

    return container;
  },

  /**
   * Finds an element rendered by React with the supplied ID.
   *
   * @param {string} id ID of a DOM node in the React component.
   * @return {DOMElement} Root DOM node of the React component.
   */
  findReactNodeByID: function (id) {
    var reactRoot = ReactMount.findReactContainerForID(id);
    return ReactMount.findComponentRoot(reactRoot, id);
  },

  /**
   * Traverses up the ancestors of the supplied node to find a node that is a
   * DOM representation of a React component rendered by this copy of React.
   *
   * @param {*} node
   * @return {?DOMEventTarget}
   * @internal
   */
  getFirstReactDOM: function (node) {
    return findFirstReactDOMImpl(node);
  },

  /**
   * Finds a node with the supplied `targetID` inside of the supplied
   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
   * quickly.
   *
   * @param {DOMEventTarget} ancestorNode Search from this root.
   * @pararm {string} targetID ID of the DOM representation of the component.
   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
   * @internal
   */
  findComponentRoot: function (ancestorNode, targetID) {
    var firstChildren = findComponentRootReusableArray;
    var childIndex = 0;

    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

    if (process.env.NODE_ENV !== 'production') {
      // This will throw on the next line; give an early warning
      process.env.NODE_ENV !== 'production' ? warning(deepestAncestor != null, 'React can\'t find the root component node for data-reactid value ' + '`%s`. If you\'re seeing this message, it probably means that ' + 'you\'ve loaded two copies of React on the page. At this time, only ' + 'a single copy of React can be loaded at a time.', targetID) : undefined;
    }

    firstChildren[0] = deepestAncestor.firstChild;
    firstChildren.length = 1;

    while (childIndex < firstChildren.length) {
      var child = firstChildren[childIndex++];
      var targetChild;

      while (child) {
        var childID = ReactMount.getID(child);
        if (childID) {
          // Even if we find the node we're looking for, we finish looping
          // through its siblings to ensure they're cached so that we don't have
          // to revisit this node again. Otherwise, we make n^2 calls to getID
          // when visiting the many children of a single node in order.

          if (targetID === childID) {
            targetChild = child;
          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
            // If we find a child whose ID is an ancestor of the given ID,
            // then we can be sure that we only want to search the subtree
            // rooted at this child, so we can throw out the rest of the
            // search state.
            firstChildren.length = childIndex = 0;
            firstChildren.push(child.firstChild);
          }
        } else {
          // If this child had no ID, then there's a chance that it was
          // injected automatically by the browser, as when a `<table>`
          // element sprouts an extra `<tbody>` child as a side effect of
          // `.innerHTML` parsing. Optimistically continue down this
          // branch, but not before examining the other siblings.
          firstChildren.push(child.firstChild);
        }

        child = child.nextSibling;
      }

      if (targetChild) {
        // Emptying firstChildren/findComponentRootReusableArray is
        // not necessary for correctness, but it helps the GC reclaim
        // any nodes that were left at the end of the search.
        firstChildren.length = 0;

        return targetChild;
      }
    }

    firstChildren.length = 0;

    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findComponentRoot(..., %s): Unable to find element. This probably ' + 'means the DOM was unexpectedly mutated (e.g., by the browser), ' + 'usually due to forgetting a <tbody> when using tables, nesting tags ' + 'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' + 'parent. ' + 'Try inspecting the child nodes of the element with React ID `%s`.', targetID, ReactMount.getID(ancestorNode)) : invariant(false) : undefined;
  },

  _mountImageIntoNode: function (markup, container, shouldReuseMarkup, transaction) {
    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : invariant(false) : undefined;

    if (shouldReuseMarkup) {
      var rootElement = getReactRootElementInContainer(container);
      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
        return;
      } else {
        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

        var rootMarkup = rootElement.outerHTML;
        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

        var normalizedMarkup = markup;
        if (process.env.NODE_ENV !== 'production') {
          // because rootMarkup is retrieved from the DOM, various normalizations
          // will have occurred which will not be present in `markup`. Here,
          // insert markup into a <div> or <iframe> depending on the container
          // type to perform the same normalizations before comparing.
          var normalizer;
          if (container.nodeType === ELEMENT_NODE_TYPE) {
            normalizer = document.createElement('div');
            normalizer.innerHTML = markup;
            normalizedMarkup = normalizer.innerHTML;
          } else {
            normalizer = document.createElement('iframe');
            document.body.appendChild(normalizer);
            normalizer.contentDocument.write(markup);
            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
            document.body.removeChild(normalizer);
          }
        }

        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\n%s', difference) : invariant(false) : undefined;

        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : undefined;
        }
      }
    }

    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but ' + 'you didn\'t use server rendering. We can\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;

    if (transaction.useCreateElement) {
      while (container.lastChild) {
        container.removeChild(container.lastChild);
      }
      container.appendChild(markup);
    } else {
      setInnerHTML(container, markup);
    }
  },

  ownerDocumentContextKey: ownerDocumentContextKey,

  /**
   * React ID utilities.
   */

  getReactRootID: getReactRootID,

  getID: getID,

  setID: setID,

  getNode: getNode,

  getNodeFromInstance: getNodeFromInstance,

  isValid: isValid,

  purgeID: purgeID
};

ReactPerf.measureMethods(ReactMount, 'ReactMount', {
  _renderNewRootComponent: '_renderNewRootComponent',
  _mountImageIntoNode: '_mountImageIntoNode'
});

module.exports = ReactMount;
}).call(this,require('_process'))

},{"./DOMProperty":37,"./Object.assign":50,"./ReactBrowserEventEmitter":54,"./ReactCurrentOwner":64,"./ReactDOMFeatureFlags":69,"./ReactElement":82,"./ReactEmptyComponentRegistry":85,"./ReactInstanceHandles":91,"./ReactInstanceMap":92,"./ReactMarkupChecksum":94,"./ReactPerf":101,"./ReactReconciler":106,"./ReactUpdateQueue":115,"./ReactUpdates":116,"./instantiateReactComponent":151,"./setInnerHTML":157,"./shouldUpdateReactComponent":159,"./validateDOMNesting":161,"_process":26,"fbjs/lib/containsNode":167,"fbjs/lib/emptyObject":171,"fbjs/lib/invariant":178,"fbjs/lib/warning":189}],96:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChild
 * @typechecks static-only
 */

'use strict';

var ReactComponentEnvironment = require('./ReactComponentEnvironment');
var ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactReconciler = require('./ReactReconciler');
var ReactChildReconciler = require('./ReactChildReconciler');

var flattenChildren = require('./flattenChildren');

/**
 * Updating children of a component may trigger recursive updates. The depth is
 * used to batch recursive updates to render markup more efficiently.
 *
 * @type {number}
 * @private
 */
var updateDepth = 0;

/**
 * Queue of update configuration objects.
 *
 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
 *
 * @type {array<object>}
 * @private
 */
var updateQueue = [];

/**
 * Queue of markup to be rendered.
 *
 * @type {array<string>}
 * @private
 */
var markupQueue = [];

/**
 * Enqueues markup to be rendered and inserted at a supplied index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function enqueueInsertMarkup(parentID, markup, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
    markupIndex: markupQueue.push(markup) - 1,
    content: null,
    fromIndex: null,
    toIndex: toIndex
  });
}

/**
 * Enqueues moving an existing element to another index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function enqueueMove(parentID, fromIndex, toIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
    markupIndex: null,
    content: null,
    fromIndex: fromIndex,
    toIndex: toIndex
  });
}

/**
 * Enqueues removing an element at an index.
 *
 * @param {string} parentID ID of the parent component.
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function enqueueRemove(parentID, fromIndex) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
    markupIndex: null,
    content: null,
    fromIndex: fromIndex,
    toIndex: null
  });
}

/**
 * Enqueues setting the markup of a node.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} markup Markup that renders into an element.
 * @private
 */
function enqueueSetMarkup(parentID, markup) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.SET_MARKUP,
    markupIndex: null,
    content: markup,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Enqueues setting the text content.
 *
 * @param {string} parentID ID of the parent component.
 * @param {string} textContent Text content to set.
 * @private
 */
function enqueueTextContent(parentID, textContent) {
  // NOTE: Null values reduce hidden classes.
  updateQueue.push({
    parentID: parentID,
    parentNode: null,
    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
    markupIndex: null,
    content: textContent,
    fromIndex: null,
    toIndex: null
  });
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue() {
  if (updateQueue.length) {
    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);
    clearQueue();
  }
}

/**
 * Clears any enqueued updates.
 *
 * @private
 */
function clearQueue() {
  updateQueue.length = 0;
  markupQueue.length = 0;
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {

    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
      if (process.env.NODE_ENV !== 'production') {
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
          } finally {
            ReactCurrentOwner.current = null;
          }
        }
      }
      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
    },

    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, transaction, context) {
      var nextChildren;
      if (process.env.NODE_ENV !== 'production') {
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            nextChildren = flattenChildren(nextNestedChildrenElements);
          } finally {
            ReactCurrentOwner.current = null;
          }
          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
        }
      }
      nextChildren = flattenChildren(nextNestedChildrenElements);
      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
    },

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function (nestedChildren, transaction, context) {
      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
      this._renderedChildren = children;
      var mountImages = [];
      var index = 0;
      for (var name in children) {
        if (children.hasOwnProperty(name)) {
          var child = children[name];
          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
          var rootID = this._rootNodeID + name;
          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
          child._mountIndex = index++;
          mountImages.push(mountImage);
        }
      }
      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function (nextContent) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        ReactChildReconciler.unmountChildren(prevChildren);
        // TODO: The setTextContent operation should be enough
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChild(prevChildren[name]);
          }
        }
        // Set new text content.
        this.setTextContent(nextContent);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          if (errorThrown) {
            clearQueue();
          } else {
            processQueue();
          }
        }
      }
    },

    /**
     * Replaces any rendered children with a markup string.
     *
     * @param {string} nextMarkup String of markup.
     * @internal
     */
    updateMarkup: function (nextMarkup) {
      updateDepth++;
      var errorThrown = true;
      try {
        var prevChildren = this._renderedChildren;
        // Remove any rendered children.
        ReactChildReconciler.unmountChildren(prevChildren);
        for (var name in prevChildren) {
          if (prevChildren.hasOwnProperty(name)) {
            this._unmountChildByName(prevChildren[name], name);
          }
        }
        this.setMarkup(nextMarkup);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          if (errorThrown) {
            clearQueue();
          } else {
            processQueue();
          }
        }
      }
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function (nextNestedChildrenElements, transaction, context) {
      updateDepth++;
      var errorThrown = true;
      try {
        this._updateChildren(nextNestedChildrenElements, transaction, context);
        errorThrown = false;
      } finally {
        updateDepth--;
        if (!updateDepth) {
          if (errorThrown) {
            clearQueue();
          } else {
            processQueue();
          }
        }
      }
    },

    /**
     * Improve performance by isolating this hot code path from the try/catch
     * block in `updateChildren`.
     *
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
      var prevChildren = this._renderedChildren;
      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);
      this._renderedChildren = nextChildren;
      if (!nextChildren && !prevChildren) {
        return;
      }
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var lastIndex = 0;
      var nextIndex = 0;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var nextChild = nextChildren[name];
        if (prevChild === nextChild) {
          this.moveChild(prevChild, nextIndex, lastIndex);
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            this._unmountChild(prevChild);
          }
          // The child must be instantiated before it's mounted.
          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);
        }
        nextIndex++;
      }
      // Remove children that are no longer present.
      for (name in prevChildren) {
        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
          this._unmountChild(prevChildren[name]);
        }
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted.
     *
     * @internal
     */
    unmountChildren: function () {
      var renderedChildren = this._renderedChildren;
      ReactChildReconciler.unmountChildren(renderedChildren);
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function (child, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function (child, mountImage) {
      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function (child) {
      enqueueRemove(this._rootNodeID, child._mountIndex);
    },

    /**
     * Sets this text content string.
     *
     * @param {string} textContent Text content to set.
     * @protected
     */
    setTextContent: function (textContent) {
      enqueueTextContent(this._rootNodeID, textContent);
    },

    /**
     * Sets this markup string.
     *
     * @param {string} markup Markup to set.
     * @protected
     */
    setMarkup: function (markup) {
      enqueueSetMarkup(this._rootNodeID, markup);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildByNameAtIndex: function (child, name, index, transaction, context) {
      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
      var rootID = this._rootNodeID + name;
      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
      child._mountIndex = index;
      this.createChild(child, mountImage);
    },

    /**
     * Unmounts a rendered child.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @private
     */
    _unmountChild: function (child) {
      this.removeChild(child);
      child._mountIndex = null;
    }

  }

};

module.exports = ReactMultiChild;
}).call(this,require('_process'))

},{"./ReactChildReconciler":57,"./ReactComponentEnvironment":62,"./ReactCurrentOwner":64,"./ReactMultiChildUpdateTypes":97,"./ReactReconciler":106,"./flattenChildren":142,"_process":26}],97:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactMultiChildUpdateTypes
 */

'use strict';

var keyMirror = require('fbjs/lib/keyMirror');

/**
 * When a component's children are updated, a series of update configuration
 * objects are created in order to batch and serialize the required changes.
 *
 * Enumerates all the possible types of update configurations.
 *
 * @internal
 */
var ReactMultiChildUpdateTypes = keyMirror({
  INSERT_MARKUP: null,
  MOVE_EXISTING: null,
  REMOVE_NODE: null,
  SET_MARKUP: null,
  TEXT_CONTENT: null
});

module.exports = ReactMultiChildUpdateTypes;
},{"fbjs/lib/keyMirror":181}],98:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNativeComponent
 */

'use strict';

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');

var autoGenerateWrapperClass = null;
var genericComponentClass = null;
// This registry keeps track of wrapper classes around native tags.
var tagToComponentClass = {};
var textComponentClass = null;

var ReactNativeComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function (componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a text component class that takes the text string to be
  // rendered as props.
  injectTextComponentClass: function (componentClass) {
    textComponentClass = componentClass;
  },
  // This accepts a keyed object with classes as values. Each key represents a
  // tag. That particular tag will use this class instead of the generic one.
  injectComponentClasses: function (componentClasses) {
    assign(tagToComponentClass, componentClasses);
  }
};

/**
 * Get a composite component wrapper class for a specific tag.
 *
 * @param {ReactElement} element The tag for which to get the class.
 * @return {function} The React class constructor function.
 */
function getComponentClassForElement(element) {
  if (typeof element.type === 'function') {
    return element.type;
  }
  var tag = element.type;
  var componentClass = tagToComponentClass[tag];
  if (componentClass == null) {
    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
  }
  return componentClass;
}

/**
 * Get a native internal component class for a specific tag.
 *
 * @param {ReactElement} element The element to create.
 * @return {function} The internal class constructor function.
 */
function createInternalComponent(element) {
  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : undefined;
  return new genericComponentClass(element.type, element.props);
}

/**
 * @param {ReactText} text
 * @return {ReactComponent}
 */
function createInstanceForText(text) {
  return new textComponentClass(text);
}

/**
 * @param {ReactComponent} component
 * @return {boolean}
 */
function isTextComponent(component) {
  return component instanceof textComponentClass;
}

var ReactNativeComponent = {
  getComponentClassForElement: getComponentClassForElement,
  createInternalComponent: createInternalComponent,
  createInstanceForText: createInstanceForText,
  isTextComponent: isTextComponent,
  injection: ReactNativeComponentInjection
};

module.exports = ReactNativeComponent;
}).call(this,require('_process'))

},{"./Object.assign":50,"_process":26,"fbjs/lib/invariant":178}],99:[function(require,module,exports){
(function (process){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactNoopUpdateQueue
 */

'use strict';

var warning = require('fbjs/lib/warning');

function warnTDZ(publicInstance, callerName) {
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : undefined;
  }
}

/**
 * This is the abstract API for an update queue.
 */
var ReactNoopUpdateQueue = {

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback) {},

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    warnTDZ(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState) {
    warnTDZ(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    warnTDZ(publicInstance, 'setState');
  },

  /**
   * Sets a subset of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialProps Subset of the next props.
   * @internal
   */
  enqueueSetProps: function (publicInstance, partialProps) {
    warnTDZ(publicInstance, 'setProps');
  },

  /**
   * Replaces all of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} props New props.
   * @internal
   */
  enqueueReplaceProps: function (publicInstance, props) {
    warnTDZ(publicInstance, 'replaceProps');
  }

};

module.exports = ReactNoopUpdateQueue;
}).call(this,require('_process'))

},{"_process":26,"fbjs/lib/warning":189}],100:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactOwner
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {

  /**
   * @param {?object} object
   * @return {boolean} True if `object` is a valid owner.
   * @final
   */
  isValidOwner: function (object) {
    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
  },

  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function (component, ref, owner) {
    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function (component, ref, owner) {
    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
    // Check that `component` is still the current ref because we do not want to
    // detach the ref if another component stole it.
    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
      owner.detachRef(ref);
    }
  }

};

module.exports = ReactOwner;
}).call(this,require('_process'))

},{"_process":26,"fbjs/lib/invariant":178}],101:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPerf
 * @typechecks static-only
 */

'use strict';

/**
 * ReactPerf is a general AOP system designed to measure performance. This
 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
 */
var ReactPerf = {
  /**
   * Boolean to enable/disable measurement. Set to false by default to prevent
   * accidental logging and perf loss.
   */
  enableMeasure: false,

  /**
   * Holds onto the measure function in use. By default, don't measure
   * anything, but we'll override this if we inject a measure function.
   */
  storedMeasure: _noMeasure,

  /**
   * @param {object} object
   * @param {string} objectName
   * @param {object<string>} methodNames
   */
  measureMethods: function (object, objectName, methodNames) {
    if (process.env.NODE_ENV !== 'production') {
      for (var key in methodNames) {
        if (!methodNames.hasOwnProperty(key)) {
          continue;
        }
        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);
      }
    }
  },

  /**
   * Use this to wrap methods you want to measure. Zero overhead in production.
   *
   * @param {string} objName
   * @param {string} fnName
   * @param {function} func
   * @return {function}
   */
  measure: function (objName, fnName, func) {
    if (process.env.NODE_ENV !== 'production') {
      var measuredFunc = null;
      var wrapper = function () {
        if (ReactPerf.enableMeasure) {
          if (!measuredFunc) {
            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
          }
          return measuredFunc.apply(this, arguments);
        }
        return func.apply(this, arguments);
      };
      wrapper.displayName = objName + '_' + fnName;
      return wrapper;
    }
    return func;
  },

  injection: {
    /**
     * @param {function} measure
     */
    injectMeasure: function (measure) {
      ReactPerf.storedMeasure = measure;
    }
  }
};

/**
 * Simply passes through the measured function, without measuring it.
 *
 * @param {string} objName
 * @param {string} fnName
 * @param {function} func
 * @return {function}
 */
function _noMeasure(objName, fnName, func) {
  return func;
}

module.exports = ReactPerf;
}).call(this,require('_process'))

},{"_process":26}],102:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocationNames
 */

'use strict';

var ReactPropTypeLocationNames = {};

if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;
}).call(this,require('_process'))

},{"_process":26}],103:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypeLocations
 */

'use strict';

var keyMirror = require('fbjs/lib/keyMirror');

var ReactPropTypeLocations = keyMirror({
  prop: null,
  context: null,
  childContext: null
});

module.exports = ReactPropTypeLocations;
},{"fbjs/lib/keyMirror":181}],104:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactPropTypes
 */

'use strict';

var ReactElement = require('./ReactElement');
var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');

var emptyFunction = require('fbjs/lib/emptyFunction');
var getIteratorFn = require('./getIteratorFn');

/**
 * Collection of methods that allow declaration and validation of props that are
 * supplied to React components. Example usage:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
 *
 * A more formal specification of how these methods are used:
 *
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
 *   decl := ReactPropTypes.{type}(.isRequired)?
 *
 * Each and every declaration produces a function with the same signature. This
 * allows the creation of custom validation functions. For example:
 *
 *  var MyLink = React.createClass({
 *    propTypes: {
 *      // An optional string or URI prop named "href".
 *      href: function(props, propName, componentName) {
 *        var propValue = props[propName];
 *        if (propValue != null && typeof propValue !== 'string' &&
 *            !(propValue instanceof URI)) {
 *          return new Error(
 *            'Expected a string or an URI for ' + propName + ' in ' +
 *            componentName
 *          );
 *        }
 *      }
 *    },
 *    render: function() {...}
 *  });
 *
 * @internal
 */

var ANONYMOUS = '<<anonymous>>';

var ReactPropTypes = {
  array: createPrimitiveTypeChecker('array'),
  bool: createPrimitiveTypeChecker('boolean'),
  func: createPrimitiveTypeChecker('function'),
  number: createPrimitiveTypeChecker('number'),
  object: createPrimitiveTypeChecker('object'),
  string: createPrimitiveTypeChecker('string'),

  any: createAnyTypeChecker(),
  arrayOf: createArrayOfTypeChecker,
  element: createElementTypeChecker(),
  instanceOf: createInstanceTypeChecker,
  node: createNodeChecker(),
  objectOf: createObjectOfTypeChecker,
  oneOf: createEnumTypeChecker,
  oneOfType: createUnionTypeChecker,
  shape: createShapeTypeChecker
};

function createChainableTypeChecker(validate) {
  function checkType(isRequired, props, propName, componentName, location, propFullName) {
    componentName = componentName || ANONYMOUS;
    propFullName = propFullName || propName;
    if (props[propName] == null) {
      var locationName = ReactPropTypeLocationNames[location];
      if (isRequired) {
        return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
      }
      return null;
    } else {
      return validate(props, propName, componentName, location, propFullName);
    }
  }

  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);

  return chainedCheckType;
}

function createPrimitiveTypeChecker(expectedType) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== expectedType) {
      var locationName = ReactPropTypeLocationNames[location];
      // `propValue` being instance of, say, date/regexp, pass the 'object'
      // check, but we can offer a more precise error message here rather than
      // 'of type `object`'.
      var preciseType = getPreciseType(propValue);

      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createAnyTypeChecker() {
  return createChainableTypeChecker(emptyFunction.thatReturns(null));
}

function createArrayOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    if (!Array.isArray(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
    }
    for (var i = 0; i < propValue.length; i++) {
      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']');
      if (error instanceof Error) {
        return error;
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createElementTypeChecker() {
  function validate(props, propName, componentName, location, propFullName) {
    if (!ReactElement.isValidElement(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createInstanceTypeChecker(expectedClass) {
  function validate(props, propName, componentName, location, propFullName) {
    if (!(props[propName] instanceof expectedClass)) {
      var locationName = ReactPropTypeLocationNames[location];
      var expectedClassName = expectedClass.name || ANONYMOUS;
      var actualClassName = getClassName(props[propName]);
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createEnumTypeChecker(expectedValues) {
  if (!Array.isArray(expectedValues)) {
    return createChainableTypeChecker(function () {
      return new Error('Invalid argument supplied to oneOf, expected an instance of array.');
    });
  }

  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    for (var i = 0; i < expectedValues.length; i++) {
      if (propValue === expectedValues[i]) {
        return null;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    var valuesString = JSON.stringify(expectedValues);
    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
  }
  return createChainableTypeChecker(validate);
}

function createObjectOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
    }
    for (var key in propValue) {
      if (propValue.hasOwnProperty(key)) {
        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key);
        if (error instanceof Error) {
          return error;
        }
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createUnionTypeChecker(arrayOfTypeCheckers) {
  if (!Array.isArray(arrayOfTypeCheckers)) {
    return createChainableTypeChecker(function () {
      return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');
    });
  }

  function validate(props, propName, componentName, location, propFullName) {
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (checker(props, propName, componentName, location, propFullName) == null) {
        return null;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
  }
  return createChainableTypeChecker(validate);
}

function createNodeChecker() {
  function validate(props, propName, componentName, location, propFullName) {
    if (!isNode(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createShapeTypeChecker(shapeTypes) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
    }
    for (var key in shapeTypes) {
      var checker = shapeTypes[key];
      if (!checker) {
        continue;
      }
      var error = checker(propValue, key, componentName, location, propFullName + '.' + key);
      if (error) {
        return error;
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function isNode(propValue) {
  switch (typeof propValue) {
    case 'number':
    case 'string':
    case 'undefined':
      return true;
    case 'boolean':
      return !propValue;
    case 'object':
      if (Array.isArray(propValue)) {
        return propValue.every(isNode);
      }
      if (propValue === null || ReactElement.isValidElement(propValue)) {
        return true;
      }

      var iteratorFn = getIteratorFn(propValue);
      if (iteratorFn) {
        var iterator = iteratorFn.call(propValue);
        var step;
        if (iteratorFn !== propValue.entries) {
          while (!(step = iterator.next()).done) {
            if (!isNode(step.value)) {
              return false;
            }
          }
        } else {
          // Iterator will provide entry [k,v] tuples rather than values.
          while (!(step = iterator.next()).done) {
            var entry = step.value;
            if (entry) {
              if (!isNode(entry[1])) {
                return false;
              }
            }
          }
        }
      } else {
        return false;
      }

      return true;
    default:
      return false;
  }
}

// Equivalent of `typeof` but with special handling for array and regexp.
function getPropType(propValue) {
  var propType = typeof propValue;
  if (Array.isArray(propValue)) {
    return 'array';
  }
  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return 'object';
  }
  return propType;
}

// This handles more types than `getPropType`. Only used for error messages.
// See `createPrimitiveTypeChecker`.
function getPreciseType(propValue) {
  var propType = getPropType(propValue);
  if (propType === 'object') {
    if (propValue instanceof Date) {
      return 'date';
    } else if (propValue instanceof RegExp) {
      return 'regexp';
    }
  }
  return propType;
}

// Returns class name of the object, if any.
function getClassName(propValue) {
  if (!propValue.constructor || !propValue.constructor.name) {
    return '<<anonymous>>';
  }
  return propValue.constructor.name;
}

module.exports = ReactPropTypes;
},{"./ReactElement":82,"./ReactPropTypeLocationNames":102,"./getIteratorFn":148,"fbjs/lib/emptyFunction":170}],105:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconcileTransaction
 * @typechecks static-only
 */

'use strict';

var CallbackQueue = require('./CallbackQueue');
var PooledClass = require('./PooledClass');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactDOMFeatureFlags = require('./ReactDOMFeatureFlags');
var ReactInputSelection = require('./ReactInputSelection');
var Transaction = require('./Transaction');

var assign = require('./Object.assign');

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function () {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
   *   restores the previous value.
   */
  close: function (previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function () {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function () {
    this.reactMountReady.notifyAll();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction(forceHTML) {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.useCreateElement = !forceHTML && ReactDOMFeatureFlags.useCreateElement;
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap procedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return this.reactMountReady;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;
  }
};

assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;
},{"./CallbackQueue":33,"./Object.assign":50,"./PooledClass":51,"./ReactBrowserEventEmitter":54,"./ReactDOMFeatureFlags":69,"./ReactInputSelection":90,"./Transaction":133}],106:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactReconciler
 */

'use strict';

var ReactRef = require('./ReactRef');

/**
 * Helper to call ReactRef.attachRefs with this composite component, split out
 * to avoid allocations in the transaction mount-ready queue.
 */
function attachRefs() {
  ReactRef.attachRefs(this, this._currentElement);
}

var ReactReconciler = {

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactComponent} internalInstance
   * @param {string} rootID DOM ID of the root node.
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (internalInstance, rootID, transaction, context) {
    var markup = internalInstance.mountComponent(rootID, transaction, context);
    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }
    return markup;
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function (internalInstance) {
    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
    internalInstance.unmountComponent();
  },

  /**
   * Update a component using a new element.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @internal
   */
  receiveComponent: function (internalInstance, nextElement, transaction, context) {
    var prevElement = internalInstance._currentElement;

    if (nextElement === prevElement && context === internalInstance._context) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for an element created outside a composite to be
      // deeply mutated and reused.

      // TODO: Bailing out early is just a perf optimization right?
      // TODO: Removing the return statement should affect correctness?
      return;
    }

    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

    if (refsChanged) {
      ReactRef.detachRefs(internalInstance, prevElement);
    }

    internalInstance.receiveComponent(nextElement, transaction, context);

    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }
  },

  /**
   * Flush any dirty changes in a component.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (internalInstance, transaction) {
    internalInstance.performUpdateIfNecessary(transaction);
  }

};

module.exports = ReactReconciler;
},{"./ReactRef":107}],107:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRef
 */

'use strict';

var ReactOwner = require('./ReactOwner');

var ReactRef = {};

function attachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(component.getPublicInstance());
  } else {
    // Legacy ref
    ReactOwner.addComponentAsRefTo(component, ref, owner);
  }
}

function detachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(null);
  } else {
    // Legacy ref
    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
  }
}

ReactRef.attachRefs = function (instance, element) {
  if (element === null || element === false) {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    attachRef(ref, instance, element._owner);
  }
};

ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
  // If either the owner or a `ref` has changed, make sure the newest owner
  // has stored a reference to `this`, and the previous owner (if different)
  // has forgotten the reference to `this`. We use the element instead
  // of the public this.props because the post processing cannot determine
  // a ref. The ref conceptually lives on the element.

  // TODO: Should this even be possible? The owner cannot change because
  // it's forbidden by shouldUpdateReactComponent. The ref can change
  // if you swap the keys of but not the refs. Reconsider where this check
  // is made. It probably belongs where the key checking and
  // instantiateReactComponent is done.

  var prevEmpty = prevElement === null || prevElement === false;
  var nextEmpty = nextElement === null || nextElement === false;

  return(
    // This has a few false positives w/r/t empty components.
    prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref
  );
};

ReactRef.detachRefs = function (instance, element) {
  if (element === null || element === false) {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    detachRef(ref, instance, element._owner);
  }
};

module.exports = ReactRef;
},{"./ReactOwner":100}],108:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactRootIndex
 * @typechecks
 */

'use strict';

var ReactRootIndexInjection = {
  /**
   * @param {function} _createReactRootIndex
   */
  injectCreateReactRootIndex: function (_createReactRootIndex) {
    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
  }
};

var ReactRootIndex = {
  createReactRootIndex: null,
  injection: ReactRootIndexInjection
};

module.exports = ReactRootIndex;
},{}],109:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerBatchingStrategy
 * @typechecks
 */

'use strict';

var ReactServerBatchingStrategy = {
  isBatchingUpdates: false,
  batchedUpdates: function (callback) {
    // Don't do anything here. During the server rendering we don't want to
    // schedule any updates. We will simply ignore them.
  }
};

module.exports = ReactServerBatchingStrategy;
},{}],110:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks static-only
 * @providesModule ReactServerRendering
 */
'use strict';

var ReactDefaultBatchingStrategy = require('./ReactDefaultBatchingStrategy');
var ReactElement = require('./ReactElement');
var ReactInstanceHandles = require('./ReactInstanceHandles');
var ReactMarkupChecksum = require('./ReactMarkupChecksum');
var ReactServerBatchingStrategy = require('./ReactServerBatchingStrategy');
var ReactServerRenderingTransaction = require('./ReactServerRenderingTransaction');
var ReactUpdates = require('./ReactUpdates');

var emptyObject = require('fbjs/lib/emptyObject');
var instantiateReactComponent = require('./instantiateReactComponent');
var invariant = require('fbjs/lib/invariant');

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup
 */
function renderToString(element) {
  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : undefined;

  var transaction;
  try {
    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(false);

    return transaction.perform(function () {
      var componentInstance = instantiateReactComponent(element, null);
      var markup = componentInstance.mountComponent(id, transaction, emptyObject);
      return ReactMarkupChecksum.addChecksumToMarkup(markup);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
    // Revert to the DOM batching strategy since these two renderers
    // currently share these stateful modules.
    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
  }
}

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup, without the extra React ID and checksum
 * (for generating static pages)
 */
function renderToStaticMarkup(element) {
  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : undefined;

  var transaction;
  try {
    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

    var id = ReactInstanceHandles.createReactRootID();
    transaction = ReactServerRenderingTransaction.getPooled(true);

    return transaction.perform(function () {
      var componentInstance = instantiateReactComponent(element, null);
      return componentInstance.mountComponent(id, transaction, emptyObject);
    }, null);
  } finally {
    ReactServerRenderingTransaction.release(transaction);
    // Revert to the DOM batching strategy since these two renderers
    // currently share these stateful modules.
    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
  }
}

module.exports = {
  renderToString: renderToString,
  renderToStaticMarkup: renderToStaticMarkup
};
}).call(this,require('_process'))

},{"./ReactDefaultBatchingStrategy":78,"./ReactElement":82,"./ReactInstanceHandles":91,"./ReactMarkupChecksum":94,"./ReactServerBatchingStrategy":109,"./ReactServerRenderingTransaction":111,"./ReactUpdates":116,"./instantiateReactComponent":151,"_process":26,"fbjs/lib/emptyObject":171,"fbjs/lib/invariant":178}],111:[function(require,module,exports){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactServerRenderingTransaction
 * @typechecks
 */

'use strict';

var PooledClass = require('./PooledClass');
var CallbackQueue = require('./CallbackQueue');
var Transaction = require('./Transaction');

var assign = require('./Object.assign');
var emptyFunction = require('fbjs/lib/emptyFunction');

/**
 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
 * during the performing of the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function () {
    this.reactMountReady.reset();
  },

  close: emptyFunction
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.useCreateElement = false;
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap procedures.
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return this.reactMountReady;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;
  }
};

assign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;
},{"./CallbackQueue":33,"./Object.assign":50,"./PooledClass":51,"./Transaction":133,"fbjs/lib/emptyFunction":170}],112:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks static-only
 * @providesModule ReactTransitionChildMapping
 */

'use strict';

var flattenChildren = require('./flattenChildren');

var ReactTransitionChildMapping = {
  /**
   * Given `this.props.children`, return an object mapping key to child. Just
   * simple syntactic sugar around flattenChildren().
   *
   * @param {*} children `this.props.children`
   * @return {object} Mapping of key to child
   */
  getChildMapping: function (children) {
    if (!children) {
      return children;
    }
    return flattenChildren(children);
  },

  /**
   * When you're adding or removing children some may be added or removed in the
   * same render pass. We want to show *both* since we want to simultaneously
   * animate elements in and out. This function takes a previous set of keys
   * and a new set of keys and merges them with its best guess of the correct
   * ordering. In the future we may expose some of the utilities in
   * ReactMultiChild to make this easy, but for now React itself does not
   * directly have this concept of the union of prevChildren and nextChildren
   * so we implement it here.
   *
   * @param {object} prev prev children as returned from
   * `ReactTransitionChildMapping.getChildMapping()`.
   * @param {object} next next children as returned from
   * `ReactTransitionChildMapping.getChildMapping()`.
   * @return {object} a key set that contains all keys in `prev` and all keys
   * in `next` in a reasonable order.
   */
  mergeChildMappings: function (prev, next) {
    prev = prev || {};
    next = next || {};

    function getValueForKey(key) {
      if (next.hasOwnProperty(key)) {
        return next[key];
      } else {
        return prev[key];
      }
    }

    // For each key of `next`, the list of keys to insert before that key in
    // the combined list
    var nextKeysPending = {};

    var pendingKeys = [];
    for (var prevKey in prev) {
      if (next.hasOwnProperty(prevKey)) {
        if (pendingKeys.length) {
          nextKeysPending[prevKey] = pendingKeys;
          pendingKeys = [];
        }
      } else {
        pendingKeys.push(prevKey);
      }
    }

    var i;
    var childMapping = {};
    for (var nextKey in next) {
      if (nextKeysPending.hasOwnProperty(nextKey)) {
        for (i = 0; i < nextKeysPending[nextKey].length; i++) {
          var pendingNextKey = nextKeysPending[nextKey][i];
          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
        }
      }
      childMapping[nextKey] = getValueForKey(nextKey);
    }

    // Finally, add the keys which didn't appear before any key in `next`
    for (i = 0; i < pendingKeys.length; i++) {
      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
    }

    return childMapping;
  }
};

module.exports = ReactTransitionChildMapping;
},{"./flattenChildren":142}],113:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactTransitionEvents
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

/**
 * EVENT_NAME_MAP is used to determine which event fired when a
 * transition/animation ends, based on the style property used to
 * define that event.
 */
var EVENT_NAME_MAP = {
  transitionend: {
    'transition': 'transitionend',
    'WebkitTransition': 'webkitTransitionEnd',
    'MozTransition': 'mozTransitionEnd',
    'OTransition': 'oTransitionEnd',
    'msTransition': 'MSTransitionEnd'
  },

  animationend: {
    'animation': 'animationend',
    'WebkitAnimation': 'webkitAnimationEnd',
    'MozAnimation': 'mozAnimationEnd',
    'OAnimation': 'oAnimationEnd',
    'msAnimation': 'MSAnimationEnd'
  }
};

var endEvents = [];

function detectEvents() {
  var testEl = document.createElement('div');
  var style = testEl.style;

  // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are useable, and if not remove them
  // from the map
  if (!('AnimationEvent' in window)) {
    delete EVENT_NAME_MAP.animationend.animation;
  }

  if (!('TransitionEvent' in window)) {
    delete EVENT_NAME_MAP.transitionend.transition;
  }

  for (var baseEventName in EVENT_NAME_MAP) {
    var baseEvents = EVENT_NAME_MAP[baseEventName];
    for (var styleName in baseEvents) {
      if (styleName in style) {
        endEvents.push(baseEvents[styleName]);
        break;
      }
    }
  }
}

if (ExecutionEnvironment.canUseDOM) {
  detectEvents();
}

// We use the raw {add|remove}EventListener() call because EventListener
// does not know how to remove event listeners and we really should
// clean up. Also, these events are not triggered in older browsers
// so we should be A-OK here.

function addEventListener(node, eventName, eventListener) {
  node.addEventListener(eventName, eventListener, false);
}

function removeEventListener(node, eventName, eventListener) {
  node.removeEventListener(eventName, eventListener, false);
}

var ReactTransitionEvents = {
  addEndEventListener: function (node, eventListener) {
    if (endEvents.length === 0) {
      // If CSS transitions are not supported, trigger an "end animation"
      // event immediately.
      window.setTimeout(eventListener, 0);
      return;
    }
    endEvents.forEach(function (endEvent) {
      addEventListener(node, endEvent, eventListener);
    });
  },

  removeEndEventListener: function (node, eventListener) {
    if (endEvents.length === 0) {
      return;
    }
    endEvents.forEach(function (endEvent) {
      removeEventListener(node, endEvent, eventListener);
    });
  }
};

module.exports = ReactTransitionEvents;
},{"fbjs/lib/ExecutionEnvironment":164}],114:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactTransitionGroup
 */

'use strict';

var React = require('./React');
var ReactTransitionChildMapping = require('./ReactTransitionChildMapping');

var assign = require('./Object.assign');
var emptyFunction = require('fbjs/lib/emptyFunction');

var ReactTransitionGroup = React.createClass({
  displayName: 'ReactTransitionGroup',

  propTypes: {
    component: React.PropTypes.any,
    childFactory: React.PropTypes.func
  },

  getDefaultProps: function () {
    return {
      component: 'span',
      childFactory: emptyFunction.thatReturnsArgument
    };
  },

  getInitialState: function () {
    return {
      children: ReactTransitionChildMapping.getChildMapping(this.props.children)
    };
  },

  componentWillMount: function () {
    this.currentlyTransitioningKeys = {};
    this.keysToEnter = [];
    this.keysToLeave = [];
  },

  componentDidMount: function () {
    var initialChildMapping = this.state.children;
    for (var key in initialChildMapping) {
      if (initialChildMapping[key]) {
        this.performAppear(key);
      }
    }
  },

  componentWillReceiveProps: function (nextProps) {
    var nextChildMapping = ReactTransitionChildMapping.getChildMapping(nextProps.children);
    var prevChildMapping = this.state.children;

    this.setState({
      children: ReactTransitionChildMapping.mergeChildMappings(prevChildMapping, nextChildMapping)
    });

    var key;

    for (key in nextChildMapping) {
      var hasPrev = prevChildMapping && prevChildMapping.hasOwnProperty(key);
      if (nextChildMapping[key] && !hasPrev && !this.currentlyTransitioningKeys[key]) {
        this.keysToEnter.push(key);
      }
    }

    for (key in prevChildMapping) {
      var hasNext = nextChildMapping && nextChildMapping.hasOwnProperty(key);
      if (prevChildMapping[key] && !hasNext && !this.currentlyTransitioningKeys[key]) {
        this.keysToLeave.push(key);
      }
    }

    // If we want to someday check for reordering, we could do it here.
  },

  componentDidUpdate: function () {
    var keysToEnter = this.keysToEnter;
    this.keysToEnter = [];
    keysToEnter.forEach(this.performEnter);

    var keysToLeave = this.keysToLeave;
    this.keysToLeave = [];
    keysToLeave.forEach(this.performLeave);
  },

  performAppear: function (key) {
    this.currentlyTransitioningKeys[key] = true;

    var component = this.refs[key];

    if (component.componentWillAppear) {
      component.componentWillAppear(this._handleDoneAppearing.bind(this, key));
    } else {
      this._handleDoneAppearing(key);
    }
  },

  _handleDoneAppearing: function (key) {
    var component = this.refs[key];
    if (component.componentDidAppear) {
      component.componentDidAppear();
    }

    delete this.currentlyTransitioningKeys[key];

    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(this.props.children);

    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
      // This was removed before it had fully appeared. Remove it.
      this.performLeave(key);
    }
  },

  performEnter: function (key) {
    this.currentlyTransitioningKeys[key] = true;

    var component = this.refs[key];

    if (component.componentWillEnter) {
      component.componentWillEnter(this._handleDoneEntering.bind(this, key));
    } else {
      this._handleDoneEntering(key);
    }
  },

  _handleDoneEntering: function (key) {
    var component = this.refs[key];
    if (component.componentDidEnter) {
      component.componentDidEnter();
    }

    delete this.currentlyTransitioningKeys[key];

    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(this.props.children);

    if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
      // This was removed before it had fully entered. Remove it.
      this.performLeave(key);
    }
  },

  performLeave: function (key) {
    this.currentlyTransitioningKeys[key] = true;

    var component = this.refs[key];
    if (component.componentWillLeave) {
      component.componentWillLeave(this._handleDoneLeaving.bind(this, key));
    } else {
      // Note that this is somewhat dangerous b/c it calls setState()
      // again, effectively mutating the component before all the work
      // is done.
      this._handleDoneLeaving(key);
    }
  },

  _handleDoneLeaving: function (key) {
    var component = this.refs[key];

    if (component.componentDidLeave) {
      component.componentDidLeave();
    }

    delete this.currentlyTransitioningKeys[key];

    var currentChildMapping = ReactTransitionChildMapping.getChildMapping(this.props.children);

    if (currentChildMapping && currentChildMapping.hasOwnProperty(key)) {
      // This entered again before it fully left. Add it again.
      this.performEnter(key);
    } else {
      this.setState(function (state) {
        var newChildren = assign({}, state.children);
        delete newChildren[key];
        return { children: newChildren };
      });
    }
  },

  render: function () {
    // TODO: we could get rid of the need for the wrapper node
    // by cloning a single child
    var childrenToRender = [];
    for (var key in this.state.children) {
      var child = this.state.children[key];
      if (child) {
        // You may need to apply reactive updates to a child as it is leaving.
        // The normal React way to do it won't work since the child will have
        // already been removed. In case you need this behavior you can provide
        // a childFactory function to wrap every child, even the ones that are
        // leaving.
        childrenToRender.push(React.cloneElement(this.props.childFactory(child), { ref: key, key: key }));
      }
    }
    return React.createElement(this.props.component, this.props, childrenToRender);
  }
});

module.exports = ReactTransitionGroup;
},{"./Object.assign":50,"./React":52,"./ReactTransitionChildMapping":112,"fbjs/lib/emptyFunction":170}],115:[function(require,module,exports){
(function (process){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdateQueue
 */

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactElement = require('./ReactElement');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactUpdates = require('./ReactUpdates');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

function enqueueUpdate(internalInstance) {
  ReactUpdates.enqueueUpdate(internalInstance);
}

function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
  var internalInstance = ReactInstanceMap.get(publicInstance);
  if (!internalInstance) {
    if (process.env.NODE_ENV !== 'production') {
      // Only warn when we have a callerName. Otherwise we should be silent.
      // We're probably calling from enqueueCallback. We don't want to warn
      // there because we already warned for the corresponding lifecycle method.
      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : undefined;
    }
    return null;
  }

  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition ' + '(such as within `render`). Render methods should be a pure function ' + 'of props and state.', callerName) : undefined;
  }

  return internalInstance;
}

/**
 * ReactUpdateQueue allows for state updates to be scheduled into a later
 * reconciliation step.
 */
var ReactUpdateQueue = {

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    if (process.env.NODE_ENV !== 'production') {
      var owner = ReactCurrentOwner.current;
      if (owner !== null) {
        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
        owner._warnedAboutRefsInRender = true;
      }
    }
    var internalInstance = ReactInstanceMap.get(publicInstance);
    if (internalInstance) {
      // During componentWillMount and render this will still be null but after
      // that will always render to something. At least for now. So we can use
      // this hack.
      return !!internalInstance._renderedComponent;
    } else {
      return false;
    }
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback) {
    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

    // Previously we would throw an error if we didn't have an internal
    // instance. Since we want to make it a no-op instead, we mirror the same
    // behavior we have in other enqueue* methods.
    // We also need to ignore callbacks in componentWillMount. See
    // enqueueUpdates.
    if (!internalInstance) {
      return null;
    }

    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    // TODO: The callback here is ignored when setState is called from
    // componentWillMount. Either fix it or disallow doing so completely in
    // favor of getInitialState. Alternatively, we can disallow
    // componentWillMount during server-side rendering.
    enqueueUpdate(internalInstance);
  },

  enqueueCallbackInternal: function (internalInstance, callback) {
    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    enqueueUpdate(internalInstance);
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingForceUpdate = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingStateQueue = [completeState];
    internalInstance._pendingReplaceState = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

    if (!internalInstance) {
      return;
    }

    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
    queue.push(partialState);

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialProps Subset of the next props.
   * @internal
   */
  enqueueSetProps: function (publicInstance, partialProps) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setProps');
    if (!internalInstance) {
      return;
    }
    ReactUpdateQueue.enqueueSetPropsInternal(internalInstance, partialProps);
  },

  enqueueSetPropsInternal: function (internalInstance, partialProps) {
    var topLevelWrapper = internalInstance._topLevelWrapper;
    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setProps(...): You called `setProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

    // Merge with the pending element if it exists, otherwise with existing
    // element props.
    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
    var element = wrapElement.props;
    var props = assign({}, element.props, partialProps);
    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

    enqueueUpdate(topLevelWrapper);
  },

  /**
   * Replaces all of the props.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} props New props.
   * @internal
   */
  enqueueReplaceProps: function (publicInstance, props) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceProps');
    if (!internalInstance) {
      return;
    }
    ReactUpdateQueue.enqueueReplacePropsInternal(internalInstance, props);
  },

  enqueueReplacePropsInternal: function (internalInstance, props) {
    var topLevelWrapper = internalInstance._topLevelWrapper;
    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'replaceProps(...): You called `replaceProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;

    // Merge with the pending element if it exists, otherwise with existing
    // element props.
    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
    var element = wrapElement.props;
    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));

    enqueueUpdate(topLevelWrapper);
  },

  enqueueElementInternal: function (internalInstance, newElement) {
    internalInstance._pendingElement = newElement;
    enqueueUpdate(internalInstance);
  }

};

module.exports = ReactUpdateQueue;
}).call(this,require('_process'))

},{"./Object.assign":50,"./ReactCurrentOwner":64,"./ReactElement":82,"./ReactInstanceMap":92,"./ReactUpdates":116,"_process":26,"fbjs/lib/invariant":178,"fbjs/lib/warning":189}],116:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactUpdates
 */

'use strict';

var CallbackQueue = require('./CallbackQueue');
var PooledClass = require('./PooledClass');
var ReactPerf = require('./ReactPerf');
var ReactReconciler = require('./ReactReconciler');
var Transaction = require('./Transaction');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');

var dirtyComponents = [];
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : undefined;
}

var NESTED_UPDATES = {
  initialize: function () {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function () {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function () {
    this.callbackQueue.reset();
  },
  close: function () {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled( /* forceHTML */false);
}

assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function () {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function (method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b, c, d, e) {
  ensureInjected();
  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
}

/**
 * Array comparator for ReactComponents by mount ordering.
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountOrderComparator(c1, c2) {
  return c1._mountOrder - c2._mountOrder;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : undefined;

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountOrderComparator);

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, it will still
    // be here, but we assume that it has cleared its _pendingCallbacks and
    // that performUpdateIfNecessary is a noop.
    var component = dirtyComponents[i];

    // If performUpdateIfNecessary happens to enqueue any new updates, we
    // shouldn't execute the callbacks until the next render happens, so
    // stash the callbacks first
    var callbacks = component._pendingCallbacks;
    component._pendingCallbacks = null;

    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);

    if (callbacks) {
      for (var j = 0; j < callbacks.length; j++) {
        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
      }
    }
  }
}

var flushBatchedUpdates = function () {
  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
  // array and perform any updates enqueued by mount-ready handlers (i.e.,
  // componentDidUpdate) but we need to check here too in order to catch
  // updates enqueued by setState callbacks and asap calls.
  while (dirtyComponents.length || asapEnqueued) {
    if (dirtyComponents.length) {
      var transaction = ReactUpdatesFlushTransaction.getPooled();
      transaction.perform(runBatchedUpdates, null, transaction);
      ReactUpdatesFlushTransaction.release(transaction);
    }

    if (asapEnqueued) {
      asapEnqueued = false;
      var queue = asapCallbackQueue;
      asapCallbackQueue = CallbackQueue.getPooled();
      queue.notifyAll();
      CallbackQueue.release(queue);
    }
  }
};
flushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component) {
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setProps, setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component);
    return;
  }

  dirtyComponents.push(component);
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : undefined;
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function (ReconcileTransaction) {
    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : undefined;
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function (_batchingStrategy) {
    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : undefined;
    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : undefined;
    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : undefined;
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;
}).call(this,require('_process'))

},{"./CallbackQueue":33,"./Object.assign":50,"./PooledClass":51,"./ReactPerf":101,"./ReactReconciler":106,"./Transaction":133,"_process":26,"fbjs/lib/invariant":178}],117:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ReactVersion
 */

'use strict';

module.exports = '0.14.2';
},{}],118:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SVGDOMPropertyConfig
 */

'use strict';

var DOMProperty = require('./DOMProperty');

var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

var NS = {
  xlink: 'http://www.w3.org/1999/xlink',
  xml: 'http://www.w3.org/XML/1998/namespace'
};

var SVGDOMPropertyConfig = {
  Properties: {
    clipPath: MUST_USE_ATTRIBUTE,
    cx: MUST_USE_ATTRIBUTE,
    cy: MUST_USE_ATTRIBUTE,
    d: MUST_USE_ATTRIBUTE,
    dx: MUST_USE_ATTRIBUTE,
    dy: MUST_USE_ATTRIBUTE,
    fill: MUST_USE_ATTRIBUTE,
    fillOpacity: MUST_USE_ATTRIBUTE,
    fontFamily: MUST_USE_ATTRIBUTE,
    fontSize: MUST_USE_ATTRIBUTE,
    fx: MUST_USE_ATTRIBUTE,
    fy: MUST_USE_ATTRIBUTE,
    gradientTransform: MUST_USE_ATTRIBUTE,
    gradientUnits: MUST_USE_ATTRIBUTE,
    markerEnd: MUST_USE_ATTRIBUTE,
    markerMid: MUST_USE_ATTRIBUTE,
    markerStart: MUST_USE_ATTRIBUTE,
    offset: MUST_USE_ATTRIBUTE,
    opacity: MUST_USE_ATTRIBUTE,
    patternContentUnits: MUST_USE_ATTRIBUTE,
    patternUnits: MUST_USE_ATTRIBUTE,
    points: MUST_USE_ATTRIBUTE,
    preserveAspectRatio: MUST_USE_ATTRIBUTE,
    r: MUST_USE_ATTRIBUTE,
    rx: MUST_USE_ATTRIBUTE,
    ry: MUST_USE_ATTRIBUTE,
    spreadMethod: MUST_USE_ATTRIBUTE,
    stopColor: MUST_USE_ATTRIBUTE,
    stopOpacity: MUST_USE_ATTRIBUTE,
    stroke: MUST_USE_ATTRIBUTE,
    strokeDasharray: MUST_USE_ATTRIBUTE,
    strokeLinecap: MUST_USE_ATTRIBUTE,
    strokeOpacity: MUST_USE_ATTRIBUTE,
    strokeWidth: MUST_USE_ATTRIBUTE,
    textAnchor: MUST_USE_ATTRIBUTE,
    transform: MUST_USE_ATTRIBUTE,
    version: MUST_USE_ATTRIBUTE,
    viewBox: MUST_USE_ATTRIBUTE,
    x1: MUST_USE_ATTRIBUTE,
    x2: MUST_USE_ATTRIBUTE,
    x: MUST_USE_ATTRIBUTE,
    xlinkActuate: MUST_USE_ATTRIBUTE,
    xlinkArcrole: MUST_USE_ATTRIBUTE,
    xlinkHref: MUST_USE_ATTRIBUTE,
    xlinkRole: MUST_USE_ATTRIBUTE,
    xlinkShow: MUST_USE_ATTRIBUTE,
    xlinkTitle: MUST_USE_ATTRIBUTE,
    xlinkType: MUST_USE_ATTRIBUTE,
    xmlBase: MUST_USE_ATTRIBUTE,
    xmlLang: MUST_USE_ATTRIBUTE,
    xmlSpace: MUST_USE_ATTRIBUTE,
    y1: MUST_USE_ATTRIBUTE,
    y2: MUST_USE_ATTRIBUTE,
    y: MUST_USE_ATTRIBUTE
  },
  DOMAttributeNamespaces: {
    xlinkActuate: NS.xlink,
    xlinkArcrole: NS.xlink,
    xlinkHref: NS.xlink,
    xlinkRole: NS.xlink,
    xlinkShow: NS.xlink,
    xlinkTitle: NS.xlink,
    xlinkType: NS.xlink,
    xmlBase: NS.xml,
    xmlLang: NS.xml,
    xmlSpace: NS.xml
  },
  DOMAttributeNames: {
    clipPath: 'clip-path',
    fillOpacity: 'fill-opacity',
    fontFamily: 'font-family',
    fontSize: 'font-size',
    gradientTransform: 'gradientTransform',
    gradientUnits: 'gradientUnits',
    markerEnd: 'marker-end',
    markerMid: 'marker-mid',
    markerStart: 'marker-start',
    patternContentUnits: 'patternContentUnits',
    patternUnits: 'patternUnits',
    preserveAspectRatio: 'preserveAspectRatio',
    spreadMethod: 'spreadMethod',
    stopColor: 'stop-color',
    stopOpacity: 'stop-opacity',
    strokeDasharray: 'stroke-dasharray',
    strokeLinecap: 'stroke-linecap',
    strokeOpacity: 'stroke-opacity',
    strokeWidth: 'stroke-width',
    textAnchor: 'text-anchor',
    viewBox: 'viewBox',
    xlinkActuate: 'xlink:actuate',
    xlinkArcrole: 'xlink:arcrole',
    xlinkHref: 'xlink:href',
    xlinkRole: 'xlink:role',
    xlinkShow: 'xlink:show',
    xlinkTitle: 'xlink:title',
    xlinkType: 'xlink:type',
    xmlBase: 'xml:base',
    xmlLang: 'xml:lang',
    xmlSpace: 'xml:space'
  }
};

module.exports = SVGDOMPropertyConfig;
},{"./DOMProperty":37}],119:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SelectEventPlugin
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventPropagators = require('./EventPropagators');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactInputSelection = require('./ReactInputSelection');
var SyntheticEvent = require('./SyntheticEvent');

var getActiveElement = require('fbjs/lib/getActiveElement');
var isTextInputElement = require('./isTextInputElement');
var keyOf = require('fbjs/lib/keyOf');
var shallowEqual = require('fbjs/lib/shallowEqual');

var topLevelTypes = EventConstants.topLevelTypes;

var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSelect: null }),
      captured: keyOf({ onSelectCapture: null })
    },
    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]
  }
};

var activeElement = null;
var activeElementID = null;
var lastSelection = null;
var mouseDown = false;

// Track whether a listener exists for this plugin. If none exist, we do
// not extract events.
var hasListener = false;
var ON_SELECT_KEY = keyOf({ onSelect: null });

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getSelection(node) {
  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
    return null;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent, nativeEventTarget);

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }

  return null;
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    if (!hasListener) {
      return null;
    }

    switch (topLevelType) {
      // Track the input node that has focus.
      case topLevelTypes.topFocus:
        if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {
          activeElement = topLevelTarget;
          activeElementID = topLevelTargetID;
          lastSelection = null;
        }
        break;
      case topLevelTypes.topBlur:
        activeElement = null;
        activeElementID = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case topLevelTypes.topMouseDown:
        mouseDown = true;
        break;
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topMouseUp:
        mouseDown = false;
        return constructSelectEvent(nativeEvent, nativeEventTarget);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't). IE's event fires out of order with respect
      // to key and input events on deletion, so we discard it.
      //
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      // This is also our approach for IE handling, for the reason above.
      case topLevelTypes.topSelectionChange:
        if (skipSelectionChangeEvent) {
          break;
        }
      // falls through
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        return constructSelectEvent(nativeEvent, nativeEventTarget);
    }

    return null;
  },

  didPutListener: function (id, registrationName, listener) {
    if (registrationName === ON_SELECT_KEY) {
      hasListener = true;
    }
  }
};

module.exports = SelectEventPlugin;
},{"./EventConstants":42,"./EventPropagators":46,"./ReactInputSelection":90,"./SyntheticEvent":125,"./isTextInputElement":153,"fbjs/lib/ExecutionEnvironment":164,"fbjs/lib/getActiveElement":173,"fbjs/lib/keyOf":182,"fbjs/lib/shallowEqual":187}],120:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ServerReactRootIndex
 * @typechecks
 */

'use strict';

/**
 * Size of the reactRoot ID space. We generate random numbers for React root
 * IDs and if there's a collision the events and DOM update system will
 * get confused. In the future we need a way to generate GUIDs but for
 * now this will work on a smaller scale.
 */
var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

var ServerReactRootIndex = {
  createReactRootIndex: function () {
    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
  }
};

module.exports = ServerReactRootIndex;
},{}],121:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SimpleEventPlugin
 */

'use strict';

var EventConstants = require('./EventConstants');
var EventListener = require('fbjs/lib/EventListener');
var EventPropagators = require('./EventPropagators');
var ReactMount = require('./ReactMount');
var SyntheticClipboardEvent = require('./SyntheticClipboardEvent');
var SyntheticEvent = require('./SyntheticEvent');
var SyntheticFocusEvent = require('./SyntheticFocusEvent');
var SyntheticKeyboardEvent = require('./SyntheticKeyboardEvent');
var SyntheticMouseEvent = require('./SyntheticMouseEvent');
var SyntheticDragEvent = require('./SyntheticDragEvent');
var SyntheticTouchEvent = require('./SyntheticTouchEvent');
var SyntheticUIEvent = require('./SyntheticUIEvent');
var SyntheticWheelEvent = require('./SyntheticWheelEvent');

var emptyFunction = require('fbjs/lib/emptyFunction');
var getEventCharCode = require('./getEventCharCode');
var invariant = require('fbjs/lib/invariant');
var keyOf = require('fbjs/lib/keyOf');

var topLevelTypes = EventConstants.topLevelTypes;

var eventTypes = {
  abort: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onAbort: true }),
      captured: keyOf({ onAbortCapture: true })
    }
  },
  blur: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onBlur: true }),
      captured: keyOf({ onBlurCapture: true })
    }
  },
  canPlay: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCanPlay: true }),
      captured: keyOf({ onCanPlayCapture: true })
    }
  },
  canPlayThrough: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCanPlayThrough: true }),
      captured: keyOf({ onCanPlayThroughCapture: true })
    }
  },
  click: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onClick: true }),
      captured: keyOf({ onClickCapture: true })
    }
  },
  contextMenu: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onContextMenu: true }),
      captured: keyOf({ onContextMenuCapture: true })
    }
  },
  copy: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCopy: true }),
      captured: keyOf({ onCopyCapture: true })
    }
  },
  cut: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onCut: true }),
      captured: keyOf({ onCutCapture: true })
    }
  },
  doubleClick: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDoubleClick: true }),
      captured: keyOf({ onDoubleClickCapture: true })
    }
  },
  drag: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDrag: true }),
      captured: keyOf({ onDragCapture: true })
    }
  },
  dragEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragEnd: true }),
      captured: keyOf({ onDragEndCapture: true })
    }
  },
  dragEnter: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragEnter: true }),
      captured: keyOf({ onDragEnterCapture: true })
    }
  },
  dragExit: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragExit: true }),
      captured: keyOf({ onDragExitCapture: true })
    }
  },
  dragLeave: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragLeave: true }),
      captured: keyOf({ onDragLeaveCapture: true })
    }
  },
  dragOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragOver: true }),
      captured: keyOf({ onDragOverCapture: true })
    }
  },
  dragStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDragStart: true }),
      captured: keyOf({ onDragStartCapture: true })
    }
  },
  drop: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDrop: true }),
      captured: keyOf({ onDropCapture: true })
    }
  },
  durationChange: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onDurationChange: true }),
      captured: keyOf({ onDurationChangeCapture: true })
    }
  },
  emptied: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onEmptied: true }),
      captured: keyOf({ onEmptiedCapture: true })
    }
  },
  encrypted: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onEncrypted: true }),
      captured: keyOf({ onEncryptedCapture: true })
    }
  },
  ended: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onEnded: true }),
      captured: keyOf({ onEndedCapture: true })
    }
  },
  error: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onError: true }),
      captured: keyOf({ onErrorCapture: true })
    }
  },
  focus: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onFocus: true }),
      captured: keyOf({ onFocusCapture: true })
    }
  },
  input: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onInput: true }),
      captured: keyOf({ onInputCapture: true })
    }
  },
  keyDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onKeyDown: true }),
      captured: keyOf({ onKeyDownCapture: true })
    }
  },
  keyPress: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onKeyPress: true }),
      captured: keyOf({ onKeyPressCapture: true })
    }
  },
  keyUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onKeyUp: true }),
      captured: keyOf({ onKeyUpCapture: true })
    }
  },
  load: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onLoad: true }),
      captured: keyOf({ onLoadCapture: true })
    }
  },
  loadedData: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onLoadedData: true }),
      captured: keyOf({ onLoadedDataCapture: true })
    }
  },
  loadedMetadata: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onLoadedMetadata: true }),
      captured: keyOf({ onLoadedMetadataCapture: true })
    }
  },
  loadStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onLoadStart: true }),
      captured: keyOf({ onLoadStartCapture: true })
    }
  },
  // Note: We do not allow listening to mouseOver events. Instead, use the
  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
  mouseDown: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseDown: true }),
      captured: keyOf({ onMouseDownCapture: true })
    }
  },
  mouseMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseMove: true }),
      captured: keyOf({ onMouseMoveCapture: true })
    }
  },
  mouseOut: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseOut: true }),
      captured: keyOf({ onMouseOutCapture: true })
    }
  },
  mouseOver: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseOver: true }),
      captured: keyOf({ onMouseOverCapture: true })
    }
  },
  mouseUp: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onMouseUp: true }),
      captured: keyOf({ onMouseUpCapture: true })
    }
  },
  paste: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onPaste: true }),
      captured: keyOf({ onPasteCapture: true })
    }
  },
  pause: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onPause: true }),
      captured: keyOf({ onPauseCapture: true })
    }
  },
  play: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onPlay: true }),
      captured: keyOf({ onPlayCapture: true })
    }
  },
  playing: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onPlaying: true }),
      captured: keyOf({ onPlayingCapture: true })
    }
  },
  progress: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onProgress: true }),
      captured: keyOf({ onProgressCapture: true })
    }
  },
  rateChange: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onRateChange: true }),
      captured: keyOf({ onRateChangeCapture: true })
    }
  },
  reset: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onReset: true }),
      captured: keyOf({ onResetCapture: true })
    }
  },
  scroll: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onScroll: true }),
      captured: keyOf({ onScrollCapture: true })
    }
  },
  seeked: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSeeked: true }),
      captured: keyOf({ onSeekedCapture: true })
    }
  },
  seeking: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSeeking: true }),
      captured: keyOf({ onSeekingCapture: true })
    }
  },
  stalled: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onStalled: true }),
      captured: keyOf({ onStalledCapture: true })
    }
  },
  submit: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSubmit: true }),
      captured: keyOf({ onSubmitCapture: true })
    }
  },
  suspend: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onSuspend: true }),
      captured: keyOf({ onSuspendCapture: true })
    }
  },
  timeUpdate: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTimeUpdate: true }),
      captured: keyOf({ onTimeUpdateCapture: true })
    }
  },
  touchCancel: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTouchCancel: true }),
      captured: keyOf({ onTouchCancelCapture: true })
    }
  },
  touchEnd: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTouchEnd: true }),
      captured: keyOf({ onTouchEndCapture: true })
    }
  },
  touchMove: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTouchMove: true }),
      captured: keyOf({ onTouchMoveCapture: true })
    }
  },
  touchStart: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onTouchStart: true }),
      captured: keyOf({ onTouchStartCapture: true })
    }
  },
  volumeChange: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onVolumeChange: true }),
      captured: keyOf({ onVolumeChangeCapture: true })
    }
  },
  waiting: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onWaiting: true }),
      captured: keyOf({ onWaitingCapture: true })
    }
  },
  wheel: {
    phasedRegistrationNames: {
      bubbled: keyOf({ onWheel: true }),
      captured: keyOf({ onWheelCapture: true })
    }
  }
};

var topLevelEventsToDispatchConfig = {
  topAbort: eventTypes.abort,
  topBlur: eventTypes.blur,
  topCanPlay: eventTypes.canPlay,
  topCanPlayThrough: eventTypes.canPlayThrough,
  topClick: eventTypes.click,
  topContextMenu: eventTypes.contextMenu,
  topCopy: eventTypes.copy,
  topCut: eventTypes.cut,
  topDoubleClick: eventTypes.doubleClick,
  topDrag: eventTypes.drag,
  topDragEnd: eventTypes.dragEnd,
  topDragEnter: eventTypes.dragEnter,
  topDragExit: eventTypes.dragExit,
  topDragLeave: eventTypes.dragLeave,
  topDragOver: eventTypes.dragOver,
  topDragStart: eventTypes.dragStart,
  topDrop: eventTypes.drop,
  topDurationChange: eventTypes.durationChange,
  topEmptied: eventTypes.emptied,
  topEncrypted: eventTypes.encrypted,
  topEnded: eventTypes.ended,
  topError: eventTypes.error,
  topFocus: eventTypes.focus,
  topInput: eventTypes.input,
  topKeyDown: eventTypes.keyDown,
  topKeyPress: eventTypes.keyPress,
  topKeyUp: eventTypes.keyUp,
  topLoad: eventTypes.load,
  topLoadedData: eventTypes.loadedData,
  topLoadedMetadata: eventTypes.loadedMetadata,
  topLoadStart: eventTypes.loadStart,
  topMouseDown: eventTypes.mouseDown,
  topMouseMove: eventTypes.mouseMove,
  topMouseOut: eventTypes.mouseOut,
  topMouseOver: eventTypes.mouseOver,
  topMouseUp: eventTypes.mouseUp,
  topPaste: eventTypes.paste,
  topPause: eventTypes.pause,
  topPlay: eventTypes.play,
  topPlaying: eventTypes.playing,
  topProgress: eventTypes.progress,
  topRateChange: eventTypes.rateChange,
  topReset: eventTypes.reset,
  topScroll: eventTypes.scroll,
  topSeeked: eventTypes.seeked,
  topSeeking: eventTypes.seeking,
  topStalled: eventTypes.stalled,
  topSubmit: eventTypes.submit,
  topSuspend: eventTypes.suspend,
  topTimeUpdate: eventTypes.timeUpdate,
  topTouchCancel: eventTypes.touchCancel,
  topTouchEnd: eventTypes.touchEnd,
  topTouchMove: eventTypes.touchMove,
  topTouchStart: eventTypes.touchStart,
  topVolumeChange: eventTypes.volumeChange,
  topWaiting: eventTypes.waiting,
  topWheel: eventTypes.wheel
};

for (var type in topLevelEventsToDispatchConfig) {
  topLevelEventsToDispatchConfig[type].dependencies = [type];
}

var ON_CLICK_KEY = keyOf({ onClick: null });
var onClickListeners = {};

var SimpleEventPlugin = {

  eventTypes: eventTypes,

  /**
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {DOMEventTarget} topLevelTarget The listening component root node.
   * @param {string} topLevelTargetID ID of `topLevelTarget`.
   * @param {object} nativeEvent Native browser event.
   * @return {*} An accumulation of synthetic events.
   * @see {EventPluginHub.extractEvents}
   */
  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case topLevelTypes.topAbort:
      case topLevelTypes.topCanPlay:
      case topLevelTypes.topCanPlayThrough:
      case topLevelTypes.topDurationChange:
      case topLevelTypes.topEmptied:
      case topLevelTypes.topEncrypted:
      case topLevelTypes.topEnded:
      case topLevelTypes.topError:
      case topLevelTypes.topInput:
      case topLevelTypes.topLoad:
      case topLevelTypes.topLoadedData:
      case topLevelTypes.topLoadedMetadata:
      case topLevelTypes.topLoadStart:
      case topLevelTypes.topPause:
      case topLevelTypes.topPlay:
      case topLevelTypes.topPlaying:
      case topLevelTypes.topProgress:
      case topLevelTypes.topRateChange:
      case topLevelTypes.topReset:
      case topLevelTypes.topSeeked:
      case topLevelTypes.topSeeking:
      case topLevelTypes.topStalled:
      case topLevelTypes.topSubmit:
      case topLevelTypes.topSuspend:
      case topLevelTypes.topTimeUpdate:
      case topLevelTypes.topVolumeChange:
      case topLevelTypes.topWaiting:
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case topLevelTypes.topKeyPress:
        // FireFox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
      /* falls through */
      case topLevelTypes.topKeyDown:
      case topLevelTypes.topKeyUp:
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case topLevelTypes.topBlur:
      case topLevelTypes.topFocus:
        EventConstructor = SyntheticFocusEvent;
        break;
      case topLevelTypes.topClick:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
      /* falls through */
      case topLevelTypes.topContextMenu:
      case topLevelTypes.topDoubleClick:
      case topLevelTypes.topMouseDown:
      case topLevelTypes.topMouseMove:
      case topLevelTypes.topMouseOut:
      case topLevelTypes.topMouseOver:
      case topLevelTypes.topMouseUp:
        EventConstructor = SyntheticMouseEvent;
        break;
      case topLevelTypes.topDrag:
      case topLevelTypes.topDragEnd:
      case topLevelTypes.topDragEnter:
      case topLevelTypes.topDragExit:
      case topLevelTypes.topDragLeave:
      case topLevelTypes.topDragOver:
      case topLevelTypes.topDragStart:
      case topLevelTypes.topDrop:
        EventConstructor = SyntheticDragEvent;
        break;
      case topLevelTypes.topTouchCancel:
      case topLevelTypes.topTouchEnd:
      case topLevelTypes.topTouchMove:
      case topLevelTypes.topTouchStart:
        EventConstructor = SyntheticTouchEvent;
        break;
      case topLevelTypes.topScroll:
        EventConstructor = SyntheticUIEvent;
        break;
      case topLevelTypes.topWheel:
        EventConstructor = SyntheticWheelEvent;
        break;
      case topLevelTypes.topCopy:
      case topLevelTypes.topCut:
      case topLevelTypes.topPaste:
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(false) : undefined;
    var event = EventConstructor.getPooled(dispatchConfig, topLevelTargetID, nativeEvent, nativeEventTarget);
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  },

  didPutListener: function (id, registrationName, listener) {
    // Mobile Safari does not fire properly bubble click events on
    // non-interactive elements, which means delegated click listeners do not
    // fire. The workaround for this bug involves attaching an empty click
    // listener on the target node.
    if (registrationName === ON_CLICK_KEY) {
      var node = ReactMount.getNode(id);
      if (!onClickListeners[id]) {
        onClickListeners[id] = EventListener.listen(node, 'click', emptyFunction);
      }
    }
  },

  willDeleteListener: function (id, registrationName) {
    if (registrationName === ON_CLICK_KEY) {
      onClickListeners[id].remove();
      delete onClickListeners[id];
    }
  }

};

module.exports = SimpleEventPlugin;
}).call(this,require('_process'))

},{"./EventConstants":42,"./EventPropagators":46,"./ReactMount":95,"./SyntheticClipboardEvent":122,"./SyntheticDragEvent":124,"./SyntheticEvent":125,"./SyntheticFocusEvent":126,"./SyntheticKeyboardEvent":128,"./SyntheticMouseEvent":129,"./SyntheticTouchEvent":130,"./SyntheticUIEvent":131,"./SyntheticWheelEvent":132,"./getEventCharCode":144,"_process":26,"fbjs/lib/EventListener":163,"fbjs/lib/emptyFunction":170,"fbjs/lib/invariant":178,"fbjs/lib/keyOf":182}],122:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticClipboardEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;
},{"./SyntheticEvent":125}],123:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticCompositionEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

module.exports = SyntheticCompositionEvent;
},{"./SyntheticEvent":125}],124:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticDragEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticMouseEvent = require('./SyntheticMouseEvent');

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;
},{"./SyntheticMouseEvent":129}],125:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticEvent
 * @typechecks static-only
 */

'use strict';

var PooledClass = require('./PooledClass');

var assign = require('./Object.assign');
var emptyFunction = require('fbjs/lib/emptyFunction');
var warning = require('fbjs/lib/warning');

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 */
function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  this.dispatchConfig = dispatchConfig;
  this.dispatchMarker = dispatchMarker;
  this.nativeEvent = nativeEvent;
  this.target = nativeEventTarget;
  this.currentTarget = nativeEventTarget;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      this[propName] = nativeEvent[propName];
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
}

assign(SyntheticEvent.prototype, {

  preventDefault: function () {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `preventDefault` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
    }
    if (!event) {
      return;
    }

    if (event.preventDefault) {
      event.preventDefault();
    } else {
      event.returnValue = false;
    }
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function () {
    var event = this.nativeEvent;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `stopPropagation` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
    }
    if (!event) {
      return;
    }

    if (event.stopPropagation) {
      event.stopPropagation();
    } else {
      event.cancelBubble = true;
    }
    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function () {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function () {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      this[propName] = null;
    }
    this.dispatchConfig = null;
    this.dispatchMarker = null;
    this.nativeEvent = null;
  }

});

SyntheticEvent.Interface = EventInterface;

/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function (Class, Interface) {
  var Super = this;

  var prototype = Object.create(Super.prototype);
  assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

module.exports = SyntheticEvent;
}).call(this,require('_process'))

},{"./Object.assign":50,"./PooledClass":51,"_process":26,"fbjs/lib/emptyFunction":170,"fbjs/lib/warning":189}],126:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticFocusEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;
},{"./SyntheticUIEvent":131}],127:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticInputEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

module.exports = SyntheticInputEvent;
},{"./SyntheticEvent":125}],128:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticKeyboardEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');

var getEventCharCode = require('./getEventCharCode');
var getEventKey = require('./getEventKey');
var getEventModifierState = require('./getEventModifierState');

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;
},{"./SyntheticUIEvent":131,"./getEventCharCode":144,"./getEventKey":145,"./getEventModifierState":146}],129:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticMouseEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');
var ViewportMetrics = require('./ViewportMetrics');

var getEventModifierState = require('./getEventModifierState');

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function (event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function (event) {
    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
  },
  // "Proprietary" Interface.
  pageX: function (event) {
    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function (event) {
    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;
},{"./SyntheticUIEvent":131,"./ViewportMetrics":134,"./getEventModifierState":146}],130:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticTouchEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');

var getEventModifierState = require('./getEventModifierState');

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;
},{"./SyntheticUIEvent":131,"./getEventModifierState":146}],131:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticUIEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

var getEventTarget = require('./getEventTarget');

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function (event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target != null && target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function (event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;
},{"./SyntheticEvent":125,"./getEventTarget":147}],132:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule SyntheticWheelEvent
 * @typechecks static-only
 */

'use strict';

var SyntheticMouseEvent = require('./SyntheticMouseEvent');

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX :
    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY :
    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY :
    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;
},{"./SyntheticMouseEvent":129}],133:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule Transaction
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM updates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var Mixin = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function () {
    this.transactionWrappers = this.getTransactionWrappers();
    if (this.wrapperInitData) {
      this.wrapperInitData.length = 0;
    } else {
      this.wrapperInitData = [];
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function () {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked. The optional arguments helps prevent the need
   * to bind in many cases.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} a Argument to pass to the method.
   * @param {Object?=} b Argument to pass to the method.
   * @param {Object?=} c Argument to pass to the method.
   * @param {Object?=} d Argument to pass to the method.
   * @param {Object?=} e Argument to pass to the method.
   * @param {Object?=} f Argument to pass to the method.
   *
   * @return {*} Return value from `method`.
   */
  perform: function (method, scope, a, b, c, d, e, f) {
    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(false) : undefined;
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {}
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function (startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
      } finally {
        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {}
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function (startIndex) {
    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(false) : undefined;
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
          wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {}
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

var Transaction = {

  Mixin: Mixin,

  /**
   * Token to look for to determine if an error occurred.
   */
  OBSERVED_ERROR: {}

};

module.exports = Transaction;
}).call(this,require('_process'))

},{"_process":26,"fbjs/lib/invariant":178}],134:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ViewportMetrics
 */

'use strict';

var ViewportMetrics = {

  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function (scrollPosition) {
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }

};

module.exports = ViewportMetrics;
},{}],135:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule accumulateInto
 */

'use strict';

var invariant = require('fbjs/lib/invariant');

/**
 *
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;
  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  var currentIsArray = Array.isArray(current);
  var nextIsArray = Array.isArray(next);

  if (currentIsArray && nextIsArray) {
    current.push.apply(current, next);
    return current;
  }

  if (currentIsArray) {
    current.push(next);
    return current;
  }

  if (nextIsArray) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;
}).call(this,require('_process'))

},{"_process":26,"fbjs/lib/invariant":178}],136:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule adler32
 */

'use strict';

var MOD = 65521;

// adler32 is not cryptographically strong, and is only used to sanity check that
// markup generated on the server matches the markup generated on the client.
// This implementation (a modified version of the SheetJS version) has been optimized
// for our use case, at the expense of conforming to the adler32 specification
// for non-ascii inputs.
function adler32(data) {
  var a = 1;
  var b = 0;
  var i = 0;
  var l = data.length;
  var m = l & ~0x3;
  while (i < m) {
    for (; i < Math.min(i + 4096, m); i += 4) {
      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
    }
    a %= MOD;
    b %= MOD;
  }
  for (; i < l; i++) {
    b += a += data.charCodeAt(i);
  }
  a %= MOD;
  b %= MOD;
  return a | b << 16;
}

module.exports = adler32;
},{}],137:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule canDefineProperty
 */

'use strict';

var canDefineProperty = false;
if (process.env.NODE_ENV !== 'production') {
  try {
    Object.defineProperty({}, 'x', { get: function () {} });
    canDefineProperty = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

module.exports = canDefineProperty;
}).call(this,require('_process'))

},{"_process":26}],138:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule dangerousStyleValue
 * @typechecks static-only
 */

'use strict';

var CSSProperty = require('./CSSProperty');

var isUnitlessNumber = CSSProperty.isUnitlessNumber;

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;
},{"./CSSProperty":31}],139:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule deprecated
 */

'use strict';

var assign = require('./Object.assign');
var warning = require('fbjs/lib/warning');

/**
 * This will log a single deprecation notice per function and forward the call
 * on to the new API.
 *
 * @param {string} fnName The name of the function
 * @param {string} newModule The module that fn will exist in
 * @param {string} newPackage The module that fn will exist in
 * @param {*} ctx The context this forwarded call should run in
 * @param {function} fn The function to forward on to
 * @return {function} The function that will warn once and then call fn
 */
function deprecated(fnName, newModule, newPackage, ctx, fn) {
  var warned = false;
  if (process.env.NODE_ENV !== 'production') {
    var newFn = function () {
      process.env.NODE_ENV !== 'production' ? warning(warned,
      // Require examples in this string must be split to prevent React's
      // build tools from mistaking them for real requires.
      // Otherwise the build tools will attempt to build a '%s' module.
      'React.%s is deprecated. Please use %s.%s from require' + '(\'%s\') ' + 'instead.', fnName, newModule, fnName, newPackage) : undefined;
      warned = true;
      return fn.apply(ctx, arguments);
    };
    // We need to make sure all properties of the original fn are copied over.
    // In particular, this is needed to support PropTypes
    return assign(newFn, fn);
  }

  return fn;
}

module.exports = deprecated;
}).call(this,require('_process'))

},{"./Object.assign":50,"_process":26,"fbjs/lib/warning":189}],140:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule escapeTextContentForBrowser
 */

'use strict';

var ESCAPE_LOOKUP = {
  '&': '&amp;',
  '>': '&gt;',
  '<': '&lt;',
  '"': '&quot;',
  '\'': '&#x27;'
};

var ESCAPE_REGEX = /[&><"']/g;

function escaper(match) {
  return ESCAPE_LOOKUP[match];
}

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextContentForBrowser(text) {
  return ('' + text).replace(ESCAPE_REGEX, escaper);
}

module.exports = escapeTextContentForBrowser;
},{}],141:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule findDOMNode
 * @typechecks static-only
 */

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactMount = require('./ReactMount');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Returns the DOM node rendered by this element.
 *
 * @param {ReactComponent|DOMElement} componentOrElement
 * @return {?DOMElement} The root node of this element.
 */
function findDOMNode(componentOrElement) {
  if (process.env.NODE_ENV !== 'production') {
    var owner = ReactCurrentOwner.current;
    if (owner !== null) {
      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing getDOMNode or findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
      owner._warnedAboutRefsInRender = true;
    }
  }
  if (componentOrElement == null) {
    return null;
  }
  if (componentOrElement.nodeType === 1) {
    return componentOrElement;
  }
  if (ReactInstanceMap.has(componentOrElement)) {
    return ReactMount.getNodeFromInstance(componentOrElement);
  }
  !(componentOrElement.render == null || typeof componentOrElement.render !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : undefined;
  !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : undefined;
}

module.exports = findDOMNode;
}).call(this,require('_process'))

},{"./ReactCurrentOwner":64,"./ReactInstanceMap":92,"./ReactMount":95,"_process":26,"fbjs/lib/invariant":178,"fbjs/lib/warning":189}],142:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule flattenChildren
 */

'use strict';

var traverseAllChildren = require('./traverseAllChildren');
var warning = require('fbjs/lib/warning');

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 */
function flattenSingleChildIntoContext(traverseContext, child, name) {
  // We found a component instance.
  var result = traverseContext;
  var keyUnique = result[name] === undefined;
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
  }
  if (keyUnique && child != null) {
    result[name] = child;
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children) {
  if (children == null) {
    return children;
  }
  var result = {};
  traverseAllChildren(children, flattenSingleChildIntoContext, result);
  return result;
}

module.exports = flattenChildren;
}).call(this,require('_process'))

},{"./traverseAllChildren":160,"_process":26,"fbjs/lib/warning":189}],143:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule forEachAccumulated
 */

'use strict';

/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */
var forEachAccumulated = function (arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
};

module.exports = forEachAccumulated;
},{}],144:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventCharCode
 * @typechecks static-only
 */

'use strict';

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;
},{}],145:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventKey
 * @typechecks static-only
 */

'use strict';

var getEventCharCode = require('./getEventCharCode');

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  'Esc': 'Escape',
  'Spacebar': ' ',
  'Left': 'ArrowLeft',
  'Up': 'ArrowUp',
  'Right': 'ArrowRight',
  'Down': 'ArrowDown',
  'Del': 'Delete',
  'Win': 'OS',
  'Menu': 'ContextMenu',
  'Apps': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'MozPrintableKey': 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;
},{"./getEventCharCode":144}],146:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventModifierState
 * @typechecks static-only
 */

'use strict';

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  'Alt': 'altKey',
  'Control': 'ctrlKey',
  'Meta': 'metaKey',
  'Shift': 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;
},{}],147:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getEventTarget
 * @typechecks static-only
 */

'use strict';

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */
function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;
  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;
},{}],148:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getIteratorFn
 * @typechecks static-only
 */

'use strict';

/* global Symbol */
var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;
},{}],149:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getNodeForCharacterOffset
 */

'use strict';

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */
function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;
},{}],150:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getTextContentAccessor
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;
},{"fbjs/lib/ExecutionEnvironment":164}],151:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule instantiateReactComponent
 * @typechecks static-only
 */

'use strict';

var ReactCompositeComponent = require('./ReactCompositeComponent');
var ReactEmptyComponent = require('./ReactEmptyComponent');
var ReactNativeComponent = require('./ReactNativeComponent');

var assign = require('./Object.assign');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

// To avoid a cyclic dependency, we create the final class in this module
var ReactCompositeComponentWrapper = function () {};
assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
  _instantiateReactComponent: instantiateReactComponent
});

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Check if the type reference is a known internal type. I.e. not a user
 * provided composite type.
 *
 * @param {function} type
 * @return {boolean} Returns true if this is a valid internal type.
 */
function isInternalComponentType(type) {
  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
}

/**
 * Given a ReactNode, create an instance that will actually be mounted.
 *
 * @param {ReactNode} node
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(node) {
  var instance;

  if (node === null || node === false) {
    instance = new ReactEmptyComponent(instantiateReactComponent);
  } else if (typeof node === 'object') {
    var element = node;
    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : invariant(false) : undefined;

    // Special case string values
    if (typeof element.type === 'string') {
      instance = ReactNativeComponent.createInternalComponent(element);
    } else if (isInternalComponentType(element.type)) {
      // This is temporarily available for custom components that are not string
      // representations. I.e. ART. Once those are updated to use the string
      // representation, we can drop this code path.
      instance = new element.type(element);
    } else {
      instance = new ReactCompositeComponentWrapper();
    }
  } else if (typeof node === 'string' || typeof node === 'number') {
    instance = ReactNativeComponent.createInstanceForText(node);
  } else {
    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : invariant(false) : undefined;
  }

  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(typeof instance.construct === 'function' && typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : undefined;
  }

  // Sets up the instance. This can probably just move into the constructor now.
  instance.construct(node);

  // These two fields are used by the DOM and ART diffing algorithms
  // respectively. Instead of using expandos on components, we should be
  // storing the state needed by the diffing algorithms elsewhere.
  instance._mountIndex = 0;
  instance._mountImage = null;

  if (process.env.NODE_ENV !== 'production') {
    instance._isOwnerNecessary = false;
    instance._warnedAboutRefsInRender = false;
  }

  // Internal instances should fully constructed at this point, so they should
  // not get any new fields added to them at this point.
  if (process.env.NODE_ENV !== 'production') {
    if (Object.preventExtensions) {
      Object.preventExtensions(instance);
    }
  }

  return instance;
}

module.exports = instantiateReactComponent;
}).call(this,require('_process'))

},{"./Object.assign":50,"./ReactCompositeComponent":63,"./ReactEmptyComponent":84,"./ReactNativeComponent":98,"_process":26,"fbjs/lib/invariant":178,"fbjs/lib/warning":189}],152:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isEventSupported
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature = document.implementation && document.implementation.hasFeature &&
  // always returns true in newer browsers as per the standard.
  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
  document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = (eventName in document);

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;
},{"fbjs/lib/ExecutionEnvironment":164}],153:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextInputElement
 */

'use strict';

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  'color': true,
  'date': true,
  'datetime': true,
  'datetime-local': true,
  'email': true,
  'month': true,
  'number': true,
  'password': true,
  'range': true,
  'search': true,
  'tel': true,
  'text': true,
  'time': true,
  'url': true,
  'week': true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName && (nodeName === 'input' && supportedInputTypes[elem.type] || nodeName === 'textarea');
}

module.exports = isTextInputElement;
},{}],154:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule onlyChild
 */
'use strict';

var ReactElement = require('./ReactElement');

var invariant = require('fbjs/lib/invariant');

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection. The current implementation of this
 * function assumes that a single child gets passed without a wrapper, but the
 * purpose of this helper function is to abstract away the particular structure
 * of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactComponent} The first and only `ReactComponent` contained in the
 * structure.
 */
function onlyChild(children) {
  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : invariant(false) : undefined;
  return children;
}

module.exports = onlyChild;
}).call(this,require('_process'))

},{"./ReactElement":82,"_process":26,"fbjs/lib/invariant":178}],155:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule quoteAttributeValueForBrowser
 */

'use strict';

var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');

/**
 * Escapes attribute value to prevent scripting attacks.
 *
 * @param {*} value Value to escape.
 * @return {string} An escaped string.
 */
function quoteAttributeValueForBrowser(value) {
  return '"' + escapeTextContentForBrowser(value) + '"';
}

module.exports = quoteAttributeValueForBrowser;
},{"./escapeTextContentForBrowser":140}],156:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
* @providesModule renderSubtreeIntoContainer
*/

'use strict';

var ReactMount = require('./ReactMount');

module.exports = ReactMount.renderSubtreeIntoContainer;
},{"./ReactMount":95}],157:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setInnerHTML
 */

/* globals MSApp */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = function (node, html) {
  node.innerHTML = html;
};

// Win8 apps: Allow all html to be inserted
if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
  setInnerHTML = function (node, html) {
    MSApp.execUnsafeLocalFunction(function () {
      node.innerHTML = html;
    });
  };
}

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function (node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
        // in hopes that this is preserved even if "\uFEFF" is transformed to
        // the actual Unicode character (by Babel, for example).
        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
        node.innerHTML = String.fromCharCode(0xFEFF) + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
}

module.exports = setInnerHTML;
},{"fbjs/lib/ExecutionEnvironment":164}],158:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule setTextContent
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
var setInnerHTML = require('./setInnerHTML');

/**
 * Set the textContent property of a node, ensuring that whitespace is preserved
 * even in IE8. innerText is a poor substitute for textContent and, among many
 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
 * as it should.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */
var setTextContent = function (node, text) {
  node.textContent = text;
};

if (ExecutionEnvironment.canUseDOM) {
  if (!('textContent' in document.documentElement)) {
    setTextContent = function (node, text) {
      setInnerHTML(node, escapeTextContentForBrowser(text));
    };
  }
}

module.exports = setTextContent;
},{"./escapeTextContentForBrowser":140,"./setInnerHTML":157,"fbjs/lib/ExecutionEnvironment":164}],159:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shouldUpdateReactComponent
 * @typechecks static-only
 */

'use strict';

/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */
function shouldUpdateReactComponent(prevElement, nextElement) {
  var prevEmpty = prevElement === null || prevElement === false;
  var nextEmpty = nextElement === null || nextElement === false;
  if (prevEmpty || nextEmpty) {
    return prevEmpty === nextEmpty;
  }

  var prevType = typeof prevElement;
  var nextType = typeof nextElement;
  if (prevType === 'string' || prevType === 'number') {
    return nextType === 'string' || nextType === 'number';
  } else {
    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
  }
  return false;
}

module.exports = shouldUpdateReactComponent;
},{}],160:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule traverseAllChildren
 */

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactElement = require('./ReactElement');
var ReactInstanceHandles = require('./ReactInstanceHandles');

var getIteratorFn = require('./getIteratorFn');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var SEPARATOR = ReactInstanceHandles.SEPARATOR;
var SUBSEPARATOR = ':';

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var userProvidedKeyEscaperLookup = {
  '=': '=0',
  '.': '=1',
  ':': '=2'
};

var userProvidedKeyEscapeRegex = /[=.:]/g;

var didWarnAboutMaps = false;

function userProvidedKeyEscaper(match) {
  return userProvidedKeyEscaperLookup[match];
}

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  if (component && component.key != null) {
    // Explicit key
    return wrapUserProvidedKey(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * Escape a component key so that it is safe to use in a reactid.
 *
 * @param {*} text Component key to be escaped.
 * @return {string} An escaped string.
 */
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, userProvidedKeyEscaper);
}

/**
 * Wrap a `key` value explicitly provided by the user to distinguish it from
 * implicitly-generated keys generated by a component's index in its parent.
 *
 * @param {string} key Value of a user-provided `key` attribute
 * @return {string}
 */
function wrapUserProvidedKey(key) {
  return '$' + escapeUserProvidedKey(key);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : undefined;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + wrapUserProvidedKey(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (process.env.NODE_ENV !== 'production') {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
      !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : undefined;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
}).call(this,require('_process'))

},{"./ReactCurrentOwner":64,"./ReactElement":82,"./ReactInstanceHandles":91,"./getIteratorFn":148,"_process":26,"fbjs/lib/invariant":178,"fbjs/lib/warning":189}],161:[function(require,module,exports){
(function (process){
/**
 * Copyright 2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule validateDOMNesting
 */

'use strict';

var assign = require('./Object.assign');
var emptyFunction = require('fbjs/lib/emptyFunction');
var warning = require('fbjs/lib/warning');

var validateDOMNesting = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.

  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
  var buttonScopeTags = inScopeTags.concat(['button']);

  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

  var emptyAncestorInfo = {
    parentTag: null,

    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,

    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  var updatedAncestorInfo = function (oldInfo, tag, instance) {
    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
    var info = { tag: tag, instance: instance };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }
    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    }

    // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.parentTag = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }
    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }
    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }
    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }
    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }
    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }
    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };

  /**
   * Returns whether
   */
  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';
      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but
      case 'option':
        return tag === '#text';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
      case 'colgroup':
        return tag === 'col' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
      case 'html':
        return tag === 'head' || tag === 'body';
    }

    // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frame':
      case 'head':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };

  /**
   * Returns whether
   */
  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':

      case 'pre':
      case 'listing':

      case 'table':

      case 'hr':

      case 'xmp':

      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  /**
   * Given a ReactCompositeComponent instance, return a list of its recursive
   * owners, starting at the root and ending with the instance itself.
   */
  var findOwnerStack = function (instance) {
    if (!instance) {
      return [];
    }

    var stack = [];
    /*eslint-disable space-after-keywords */
    do {
      /*eslint-enable space-after-keywords */
      stack.push(instance);
    } while (instance = instance._currentElement._owner);
    stack.reverse();
    return stack;
  };

  var didWarn = {};

  validateDOMNesting = function (childTag, childInstance, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.parentTag;
    var parentTag = parentInfo && parentInfo.tag;

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var problematic = invalidParent || invalidAncestor;

    if (problematic) {
      var ancestorTag = problematic.tag;
      var ancestorInstance = problematic.instance;

      var childOwner = childInstance && childInstance._currentElement._owner;
      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

      var childOwners = findOwnerStack(childOwner);
      var ancestorOwners = findOwnerStack(ancestorOwner);

      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
      var i;

      var deepestCommon = -1;
      for (i = 0; i < minStackLen; i++) {
        if (childOwners[i] === ancestorOwners[i]) {
          deepestCommon = i;
        } else {
          break;
        }
      }

      var UNKNOWN = '(unknown)';
      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ownerInfo = [].concat(
      // If the parent and child instances have a common owner ancestor, start
      // with that -- otherwise we just start with the parent's owners.
      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
      // If we're warning about an invalid (non-parent) ancestry, add '...'
      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
      if (didWarn[warnKey]) {
        return;
      }
      didWarn[warnKey] = true;

      if (invalidParent) {
        var info = '';
        if (ancestorTag === 'table' && childTag === 'tr') {
          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
        }
        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a child of <%s>. ' + 'See %s.%s', childTag, ancestorTag, ownerInfo, info) : undefined;
      } else {
        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a descendant of ' + '<%s>. See %s.', childTag, ancestorTag, ownerInfo) : undefined;
      }
    }
  };

  validateDOMNesting.ancestorInfoContextKey = '__validateDOMNesting_ancestorInfo$' + Math.random().toString(36).slice(2);

  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

  // For testing
  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.parentTag;
    var parentTag = parentInfo && parentInfo.tag;
    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
  };
}

module.exports = validateDOMNesting;
}).call(this,require('_process'))

},{"./Object.assign":50,"_process":26,"fbjs/lib/emptyFunction":170,"fbjs/lib/warning":189}],162:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSCore
 * @typechecks
 */

'use strict';

var invariant = require('./invariant');

/**
 * The CSSCore module specifies the API (and implements most of the methods)
 * that should be used when dealing with the display of elements (via their
 * CSS classes and visibility on screen. It is an API focused on mutating the
 * display and not reading it as no logical state should be encoded in the
 * display of elements.
 */

var CSSCore = {

  /**
   * Adds the class passed in to the element if it doesn't already have it.
   *
   * @param {DOMElement} element the element to set the class on
   * @param {string} className the CSS className
   * @return {DOMElement} the element passed in
   */
  addClass: function (element, className) {
    !!/\s/.test(className) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'CSSCore.addClass takes only a single class name. "%s" contains ' + 'multiple classes.', className) : invariant(false) : undefined;

    if (className) {
      if (element.classList) {
        element.classList.add(className);
      } else if (!CSSCore.hasClass(element, className)) {
        element.className = element.className + ' ' + className;
      }
    }
    return element;
  },

  /**
   * Removes the class passed in from the element
   *
   * @param {DOMElement} element the element to set the class on
   * @param {string} className the CSS className
   * @return {DOMElement} the element passed in
   */
  removeClass: function (element, className) {
    !!/\s/.test(className) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'CSSCore.removeClass takes only a single class name. "%s" contains ' + 'multiple classes.', className) : invariant(false) : undefined;

    if (className) {
      if (element.classList) {
        element.classList.remove(className);
      } else if (CSSCore.hasClass(element, className)) {
        element.className = element.className.replace(new RegExp('(^|\\s)' + className + '(?:\\s|$)', 'g'), '$1').replace(/\s+/g, ' ') // multiple spaces to one
        .replace(/^\s*|\s*$/g, ''); // trim the ends
      }
    }
    return element;
  },

  /**
   * Helper to add or remove a class from an element based on a condition.
   *
   * @param {DOMElement} element the element to set the class on
   * @param {string} className the CSS className
   * @param {*} bool condition to whether to add or remove the class
   * @return {DOMElement} the element passed in
   */
  conditionClass: function (element, className, bool) {
    return (bool ? CSSCore.addClass : CSSCore.removeClass)(element, className);
  },

  /**
   * Tests whether the element has the class specified.
   *
   * @param {DOMNode|DOMWindow} element the element to set the class on
   * @param {string} className the CSS className
   * @return {boolean} true if the element has the class, false if not
   */
  hasClass: function (element, className) {
    !!/\s/.test(className) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'CSS.hasClass takes only a single class name.') : invariant(false) : undefined;
    if (element.classList) {
      return !!className && element.classList.contains(className);
    }
    return (' ' + element.className + ' ').indexOf(' ' + className + ' ') > -1;
  }

};

module.exports = CSSCore;
}).call(this,require('_process'))

},{"./invariant":178,"_process":26}],163:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @providesModule EventListener
 * @typechecks
 */

'use strict';

var emptyFunction = require('./emptyFunction');

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function (target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function () {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function () {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function (target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function () {
          target.removeEventListener(eventType, callback, true);
        }
      };
    } else {
      if (process.env.NODE_ENV !== 'production') {
        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
      }
      return {
        remove: emptyFunction
      };
    }
  },

  registerDefault: function () {}
};

module.exports = EventListener;
}).call(this,require('_process'))

},{"./emptyFunction":170,"_process":26}],164:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule ExecutionEnvironment
 */

'use strict';

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;
},{}],165:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelize
 * @typechecks
 */

"use strict";

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function (_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;
},{}],166:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule camelizeStyleName
 * @typechecks
 */

'use strict';

var camelize = require('./camelize');

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;
},{"./camelize":165}],167:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule containsNode
 * @typechecks
 */

'use strict';

var isTextNode = require('./isTextNode');

/*eslint-disable no-bitwise */

/**
 * Checks if a given DOM node contains or is another DOM node.
 *
 * @param {?DOMNode} outerNode Outer DOM node.
 * @param {?DOMNode} innerNode Inner DOM node.
 * @return {boolean} True if `outerNode` contains or is `innerNode`.
 */
function containsNode(_x, _x2) {
  var _again = true;

  _function: while (_again) {
    var outerNode = _x,
        innerNode = _x2;
    _again = false;

    if (!outerNode || !innerNode) {
      return false;
    } else if (outerNode === innerNode) {
      return true;
    } else if (isTextNode(outerNode)) {
      return false;
    } else if (isTextNode(innerNode)) {
      _x = outerNode;
      _x2 = innerNode.parentNode;
      _again = true;
      continue _function;
    } else if (outerNode.contains) {
      return outerNode.contains(innerNode);
    } else if (outerNode.compareDocumentPosition) {
      return !!(outerNode.compareDocumentPosition(innerNode) & 16);
    } else {
      return false;
    }
  }
}

module.exports = containsNode;
},{"./isTextNode":180}],168:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createArrayFromMixed
 * @typechecks
 */

'use strict';

var toArray = require('./toArray');

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return(
    // not null/false
    !!obj && (
    // arrays are objects, NodeLists are functions in Safari
    typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    'length' in obj &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    typeof obj.nodeType != 'number' && (
    // a real array
    Array.isArray(obj) ||
    // arguments
    'callee' in obj ||
    // HTMLCollection/NodeList
    'item' in obj)
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFromMixed = require('createArrayFromMixed');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFromMixed(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFromMixed(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFromMixed;
},{"./toArray":188}],169:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule createNodesFromMarkup
 * @typechecks
 */

/*eslint-disable fb-www/unsafe-html*/

'use strict';

var ExecutionEnvironment = require('./ExecutionEnvironment');

var createArrayFromMixed = require('./createArrayFromMixed');
var getMarkupWrap = require('./getMarkupWrap');
var invariant = require('./invariant');

/**
 * Dummy container used to render all markup.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;
    createArrayFromMixed(scripts).forEach(handleScript);
  }

  var nodes = createArrayFromMixed(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;
}).call(this,require('_process'))

},{"./ExecutionEnvironment":164,"./createArrayFromMixed":168,"./getMarkupWrap":174,"./invariant":178,"_process":26}],170:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyFunction
 */

"use strict";

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
function emptyFunction() {}

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;
},{}],171:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule emptyObject
 */

'use strict';

var emptyObject = {};

if (process.env.NODE_ENV !== 'production') {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;
}).call(this,require('_process'))

},{"_process":26}],172:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule focusNode
 */

'use strict';

/**
 * @param {DOMElement} node input/textarea to focus
 */
function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch (e) {}
}

module.exports = focusNode;
},{}],173:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getActiveElement
 * @typechecks
 */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document or document body is not yet defined.
 */
'use strict';

function getActiveElement() /*?DOMElement*/{
  if (typeof document === 'undefined') {
    return null;
  }

  try {
    return document.activeElement || document.body;
  } catch (e) {
    return document.body;
  }
}

module.exports = getActiveElement;
},{}],174:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getMarkupWrap
 */

/*eslint-disable fb-www/unsafe-html */

'use strict';

var ExecutionEnvironment = require('./ExecutionEnvironment');

var invariant = require('./invariant');

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */

var shouldWrap = {};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap
};

// Initialize the SVG elements since we know they'll always need to be wrapped
// consistently. If they are created inside a <div> they will be initialized in
// the wrong namespace (and will not display).
var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
svgElements.forEach(function (nodeName) {
  markupWrap[nodeName] = svgWrap;
  shouldWrap[nodeName] = true;
});

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : undefined;
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}

module.exports = getMarkupWrap;
}).call(this,require('_process'))

},{"./ExecutionEnvironment":164,"./invariant":178,"_process":26}],175:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule getUnboundedScrollPosition
 * @typechecks
 */

'use strict';

/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */
function getUnboundedScrollPosition(scrollable) {
  if (scrollable === window) {
    return {
      x: window.pageXOffset || document.documentElement.scrollLeft,
      y: window.pageYOffset || document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;
},{}],176:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenate
 * @typechecks
 */

'use strict';

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;
},{}],177:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule hyphenateStyleName
 * @typechecks
 */

'use strict';

var hyphenate = require('./hyphenate');

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;
},{"./hyphenate":176}],178:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule invariant
 */

'use strict';

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function (condition, format, a, b, c, d, e, f) {
  if (process.env.NODE_ENV !== 'production') {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error('Invariant Violation: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;
}).call(this,require('_process'))

},{"_process":26}],179:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isNode
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
'use strict';

function isNode(object) {
  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}

module.exports = isNode;
},{}],180:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule isTextNode
 * @typechecks
 */

'use strict';

var isNode = require('./isNode');

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;
},{"./isNode":179}],181:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyMirror
 * @typechecks static-only
 */

'use strict';

var invariant = require('./invariant');

/**
 * Constructs an enumeration with keys equal to their value.
 *
 * For example:
 *
 *   var COLORS = keyMirror({blue: null, red: null});
 *   var myColor = COLORS.blue;
 *   var isColorValid = !!COLORS[myColor];
 *
 * The last line could not be performed if the values of the generated enum were
 * not equal to their keys.
 *
 *   Input:  {key1: val1, key2: val2}
 *   Output: {key1: key1, key2: key2}
 *
 * @param {object} obj
 * @return {object}
 */
var keyMirror = function (obj) {
  var ret = {};
  var key;
  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : undefined;
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;
}).call(this,require('_process'))

},{"./invariant":178,"_process":26}],182:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule keyOf
 */

/**
 * Allows extraction of a minified key. Let's the build system minify keys
 * without losing the ability to dynamically use key strings as values
 * themselves. Pass in an object with a single key/val pair and it will return
 * you the string key of that single record. Suppose you want to grab the
 * value for a key 'className' inside of an object. Key/val minification may
 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
 * reuse those resolutions.
 */
"use strict";

var keyOf = function (oneKeyObj) {
  var key;
  for (key in oneKeyObj) {
    if (!oneKeyObj.hasOwnProperty(key)) {
      continue;
    }
    return key;
  }
  return null;
};

module.exports = keyOf;
},{}],183:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule mapObject
 */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Executes the provided `callback` once for each enumerable own property in the
 * object and constructs a new object from the results. The `callback` is
 * invoked with three arguments:
 *
 *  - the property value
 *  - the property name
 *  - the object being traversed
 *
 * Properties that are added after the call to `mapObject` will not be visited
 * by `callback`. If the values of existing properties are changed, the value
 * passed to `callback` will be the value at the time `mapObject` visits them.
 * Properties that are deleted before being visited are not visited.
 *
 * @grep function objectMap()
 * @grep function objMap()
 *
 * @param {?object} object
 * @param {function} callback
 * @param {*} context
 * @return {?object}
 */
function mapObject(object, callback, context) {
  if (!object) {
    return null;
  }
  var result = {};
  for (var name in object) {
    if (hasOwnProperty.call(object, name)) {
      result[name] = callback.call(context, object[name], name, object);
    }
  }
  return result;
}

module.exports = mapObject;
},{}],184:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule memoizeStringOnly
 * @typechecks static-only
 */

'use strict';

/**
 * Memoizes the return value of a function that accepts one string argument.
 *
 * @param {function} callback
 * @return {function}
 */
function memoizeStringOnly(callback) {
  var cache = {};
  return function (string) {
    if (!cache.hasOwnProperty(string)) {
      cache[string] = callback.call(this, string);
    }
    return cache[string];
  };
}

module.exports = memoizeStringOnly;
},{}],185:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performance
 * @typechecks
 */

'use strict';

var ExecutionEnvironment = require('./ExecutionEnvironment');

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance = window.performance || window.msPerformance || window.webkitPerformance;
}

module.exports = performance || {};
},{"./ExecutionEnvironment":164}],186:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule performanceNow
 * @typechecks
 */

'use strict';

var performance = require('./performance');
var curPerformance = performance;

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (!curPerformance || !curPerformance.now) {
  curPerformance = Date;
}

var performanceNow = curPerformance.now.bind(curPerformance);

module.exports = performanceNow;
},{"./performance":185}],187:[function(require,module,exports){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule shallowEqual
 * @typechecks
 * 
 */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
function shallowEqual(objA, objB) {
  if (objA === objB) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  // Test for A's keys different from B.
  var bHasOwnProperty = hasOwnProperty.bind(objB);
  for (var i = 0; i < keysA.length; i++) {
    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
      return false;
    }
  }

  return true;
}

module.exports = shallowEqual;
},{}],188:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule toArray
 * @typechecks
 */

'use strict';

var invariant = require('./invariant');

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFromMixed.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
  // old versions of Safari).
  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : undefined;

  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : undefined;

  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : undefined;

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

module.exports = toArray;
}).call(this,require('_process'))

},{"./invariant":178,"_process":26}],189:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule warning
 */

'use strict';

var emptyFunction = require('./emptyFunction');

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  warning = function (condition, format) {
    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return; // Ignore CompositeComponent proptype check.
    }

    if (!condition) {
      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    }
  };
}

module.exports = warning;
}).call(this,require('_process'))

},{"./emptyFunction":170,"_process":26}],190:[function(require,module,exports){
'use strict';

module.exports = require('./lib/React');

},{"./lib/React":52}]},{},[10])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
